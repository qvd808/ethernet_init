
ethernet_init.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010d88  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c28  08011058  08011058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013c80  08013c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013c88  08013c88  00014c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013c8c  08013c8c  00014c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000090  24000000  08013c90  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000033f0  24000090  08013d20  00015090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003480  08013d20  00015480  2**0
                  ALLOC
  9 .lwip_sec     00004a83  30000000  30000000  00016000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00015090  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002377a  00000000  00000000  000150be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000575e  00000000  00000000  00038838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000017e0  00000000  00000000  0003df98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001300  00000000  00000000  0003f778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f369  00000000  00000000  00040a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002b9bc  00000000  00000000  0007fde1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015a936  00000000  00000000  000ab79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002060d3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006a24  00000000  00000000  00206118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 0000005f  00000000  00000000  0020cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000090 	.word	0x24000090
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011040 	.word	0x08011040

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000094 	.word	0x24000094
 800030c:	08011040 	.word	0x08011040

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f000 f9a1 	bl	80009ec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b43      	ldr	r3, [pc, #268]	@ (80007b8 <main+0x118>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b3d      	ldr	r3, [pc, #244]	@ (80007b8 <main+0x118>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <main+0x118>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a37      	ldr	r2, [pc, #220]	@ (80007b8 <main+0x118>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <main+0x118>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d138      	bne.n	800076e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b2e      	ldr	r3, [pc, #184]	@ (80007b8 <main+0x118>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b2b      	ldr	r3, [pc, #172]	@ (80007b8 <main+0x118>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	4920      	ldr	r1, [pc, #128]	@ (80007b8 <main+0x118>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <main+0x118>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a17      	ldr	r2, [pc, #92]	@ (80007b8 <main+0x118>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e000      	b.n	8000770 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800076e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000770:	f000 fd40 	bl	80011f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000774:	f000 f824 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000778:	f000 f892 	bl	80008a0 <MX_GPIO_Init>
  MX_LWIP_Init();
 800077c:	f005 f8b6 	bl	80058ec <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000780:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <main+0x11c>)
 8000782:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000786:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <main+0x11c>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <main+0x11c>)
 8000790:	2200      	movs	r2, #0
 8000792:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <main+0x11c>)
 8000796:	2200      	movs	r2, #0
 8000798:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <main+0x11c>)
 800079c:	2200      	movs	r2, #0
 800079e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007a0:	4906      	ldr	r1, [pc, #24]	@ (80007bc <main+0x11c>)
 80007a2:	2000      	movs	r0, #0
 80007a4:	f000 fc50 	bl	8001048 <BSP_COM_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <main+0x112>
  {
    Error_Handler();
 80007ae:	f000 f94a 	bl	8000a46 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	MX_LWIP_Process();
 80007b2:	f005 f9db 	bl	8005b6c <MX_LWIP_Process>
 80007b6:	e7fc      	b.n	80007b2 <main+0x112>
 80007b8:	e000ed00 	.word	0xe000ed00
 80007bc:	240000ac 	.word	0x240000ac

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b09c      	sub	sp, #112	@ 0x70
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ca:	224c      	movs	r2, #76	@ 0x4c
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00f fe26 	bl	8010420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2220      	movs	r2, #32
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f00f fe20 	bl	8010420 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f002 fcb1 	bl	8003148 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e6:	2300      	movs	r3, #0
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	4b2c      	ldr	r3, [pc, #176]	@ (800089c <SystemClock_Config+0xdc>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	4a2b      	ldr	r2, [pc, #172]	@ (800089c <SystemClock_Config+0xdc>)
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007f4:	6193      	str	r3, [r2, #24]
 80007f6:	4b29      	ldr	r3, [pc, #164]	@ (800089c <SystemClock_Config+0xdc>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000802:	bf00      	nop
 8000804:	4b25      	ldr	r3, [pc, #148]	@ (800089c <SystemClock_Config+0xdc>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800080c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000810:	d1f8      	bne.n	8000804 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000816:	2301      	movs	r3, #1
 8000818:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800081a:	2340      	movs	r3, #64	@ 0x40
 800081c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000822:	2300      	movs	r3, #0
 8000824:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000826:	2304      	movs	r3, #4
 8000828:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 800082a:	2322      	movs	r3, #34	@ 0x22
 800082c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000832:	2304      	movs	r3, #4
 8000834:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800083a:	230c      	movs	r3, #12
 800083c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800083e:	2300      	movs	r3, #0
 8000840:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000842:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000846:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084c:	4618      	mov	r0, r3
 800084e:	f002 fcb5 	bl	80031bc <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000858:	f000 f8f5 	bl	8000a46 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	233f      	movs	r3, #63	@ 0x3f
 800085e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000860:	2303      	movs	r3, #3
 8000862:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000868:	2308      	movs	r3, #8
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800086c:	2340      	movs	r3, #64	@ 0x40
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000870:	2340      	movs	r3, #64	@ 0x40
 8000872:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000878:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800087a:	2340      	movs	r3, #64	@ 0x40
 800087c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2103      	movs	r1, #3
 8000882:	4618      	mov	r0, r3
 8000884:	f003 f874 	bl	8003970 <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800088e:	f000 f8da 	bl	8000a46 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3770      	adds	r7, #112	@ 0x70
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	58024800 	.word	0x58024800

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b49      	ldr	r3, [pc, #292]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	4a47      	ldr	r2, [pc, #284]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c6:	4b45      	ldr	r3, [pc, #276]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	61bb      	str	r3, [r7, #24]
 80008d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d4:	4b41      	ldr	r3, [pc, #260]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	4a40      	ldr	r2, [pc, #256]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e4:	4b3d      	ldr	r3, [pc, #244]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b3a      	ldr	r3, [pc, #232]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f8:	4a38      	ldr	r2, [pc, #224]	@ (80009dc <MX_GPIO_Init+0x13c>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000902:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b32      	ldr	r3, [pc, #200]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000916:	4a31      	ldr	r2, [pc, #196]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000920:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000934:	4a29      	ldr	r2, [pc, #164]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800093a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800093e:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094c:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_GPIO_Init+0x13c>)
 800094e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000952:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <MX_GPIO_Init+0x13c>)
 8000954:	f043 0310 	orr.w	r3, r3, #16
 8000958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800095c:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <MX_GPIO_Init+0x13c>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	f003 0310 	and.w	r3, r3, #16
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000970:	481b      	ldr	r0, [pc, #108]	@ (80009e0 <MX_GPIO_Init+0x140>)
 8000972:	f002 fbcf 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000976:	2200      	movs	r2, #0
 8000978:	2102      	movs	r1, #2
 800097a:	481a      	ldr	r0, [pc, #104]	@ (80009e4 <MX_GPIO_Init+0x144>)
 800097c:	f002 fbca 	bl	8003114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000980:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4814      	ldr	r0, [pc, #80]	@ (80009e8 <MX_GPIO_Init+0x148>)
 8000996:	f002 fa15 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 800099a:	f244 0301 	movw	r3, #16385	@ 0x4001
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <MX_GPIO_Init+0x140>)
 80009b4:	f002 fa06 	bl	8002dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80009b8:	2302      	movs	r3, #2
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_GPIO_Init+0x144>)
 80009d0:	f002 f9f8 	bl	8002dc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3730      	adds	r7, #48	@ 0x30
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58020400 	.word	0x58020400
 80009e4:	58021000 	.word	0x58021000
 80009e8:	58020800 	.word	0x58020800

080009ec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009f2:	463b      	mov	r3, r7
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009fe:	f000 fd83 	bl	8001508 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000a0a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000a0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000a10:	230d      	movs	r3, #13
 8000a12:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000a14:	2300      	movs	r3, #0
 8000a16:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a24:	2301      	movs	r3, #1
 8000a26:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a30:	463b      	mov	r3, r7
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fda0 	bl	8001578 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a38:	2004      	movs	r0, #4
 8000a3a:	f000 fd7d 	bl	8001538 <HAL_MPU_Enable>

}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4a:	b672      	cpsid	i
}
 8000a4c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4e:	bf00      	nop
 8000a50:	e7fd      	b.n	8000a4e <Error_Handler+0x8>
	...

08000a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <HAL_MspInit+0x30>)
 8000a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a60:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x30>)
 8000a62:	f043 0302 	orr.w	r3, r3, #2
 8000a66:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x30>)
 8000a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	58024400 	.word	0x58024400

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	printf("Enter HardFault_Handler\n");
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <HardFault_Handler+0x10>)
 8000a96:	f00f fbd3 	bl	8010240 <puts>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	bf00      	nop
 8000a9c:	e7fd      	b.n	8000a9a <HardFault_Handler+0xa>
 8000a9e:	bf00      	nop
 8000aa0:	08011058 	.word	0x08011058

08000aa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	printf("Enter MemManage_Handler\n");
 8000aa8:	4802      	ldr	r0, [pc, #8]	@ (8000ab4 <MemManage_Handler+0x10>)
 8000aaa:	f00f fbc9 	bl	8010240 <puts>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aae:	bf00      	nop
 8000ab0:	e7fd      	b.n	8000aae <MemManage_Handler+0xa>
 8000ab2:	bf00      	nop
 8000ab4:	08011070 	.word	0x08011070

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr

08000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af6:	f000 fbef 	bl	80012d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_kill>:

int _kill(int pid, int sig)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b1a:	4b05      	ldr	r3, [pc, #20]	@ (8000b30 <_kill+0x20>)
 8000b1c:	2216      	movs	r2, #22
 8000b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	24003470 	.word	0x24003470

08000b34 <_exit>:

void _exit (int status)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f7ff ffe5 	bl	8000b10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b46:	bf00      	nop
 8000b48:	e7fd      	b.n	8000b46 <_exit+0x12>

08000b4a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	e00a      	b.n	8000b72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5c:	f3af 8000 	nop.w
 8000b60:	4601      	mov	r1, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	60ba      	str	r2, [r7, #8]
 8000b68:	b2ca      	uxtb	r2, r1
 8000b6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	429a      	cmp	r2, r3
 8000b78:	dbf0      	blt.n	8000b5c <_read+0x12>
  }

  return len;
 8000b7a:	687b      	ldr	r3, [r7, #4]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e009      	b.n	8000baa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1c5a      	adds	r2, r3, #1
 8000b9a:	60ba      	str	r2, [r7, #8]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 fab4 	bl	800110c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbf1      	blt.n	8000b96 <_write+0x12>
  }
  return len;
 8000bb2:	687b      	ldr	r3, [r7, #4]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3718      	adds	r7, #24
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <_close>:

int _close(int file)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be4:	605a      	str	r2, [r3, #4]
  return 0;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_isatty>:

int _isatty(int file)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfc:	2301      	movs	r3, #1
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b085      	sub	sp, #20
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	60f8      	str	r0, [r7, #12]
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c2c:	4a14      	ldr	r2, [pc, #80]	@ (8000c80 <_sbrk+0x5c>)
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <_sbrk+0x60>)
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c38:	4b13      	ldr	r3, [pc, #76]	@ (8000c88 <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d102      	bne.n	8000c46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <_sbrk+0x64>)
 8000c42:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <_sbrk+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c46:	4b10      	ldr	r3, [pc, #64]	@ (8000c88 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d205      	bcs.n	8000c60 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <_sbrk+0x6c>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b08      	ldr	r3, [pc, #32]	@ (8000c88 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a06      	ldr	r2, [pc, #24]	@ (8000c88 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	371c      	adds	r7, #28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	24050000 	.word	0x24050000
 8000c84:	00000400 	.word	0x00000400
 8000c88:	240000bc 	.word	0x240000bc
 8000c8c:	24003480 	.word	0x24003480
 8000c90:	24003470 	.word	0x24003470

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c98:	4b3e      	ldr	r3, [pc, #248]	@ (8000d94 <SystemInit+0x100>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d94 <SystemInit+0x100>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8000d98 <SystemInit+0x104>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 030f 	and.w	r3, r3, #15
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d807      	bhi.n	8000cc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cb4:	4b38      	ldr	r3, [pc, #224]	@ (8000d98 <SystemInit+0x104>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 030f 	bic.w	r3, r3, #15
 8000cbc:	4a36      	ldr	r2, [pc, #216]	@ (8000d98 <SystemInit+0x104>)
 8000cbe:	f043 0307 	orr.w	r3, r3, #7
 8000cc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cc4:	4b35      	ldr	r3, [pc, #212]	@ (8000d9c <SystemInit+0x108>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a34      	ldr	r2, [pc, #208]	@ (8000d9c <SystemInit+0x108>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000cd0:	4b32      	ldr	r3, [pc, #200]	@ (8000d9c <SystemInit+0x108>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000cd6:	4b31      	ldr	r3, [pc, #196]	@ (8000d9c <SystemInit+0x108>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4930      	ldr	r1, [pc, #192]	@ (8000d9c <SystemInit+0x108>)
 8000cdc:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <SystemInit+0x10c>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d98 <SystemInit+0x104>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d007      	beq.n	8000cfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cee:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <SystemInit+0x104>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f023 030f 	bic.w	r3, r3, #15
 8000cf6:	4a28      	ldr	r2, [pc, #160]	@ (8000d98 <SystemInit+0x104>)
 8000cf8:	f043 0307 	orr.w	r3, r3, #7
 8000cfc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000cfe:	4b27      	ldr	r3, [pc, #156]	@ (8000d9c <SystemInit+0x108>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d04:	4b25      	ldr	r3, [pc, #148]	@ (8000d9c <SystemInit+0x108>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d0a:	4b24      	ldr	r3, [pc, #144]	@ (8000d9c <SystemInit+0x108>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d10:	4b22      	ldr	r3, [pc, #136]	@ (8000d9c <SystemInit+0x108>)
 8000d12:	4a24      	ldr	r2, [pc, #144]	@ (8000da4 <SystemInit+0x110>)
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d16:	4b21      	ldr	r3, [pc, #132]	@ (8000d9c <SystemInit+0x108>)
 8000d18:	4a23      	ldr	r2, [pc, #140]	@ (8000da8 <SystemInit+0x114>)
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d9c <SystemInit+0x108>)
 8000d1e:	4a23      	ldr	r2, [pc, #140]	@ (8000dac <SystemInit+0x118>)
 8000d20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	@ (8000d9c <SystemInit+0x108>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d28:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <SystemInit+0x108>)
 8000d2a:	4a20      	ldr	r2, [pc, #128]	@ (8000dac <SystemInit+0x118>)
 8000d2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <SystemInit+0x108>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <SystemInit+0x108>)
 8000d36:	4a1d      	ldr	r2, [pc, #116]	@ (8000dac <SystemInit+0x118>)
 8000d38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d3a:	4b18      	ldr	r3, [pc, #96]	@ (8000d9c <SystemInit+0x108>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <SystemInit+0x108>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a15      	ldr	r2, [pc, #84]	@ (8000d9c <SystemInit+0x108>)
 8000d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <SystemInit+0x108>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d52:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <SystemInit+0x108>)
 8000d54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d113      	bne.n	8000d88 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <SystemInit+0x108>)
 8000d62:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d66:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <SystemInit+0x108>)
 8000d68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d6c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <SystemInit+0x11c>)
 8000d72:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d76:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <SystemInit+0x108>)
 8000d7a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d7e:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <SystemInit+0x108>)
 8000d80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d84:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	52002000 	.word	0x52002000
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000da4:	02020200 	.word	0x02020200
 8000da8:	01ff0000 	.word	0x01ff0000
 8000dac:	01010280 	.word	0x01010280
 8000db0:	52004000 	.word	0x52004000

08000db4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <ExitRun0Mode+0x2c>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <ExitRun0Mode+0x2c>)
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000dc4:	bf00      	nop
 8000dc6:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <ExitRun0Mode+0x2c>)
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f9      	beq.n	8000dc6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	58024800 	.word	0x58024800

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000e20 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000de8:	f7ff ffe4 	bl	8000db4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dec:	f7ff ff52 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f00f fb51 	bl	80104bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fc41 	bl	80006a0 <main>
  bx  lr
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000e24:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e28:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000e2c:	08013c90 	.word	0x08013c90
  ldr r2, =_sbss
 8000e30:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8000e34:	24003480 	.word	0x24003480

08000e38 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC3_IRQHandler>

08000e3a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00b      	beq.n	8000e62 <LAN8742_RegisterBusIO+0x28>
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <LAN8742_RegisterBusIO+0x28>
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <LAN8742_RegisterBusIO+0x28>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e014      	b.n	8000e92 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d139      	bne.n	8000f2e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d002      	beq.n	8000ec8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2220      	movs	r2, #32
 8000ecc:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
 8000ed2:	e01c      	b.n	8000f0e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f107 020c 	add.w	r2, r7, #12
 8000edc:	2112      	movs	r1, #18
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	4798      	blx	r3
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da03      	bge.n	8000ef0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000ee8:	f06f 0304 	mvn.w	r3, #4
 8000eec:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000eee:	e00b      	b.n	8000f08 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 031f 	and.w	r3, r3, #31
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d105      	bne.n	8000f08 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
         break;
 8000f06:	e005      	b.n	8000f14 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2b1f      	cmp	r3, #31
 8000f12:	d9df      	bls.n	8000ed4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b1f      	cmp	r3, #31
 8000f1a:	d902      	bls.n	8000f22 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000f1c:	f06f 0302 	mvn.w	r3, #2
 8000f20:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000f2e:	693b      	ldr	r3, [r7, #16]
 }
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	6810      	ldr	r0, [r2, #0]
 8000f4c:	f107 020c 	add.w	r2, r7, #12
 8000f50:	2101      	movs	r1, #1
 8000f52:	4798      	blx	r3
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da02      	bge.n	8000f60 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f5a:	f06f 0304 	mvn.w	r3, #4
 8000f5e:	e06e      	b.n	800103e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	6810      	ldr	r0, [r2, #0]
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4798      	blx	r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da02      	bge.n	8000f7c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f76:	f06f 0304 	mvn.w	r3, #4
 8000f7a:	e060      	b.n	800103e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e059      	b.n	800103e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	695b      	ldr	r3, [r3, #20]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6810      	ldr	r0, [r2, #0]
 8000f92:	f107 020c 	add.w	r2, r7, #12
 8000f96:	2100      	movs	r1, #0
 8000f98:	4798      	blx	r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	da02      	bge.n	8000fa6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000fa0:	f06f 0304 	mvn.w	r3, #4
 8000fa4:	e04b      	b.n	800103e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d11b      	bne.n	8000fe8 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d006      	beq.n	8000fc8 <LAN8742_GetLinkState+0x90>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e03a      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e033      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	e02c      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000fe4:	2305      	movs	r3, #5
 8000fe6:	e02a      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6810      	ldr	r0, [r2, #0]
 8000ff0:	f107 020c 	add.w	r2, r7, #12
 8000ff4:	211f      	movs	r1, #31
 8000ff6:	4798      	blx	r3
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da02      	bge.n	8001004 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000ffe:	f06f 0304 	mvn.w	r3, #4
 8001002:	e01c      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800100e:	2306      	movs	r3, #6
 8001010:	e015      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f003 031c 	and.w	r3, r3, #28
 8001018:	2b18      	cmp	r3, #24
 800101a:	d101      	bne.n	8001020 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800101c:	2302      	movs	r3, #2
 800101e:	e00e      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 031c 	and.w	r3, r3, #28
 8001026:	2b08      	cmp	r3, #8
 8001028:	d101      	bne.n	800102e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800102a:	2303      	movs	r3, #3
 800102c:	e007      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f003 031c 	and.w	r3, r3, #28
 8001034:	2b14      	cmp	r3, #20
 8001036:	d101      	bne.n	800103c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001038:	2304      	movs	r3, #4
 800103a:	e000      	b.n	800103e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800103c:	2305      	movs	r3, #5
    }
  }
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800105e:	f06f 0301 	mvn.w	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e018      	b.n	8001098 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2294      	movs	r2, #148	@ 0x94
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a0d      	ldr	r2, [pc, #52]	@ (80010a4 <BSP_COM_Init+0x5c>)
 8001070:	4413      	add	r3, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f866 	bl	8001144 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2294      	movs	r2, #148	@ 0x94
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	4a08      	ldr	r2, [pc, #32]	@ (80010a4 <BSP_COM_Init+0x5c>)
 8001082:	4413      	add	r3, r2
 8001084:	6839      	ldr	r1, [r7, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f80e 	bl	80010a8 <MX_USART3_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001092:	f06f 0303 	mvn.w	r3, #3
 8001096:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001098:	68fb      	ldr	r3, [r7, #12]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	240000c0 	.word	0x240000c0

080010a8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <MX_USART3_Init+0x60>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	895b      	ldrh	r3, [r3, #10]
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	891b      	ldrh	r3, [r3, #8]
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	899b      	ldrh	r3, [r3, #12]
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010f4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f003 fa84 	bl	8004604 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	24000008 	.word	0x24000008

0800110c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001114:	4b09      	ldr	r3, [pc, #36]	@ (800113c <__io_putchar+0x30>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	2394      	movs	r3, #148	@ 0x94
 800111c:	fb02 f303 	mul.w	r3, r2, r3
 8001120:	4a07      	ldr	r2, [pc, #28]	@ (8001140 <__io_putchar+0x34>)
 8001122:	1898      	adds	r0, r3, r2
 8001124:	1d39      	adds	r1, r7, #4
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	2201      	movs	r2, #1
 800112c:	f003 fac4 	bl	80046b8 <HAL_UART_Transmit>
  return ch;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000154 	.word	0x24000154
 8001140:	240000c0 	.word	0x240000c0

08001144 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	@ 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800114c:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <COM1_MspInit+0xa8>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001152:	4a26      	ldr	r2, [pc, #152]	@ (80011ec <COM1_MspInit+0xa8>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800115c:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <COM1_MspInit+0xa8>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800116a:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <COM1_MspInit+0xa8>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001170:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <COM1_MspInit+0xa8>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <COM1_MspInit+0xa8>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <COM1_MspInit+0xa8>)
 800118a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118e:	4a17      	ldr	r2, [pc, #92]	@ (80011ec <COM1_MspInit+0xa8>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001194:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001198:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <COM1_MspInit+0xa8>)
 800119a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800119e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80011a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80011b8:	2307      	movs	r3, #7
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	480b      	ldr	r0, [pc, #44]	@ (80011f0 <COM1_MspInit+0xac>)
 80011c4:	f001 fdfe 	bl	8002dc4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80011c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011cc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80011d2:	2307      	movs	r3, #7
 80011d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	@ (80011f0 <COM1_MspInit+0xac>)
 80011de:	f001 fdf1 	bl	8002dc4 <HAL_GPIO_Init>
}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	@ 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	58024400 	.word	0x58024400
 80011f0:	58020c00 	.word	0x58020c00

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f952 	bl	80014a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001200:	f002 fd6c 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8001204:	4602      	mov	r2, r0
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_Init+0x68>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	f003 030f 	and.w	r3, r3, #15
 8001210:	4913      	ldr	r1, [pc, #76]	@ (8001260 <HAL_Init+0x6c>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800121e:	4b0f      	ldr	r3, [pc, #60]	@ (800125c <HAL_Init+0x68>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	4a0e      	ldr	r2, [pc, #56]	@ (8001260 <HAL_Init+0x6c>)
 8001228:	5cd3      	ldrb	r3, [r2, r3]
 800122a:	f003 031f 	and.w	r3, r3, #31
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	fa22 f303 	lsr.w	r3, r2, r3
 8001234:	4a0b      	ldr	r2, [pc, #44]	@ (8001264 <HAL_Init+0x70>)
 8001236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001238:	4a0b      	ldr	r2, [pc, #44]	@ (8001268 <HAL_Init+0x74>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f814 	bl	800126c <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e002      	b.n	8001254 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800124e:	f7ff fc01 	bl	8000a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	58024400 	.word	0x58024400
 8001260:	08013a8c 	.word	0x08013a8c
 8001264:	24000004 	.word	0x24000004
 8001268:	24000000 	.word	0x24000000

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_InitTick+0x60>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e021      	b.n	80012c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <HAL_InitTick+0x64>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_InitTick+0x60>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4619      	mov	r1, r3
 800128a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001292:	fbb2 f3f3 	udiv	r3, r2, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f929 	bl	80014ee <HAL_SYSTICK_Config>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00e      	b.n	80012c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b0f      	cmp	r3, #15
 80012aa:	d80a      	bhi.n	80012c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ac:	2200      	movs	r2, #0
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f000 f901 	bl	80014ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b8:	4a06      	ldr	r2, [pc, #24]	@ (80012d4 <HAL_InitTick+0x68>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	e000      	b.n	80012c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	24000010 	.word	0x24000010
 80012d0:	24000000 	.word	0x24000000
 80012d4:	2400000c 	.word	0x2400000c

080012d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_IncTick+0x20>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_IncTick+0x24>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a04      	ldr	r2, [pc, #16]	@ (80012fc <HAL_IncTick+0x24>)
 80012ea:	6013      	str	r3, [r2, #0]
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	24000010 	.word	0x24000010
 80012fc:	24000158 	.word	0x24000158

08001300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b03      	ldr	r3, [pc, #12]	@ (8001314 <HAL_GetTick+0x14>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	24000158 	.word	0x24000158

08001318 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001328:	4904      	ldr	r1, [pc, #16]	@ (800133c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	58000400 	.word	0x58000400

08001340 <__NVIC_SetPriorityGrouping>:
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <__NVIC_SetPriorityGrouping+0x40>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800135c:	4013      	ands	r3, r2
 800135e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	4313      	orrs	r3, r2
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <__NVIC_SetPriorityGrouping+0x40>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00
 8001384:	05fa0000 	.word	0x05fa0000

08001388 <__NVIC_GetPriorityGrouping>:
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800138c:	4b04      	ldr	r3, [pc, #16]	@ (80013a0 <__NVIC_GetPriorityGrouping+0x18>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	f003 0307 	and.w	r3, r3, #7
}
 8001396:	4618      	mov	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <__NVIC_SetPriority>:
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	6039      	str	r1, [r7, #0]
 80013ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	db0a      	blt.n	80013ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	490c      	ldr	r1, [pc, #48]	@ (80013f0 <__NVIC_SetPriority+0x4c>)
 80013be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c2:	0112      	lsls	r2, r2, #4
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	440b      	add	r3, r1
 80013c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80013cc:	e00a      	b.n	80013e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4908      	ldr	r1, [pc, #32]	@ (80013f4 <__NVIC_SetPriority+0x50>)
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	f003 030f 	and.w	r3, r3, #15
 80013da:	3b04      	subs	r3, #4
 80013dc:	0112      	lsls	r2, r2, #4
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	440b      	add	r3, r1
 80013e2:	761a      	strb	r2, [r3, #24]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000e100 	.word	0xe000e100
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <NVIC_EncodePriority>:
{
 80013f8:	b480      	push	{r7}
 80013fa:	b089      	sub	sp, #36	@ 0x24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f1c3 0307 	rsb	r3, r3, #7
 8001412:	2b04      	cmp	r3, #4
 8001414:	bf28      	it	cs
 8001416:	2304      	movcs	r3, #4
 8001418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3304      	adds	r3, #4
 800141e:	2b06      	cmp	r3, #6
 8001420:	d902      	bls.n	8001428 <NVIC_EncodePriority+0x30>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3b03      	subs	r3, #3
 8001426:	e000      	b.n	800142a <NVIC_EncodePriority+0x32>
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43da      	mvns	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	401a      	ands	r2, r3
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001440:	f04f 31ff 	mov.w	r1, #4294967295
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	43d9      	mvns	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001450:	4313      	orrs	r3, r2
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	@ 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3b01      	subs	r3, #1
 800146c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001470:	d301      	bcc.n	8001476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001472:	2301      	movs	r3, #1
 8001474:	e00f      	b.n	8001496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001476:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <SysTick_Config+0x40>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147e:	210f      	movs	r1, #15
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f7ff ff8e 	bl	80013a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SysTick_Config+0x40>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SysTick_Config+0x40>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff47 	bl	8001340 <__NVIC_SetPriorityGrouping>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c8:	f7ff ff5e 	bl	8001388 <__NVIC_GetPriorityGrouping>
 80014cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	68b9      	ldr	r1, [r7, #8]
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f7ff ff90 	bl	80013f8 <NVIC_EncodePriority>
 80014d8:	4602      	mov	r2, r0
 80014da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff5f 	bl	80013a4 <__NVIC_SetPriority>
}
 80014e6:	bf00      	nop
 80014e8:	3718      	adds	r7, #24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffb2 	bl	8001460 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800150c:	f3bf 8f5f 	dmb	sy
}
 8001510:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <HAL_MPU_Disable+0x28>)
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	4a06      	ldr	r2, [pc, #24]	@ (8001530 <HAL_MPU_Disable+0x28>)
 8001518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800151c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800151e:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <HAL_MPU_Disable+0x2c>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00
 8001534:	e000ed90 	.word	0xe000ed90

08001538 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001540:	4a0b      	ldr	r2, [pc, #44]	@ (8001570 <HAL_MPU_Enable+0x38>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800154a:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <HAL_MPU_Enable+0x3c>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	4a09      	ldr	r2, [pc, #36]	@ (8001574 <HAL_MPU_Enable+0x3c>)
 8001550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001554:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001556:	f3bf 8f4f 	dsb	sy
}
 800155a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800155c:	f3bf 8f6f 	isb	sy
}
 8001560:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed90 	.word	0xe000ed90
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	785a      	ldrb	r2, [r3, #1]
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001586:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <HAL_MPU_ConfigRegion+0x7c>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4a19      	ldr	r2, [pc, #100]	@ (80015f4 <HAL_MPU_ConfigRegion+0x7c>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001594:	4a17      	ldr	r2, [pc, #92]	@ (80015f4 <HAL_MPU_ConfigRegion+0x7c>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7b1b      	ldrb	r3, [r3, #12]
 80015a0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	7adb      	ldrb	r3, [r3, #11]
 80015a6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	7a9b      	ldrb	r3, [r3, #10]
 80015ae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7b5b      	ldrb	r3, [r3, #13]
 80015b6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7b9b      	ldrb	r3, [r3, #14]
 80015be:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7bdb      	ldrb	r3, [r3, #15]
 80015c6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7a5b      	ldrb	r3, [r3, #9]
 80015ce:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7a1b      	ldrb	r3, [r3, #8]
 80015d6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015d8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	7812      	ldrb	r2, [r2, #0]
 80015de:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015e0:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015e2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015e4:	6113      	str	r3, [r2, #16]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed90 	.word	0xe000ed90

080015f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0e3      	b.n	80017d2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001610:	2b00      	cmp	r3, #0
 8001612:	d106      	bne.n	8001622 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f004 fc7b 	bl	8005f18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b6e      	ldr	r3, [pc, #440]	@ (80017dc <HAL_ETH_Init+0x1e4>)
 8001624:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001628:	4a6c      	ldr	r2, [pc, #432]	@ (80017dc <HAL_ETH_Init+0x1e4>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001632:	4b6a      	ldr	r3, [pc, #424]	@ (80017dc <HAL_ETH_Init+0x1e4>)
 8001634:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7a1b      	ldrb	r3, [r3, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fe65 	bl	8001318 <HAL_SYSCFG_ETHInterfaceSelect>
 800164e:	e003      	b.n	8001658 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001650:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001654:	f7ff fe60 	bl	8001318 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001658:	4b61      	ldr	r3, [pc, #388]	@ (80017e0 <HAL_ETH_Init+0x1e8>)
 800165a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001672:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001674:	f7ff fe44 	bl	8001300 <HAL_GetTick>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800167a:	e011      	b.n	80016a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800167c:	f7ff fe40 	bl	8001300 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800168a:	d909      	bls.n	80016a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2204      	movs	r2, #4
 8001690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	22e0      	movs	r2, #224	@ 0xe0
 8001698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e098      	b.n	80017d2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1e4      	bne.n	800167c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fdb4 	bl	8002220 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016b8:	f002 fc8a 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 80016bc:	4603      	mov	r3, r0
 80016be:	4a49      	ldr	r2, [pc, #292]	@ (80017e4 <HAL_ETH_Init+0x1ec>)
 80016c0:	fba2 2303 	umull	r2, r3, r2, r3
 80016c4:	0c9a      	lsrs	r2, r3, #18
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	3a01      	subs	r2, #1
 80016cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 ff97 	bl	8002604 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80016e2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016f2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	22e0      	movs	r2, #224	@ 0xe0
 800170e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e05d      	b.n	80017d2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800171e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001722:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <HAL_ETH_Init+0x1f0>)
 8001724:	4013      	ands	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6952      	ldr	r2, [r2, #20]
 800172a:	0051      	lsls	r1, r2, #1
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	430b      	orrs	r3, r1
 8001732:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001736:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 ffff 	bl	800273e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f001 f845 	bl	80027d0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	3305      	adds	r3, #5
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	021a      	lsls	r2, r3, #8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	3304      	adds	r3, #4
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	3303      	adds	r3, #3
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	061a      	lsls	r2, r3, #24
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	3302      	adds	r3, #2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	041b      	lsls	r3, r3, #16
 8001778:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	3301      	adds	r3, #1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001784:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001792:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001794:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_ETH_Init+0x1f4>)
 80017a6:	430b      	orrs	r3, r1
 80017a8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_ETH_Init+0x1f8>)
 80017ba:	430b      	orrs	r3, r1
 80017bc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2210      	movs	r2, #16
 80017cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58000400 	.word	0x58000400
 80017e4:	431bde83 	.word	0x431bde83
 80017e8:	ffff8001 	.word	0xffff8001
 80017ec:	0c020060 	.word	0x0c020060
 80017f0:	0c20c000 	.word	0x0c20c000

080017f4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001802:	2b10      	cmp	r3, #16
 8001804:	d153      	bne.n	80018ae <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2220      	movs	r2, #32
 800180a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f9f3 	bl	8001c00 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0202 	orr.w	r2, r2, #2
 8001828:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0201 	orr.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001856:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001866:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001872:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6812      	ldr	r2, [r2, #0]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001882:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 800189a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800189e:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2240      	movs	r2, #64	@ 0x40
 80018a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80018aa:	2300      	movs	r3, #0
 80018ac:	e000      	b.n	80018b0 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
  }
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80018c6:	2b40      	cmp	r3, #64	@ 0x40
 80018c8:	d13f      	bne.n	800194a <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018da:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6812      	ldr	r2, [r2, #0]
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	6812      	ldr	r2, [r2, #0]
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001906:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0201 	bic.w	r2, r2, #1
 8001918:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0202 	bic.w	r2, r2, #2
 800193c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2210      	movs	r2, #16
 8001942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
  }
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001970:	f043 0201 	orr.w	r2, r3, #1
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e07f      	b.n	8001a7e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001984:	2b40      	cmp	r3, #64	@ 0x40
 8001986:	d179      	bne.n	8001a7c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001988:	2200      	movs	r2, #0
 800198a:	68b9      	ldr	r1, [r7, #8]
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 ff7d 	bl	800288c <ETH_Prepare_Tx_Descriptors>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800199e:	f043 0202 	orr.w	r2, r3, #2
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e068      	b.n	8001a7e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80019ac:	f3bf 8f4f 	dsb	sy
}
 80019b0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	3206      	adds	r2, #6
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d904      	bls.n	80019dc <HAL_ETH_Transmit+0x84>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	1f1a      	subs	r2, r3, #4
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3106      	adds	r1, #6
 80019e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019ec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019f0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 80019f4:	f7ff fc84 	bl	8001300 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80019fa:	e039      	b.n	8001a70 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a04:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d012      	beq.n	8001a36 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a16:	f043 0208 	orr.w	r2, r3, #8
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a28:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e023      	b.n	8001a7e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d018      	beq.n	8001a70 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7ff fc5f 	bl	8001300 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <HAL_ETH_Transmit+0xfc>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10d      	bne.n	8001a70 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a5a:	f043 0204 	orr.w	r2, r3, #4
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001a6a:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e006      	b.n	8001a7e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	dbc1      	blt.n	80019fc <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b088      	sub	sp, #32
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0a2      	b.n	8001bf8 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ab8:	2b40      	cmp	r3, #64	@ 0x40
 8001aba:	d001      	beq.n	8001ac0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e09b      	b.n	8001bf8 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69fa      	ldr	r2, [r7, #28]
 8001aca:	3212      	adds	r2, #18
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ad6:	f1c3 0304 	rsb	r3, r3, #4
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001adc:	e064      	b.n	8001ba8 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	685a      	ldr	r2, [r3, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <HAL_ETH_ReadData+0x88>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d03a      	beq.n	8001b84 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	f004 fbb0 	bl	80062c8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6c:	1c5a      	adds	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	441a      	add	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d902      	bls.n	8001b96 <HAL_ETH_ReadData+0x110>
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	3b04      	subs	r3, #4
 8001b94:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69fa      	ldr	r2, [r7, #28]
 8001b9a:	3212      	adds	r2, #18
 8001b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ba0:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db06      	blt.n	8001bbe <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d202      	bcs.n	8001bbe <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d08f      	beq.n	8001ade <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	441a      	add	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d002      	beq.n	8001bd8 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f814 	bl	8001c00 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69fa      	ldr	r2, [r7, #28]
 8001bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8001bde:	7cfb      	ldrb	r3, [r7, #19]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d108      	bne.n	8001bf6 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b088      	sub	sp, #32
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c14:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	3212      	adds	r2, #18
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c26:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001c28:	e038      	b.n	8001c9c <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d112      	bne.n	8001c58 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fb16 	bl	8006268 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d102      	bne.n	8001c48 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	74fb      	strb	r3, [r7, #19]
 8001c46:	e007      	b.n	8001c58 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	461a      	mov	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001c58:	7cfb      	ldrb	r3, [r7, #19]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01e      	beq.n	8001c9c <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	e003      	b.n	8001c78 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001c76:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d902      	bls.n	8001c8a <ETH_UpdateDescriptor+0x8a>
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	3b04      	subs	r3, #4
 8001c88:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	3212      	adds	r2, #18
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <ETH_UpdateDescriptor+0xa8>
 8001ca2:	7cfb      	ldrb	r3, [r7, #19]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1c0      	bne.n	8001c2a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d01b      	beq.n	8001cea <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3303      	adds	r3, #3
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001cbc:	f3bf 8f5f 	dmb	sy
}
 8001cc0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6919      	ldr	r1, [r3, #16]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	18ca      	adds	r2, r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cda:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69fa      	ldr	r2, [r7, #28]
 8001ce2:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001cea:	bf00      	nop
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b086      	sub	sp, #24
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
 8001cfe:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e03e      	b.n	8001d92 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d1c:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	055b      	lsls	r3, r3, #21
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f043 030c 	orr.w	r3, r3, #12
 8001d40:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001d54:	f7ff fad4 	bl	8001300 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d5a:	e009      	b.n	8001d70 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001d5c:	f7ff fad0 	bl	8001300 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d6a:	d901      	bls.n	8001d70 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e010      	b.n	8001d92 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1ed      	bne.n	8001d5c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e03c      	b.n	8001e38 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dc6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	055b      	lsls	r3, r3, #21
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	041b      	lsls	r3, r3, #16
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f023 030c 	bic.w	r3, r3, #12
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <HAL_ETH_WritePHYRegister+0xa4>)
 8001dfe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001e02:	4a0f      	ldr	r2, [pc, #60]	@ (8001e40 <HAL_ETH_WritePHYRegister+0xa4>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001e0a:	f7ff fa79 	bl	8001300 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e10:	e009      	b.n	8001e26 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001e12:	f7ff fa75 	bl	8001300 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e20:	d901      	bls.n	8001e26 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e008      	b.n	8001e38 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1ed      	bne.n	8001e12 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40028000 	.word	0x40028000

08001e44 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e1c3      	b.n	80021e0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 020c 	and.w	r2, r3, #12
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf14      	ite	ne
 8001e74:	2301      	movne	r3, #1
 8001e76:	2300      	moveq	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bf0c      	ite	eq
 8001e9e:	2301      	moveq	r3, #1
 8001ea0:	2300      	movne	r3, #0
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf14      	ite	ne
 8001eba:	2301      	movne	r3, #1
 8001ebc:	2300      	moveq	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf14      	ite	ne
 8001f08:	2301      	movne	r3, #1
 8001f0a:	2300      	moveq	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	bf0c      	ite	eq
 8001f58:	2301      	moveq	r3, #1
 8001f5a:	2300      	movne	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf14      	ite	ne
 8001f8c:	2301      	movne	r3, #1
 8001f8e:	2300      	moveq	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	bf14      	ite	ne
 8001fa6:	2301      	movne	r3, #1
 8001fa8:	2300      	moveq	r3, #0
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	bf14      	ite	ne
 8001fda:	2301      	movne	r3, #1
 8001fdc:	2300      	moveq	r3, #0
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	bf14      	ite	ne
 8002002:	2301      	movne	r3, #1
 8002004:	2300      	moveq	r3, #0
 8002006:	b2db      	uxtb	r3, r3
 8002008:	461a      	mov	r2, r3
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf14      	ite	ne
 8002054:	2301      	movne	r3, #1
 8002056:	2300      	moveq	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf14      	ite	ne
 800208c:	2301      	movne	r3, #1
 800208e:	2300      	moveq	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0e5b      	lsrs	r3, r3, #25
 80020a2:	f003 021f 	and.w	r2, r3, #31
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf14      	ite	ne
 80020e2:	2301      	movne	r3, #1
 80020e4:	2300      	moveq	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002112:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002120:	0c1b      	lsrs	r3, r3, #16
 8002122:	b29a      	uxth	r2, r3
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf14      	ite	ne
 8002138:	2301      	movne	r3, #1
 800213a:	2300      	moveq	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	461a      	mov	r2, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800216c:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800217c:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	bf14      	ite	ne
 8002194:	2301      	movne	r3, #1
 8002196:	2300      	moveq	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80021aa:	f003 0310 	and.w	r3, r3, #16
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	461a      	mov	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80021c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf0c      	ite	eq
 80021d0:	2301      	moveq	r3, #1
 80021d2:	2300      	movne	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e00b      	b.n	8002218 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002206:	2b10      	cmp	r3, #16
 8002208:	d105      	bne.n	8002216 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800220a:	6839      	ldr	r1, [r7, #0]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 f857 	bl	80022c0 <ETH_SetMACConfig>

    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e000      	b.n	8002218 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
  }
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002230:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002238:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800223a:	f001 fec9 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 800223e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4a1a      	ldr	r2, [pc, #104]	@ (80022ac <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d804      	bhi.n	8002252 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e022      	b.n	8002298 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4a16      	ldr	r2, [pc, #88]	@ (80022b0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d204      	bcs.n	8002264 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e019      	b.n	8002298 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d915      	bls.n	8002298 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d804      	bhi.n	800227e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e00c      	b.n	8002298 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4a0e      	ldr	r2, [pc, #56]	@ (80022bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d804      	bhi.n	8002290 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	e003      	b.n	8002298 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002296:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	02160ebf 	.word	0x02160ebf
 80022b0:	03938700 	.word	0x03938700
 80022b4:	05f5e0ff 	.word	0x05f5e0ff
 80022b8:	08f0d17f 	.word	0x08f0d17f
 80022bc:	0ee6b27f 	.word	0x0ee6b27f

080022c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80022d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	791b      	ldrb	r3, [r3, #4]
 80022d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80022da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	7b1b      	ldrb	r3, [r3, #12]
 80022e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	7b5b      	ldrb	r3, [r3, #13]
 80022e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7b9b      	ldrb	r3, [r3, #14]
 80022f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	7bdb      	ldrb	r3, [r3, #15]
 80022f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	7c12      	ldrb	r2, [r2, #16]
 8002300:	2a00      	cmp	r2, #0
 8002302:	d102      	bne.n	800230a <ETH_SetMACConfig+0x4a>
 8002304:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002308:	e000      	b.n	800230c <ETH_SetMACConfig+0x4c>
 800230a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800230c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	7c52      	ldrb	r2, [r2, #17]
 8002312:	2a00      	cmp	r2, #0
 8002314:	d102      	bne.n	800231c <ETH_SetMACConfig+0x5c>
 8002316:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800231a:	e000      	b.n	800231e <ETH_SetMACConfig+0x5e>
 800231c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800231e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	7c9b      	ldrb	r3, [r3, #18]
 8002324:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002326:	431a      	orrs	r2, r3
               macconf->Speed |
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800232c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	7f1b      	ldrb	r3, [r3, #28]
 8002338:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800233a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	7f5b      	ldrb	r3, [r3, #29]
 8002340:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002342:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	7f92      	ldrb	r2, [r2, #30]
 8002348:	2a00      	cmp	r2, #0
 800234a:	d102      	bne.n	8002352 <ETH_SetMACConfig+0x92>
 800234c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002350:	e000      	b.n	8002354 <ETH_SetMACConfig+0x94>
 8002352:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002354:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	7fdb      	ldrb	r3, [r3, #31]
 800235a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800235c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002364:	2a00      	cmp	r2, #0
 8002366:	d102      	bne.n	800236e <ETH_SetMACConfig+0xae>
 8002368:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800236c:	e000      	b.n	8002370 <ETH_SetMACConfig+0xb0>
 800236e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002370:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002376:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800237e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002380:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b56      	ldr	r3, [pc, #344]	@ (80024ec <ETH_SetMACConfig+0x22c>)
 8002392:	4013      	ands	r3, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6812      	ldr	r2, [r2, #0]
 8002398:	68f9      	ldr	r1, [r7, #12]
 800239a:	430b      	orrs	r3, r1
 800239c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80023b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80023be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80023c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d102      	bne.n	80023d2 <ETH_SetMACConfig+0x112>
 80023cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023d0:	e000      	b.n	80023d4 <ETH_SetMACConfig+0x114>
 80023d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	4b42      	ldr	r3, [pc, #264]	@ (80024f0 <ETH_SetMACConfig+0x230>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	68f9      	ldr	r1, [r7, #12]
 80023ee:	430b      	orrs	r3, r1
 80023f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023fe:	4313      	orrs	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	4b3a      	ldr	r3, [pc, #232]	@ (80024f4 <ETH_SetMACConfig+0x234>)
 800240a:	4013      	ands	r3, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	68f9      	ldr	r1, [r7, #12]
 8002412:	430b      	orrs	r3, r1
 8002414:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800241c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002422:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800242a:	2a00      	cmp	r2, #0
 800242c:	d101      	bne.n	8002432 <ETH_SetMACConfig+0x172>
 800242e:	2280      	movs	r2, #128	@ 0x80
 8002430:	e000      	b.n	8002434 <ETH_SetMACConfig+0x174>
 8002432:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002434:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800243a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002446:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800244a:	4013      	ands	r3, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	68f9      	ldr	r1, [r7, #12]
 8002452:	430b      	orrs	r3, r1
 8002454:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800245c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002464:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	f023 0103 	bic.w	r1, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	430a      	orrs	r2, r1
 800247e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800248a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	d101      	bne.n	80024ae <ETH_SetMACConfig+0x1ee>
 80024aa:	2240      	movs	r2, #64	@ 0x40
 80024ac:	e000      	b.n	80024b0 <ETH_SetMACConfig+0x1f0>
 80024ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80024b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80024b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80024ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80024c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80024d0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	430a      	orrs	r2, r1
 80024dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80024e0:	bf00      	nop
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	00048083 	.word	0x00048083
 80024f0:	c0f88000 	.word	0xc0f88000
 80024f4:	fffffef0 	.word	0xfffffef0

080024f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b38      	ldr	r3, [pc, #224]	@ (80025f0 <ETH_SetDMAConfig+0xf8>)
 800250e:	4013      	ands	r3, r2
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	6811      	ldr	r1, [r2, #0]
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800251e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	791b      	ldrb	r3, [r3, #4]
 8002524:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800252a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	7b1b      	ldrb	r3, [r3, #12]
 8002530:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002532:	4313      	orrs	r3, r2
 8002534:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	4b2c      	ldr	r3, [pc, #176]	@ (80025f4 <ETH_SetDMAConfig+0xfc>)
 8002542:	4013      	ands	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	68f9      	ldr	r1, [r7, #12]
 800254a:	430b      	orrs	r3, r1
 800254c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002550:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7b5b      	ldrb	r3, [r3, #13]
 8002556:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002568:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800256c:	4b22      	ldr	r3, [pc, #136]	@ (80025f8 <ETH_SetDMAConfig+0x100>)
 800256e:	4013      	ands	r3, r2
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6812      	ldr	r2, [r2, #0]
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	430b      	orrs	r3, r1
 8002578:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800257c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	7d1b      	ldrb	r3, [r3, #20]
 8002588:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800258a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	7f5b      	ldrb	r3, [r3, #29]
 8002590:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800259e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80025a2:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <ETH_SetDMAConfig+0x104>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	68f9      	ldr	r1, [r7, #12]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025b2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	7f1b      	ldrb	r3, [r3, #28]
 80025ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025cc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80025d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002600 <ETH_SetDMAConfig+0x108>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	68f9      	ldr	r1, [r7, #12]
 80025da:	430b      	orrs	r3, r1
 80025dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025e0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	ffff87fd 	.word	0xffff87fd
 80025f4:	ffff2ffe 	.word	0xffff2ffe
 80025f8:	fffec000 	.word	0xfffec000
 80025fc:	ffc0efef 	.word	0xffc0efef
 8002600:	7fc0ffff 	.word	0x7fc0ffff

08002604 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0a4      	sub	sp, #144	@ 0x90
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002612:	2300      	movs	r3, #0
 8002614:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002622:	2301      	movs	r3, #1
 8002624:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002644:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800264c:	2300      	movs	r3, #0
 800264e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800265c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002660:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002668:	2300      	movs	r3, #0
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800266c:	2301      	movs	r3, #1
 800266e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800267e:	2300      	movs	r3, #0
 8002680:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002682:	2300      	movs	r3, #0
 8002684:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002686:	2300      	movs	r3, #0
 8002688:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800269c:	2320      	movs	r3, #32
 800269e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80026a2:	2301      	movs	r3, #1
 80026a4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80026ae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80026b8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80026c0:	2302      	movs	r3, #2
 80026c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026de:	2300      	movs	r3, #0
 80026e0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026ec:	4619      	mov	r1, r3
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff fde6 	bl	80022c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026f4:	2301      	movs	r3, #1
 80026f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026f8:	2301      	movs	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002706:	2300      	movs	r3, #0
 8002708:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800270e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002712:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002718:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800271c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002724:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800272a:	f107 0308 	add.w	r3, r7, #8
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff fee1 	bl	80024f8 <ETH_SetDMAConfig>
}
 8002736:	bf00      	nop
 8002738:	3790      	adds	r7, #144	@ 0x90
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e01d      	b.n	8002788 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68d9      	ldr	r1, [r3, #12]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	4413      	add	r3, r2
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	440b      	add	r3, r1
 800275c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2200      	movs	r2, #0
 8002768:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	3206      	adds	r2, #6
 800277e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d9de      	bls.n	800274c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800279c:	461a      	mov	r2, r3
 800279e:	2303      	movs	r3, #3
 80027a0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80027c4:	bf00      	nop
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e023      	b.n	8002826 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6919      	ldr	r1, [r3, #16]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	440b      	add	r3, r1
 80027ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	2200      	movs	r2, #0
 80027fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2200      	movs	r2, #0
 800280c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2200      	movs	r2, #0
 8002812:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	3212      	adds	r2, #18
 800281c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3301      	adds	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d9d8      	bls.n	80027de <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002852:	461a      	mov	r2, r3
 8002854:	2303      	movs	r3, #3
 8002856:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691a      	ldr	r2, [r3, #16]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002866:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800287a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800287e:	bf00      	nop
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800288c:	b480      	push	{r7}
 800288e:	b091      	sub	sp, #68	@ 0x44
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3318      	adds	r3, #24
 800289c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80028a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80028b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028ce:	d007      	beq.n	80028e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d4:	3304      	adds	r3, #4
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80028e0:	2302      	movs	r3, #2
 80028e2:	e266      	b.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d044      	beq.n	800297a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	4b75      	ldr	r3, [pc, #468]	@ (8002acc <ETH_Prepare_Tx_Descriptors+0x240>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028fc:	431a      	orrs	r2, r3
 80028fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002900:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800290a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800290c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800291c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d027      	beq.n	800297a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	b29a      	uxth	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	041b      	lsls	r3, r3, #16
 8002936:	431a      	orrs	r2, r3
 8002938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	431a      	orrs	r2, r3
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002968:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002978:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0310 	and.w	r3, r3, #16
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00e      	beq.n	80029a4 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	4b51      	ldr	r3, [pc, #324]	@ (8002ad0 <ETH_Prepare_Tx_Descriptors+0x244>)
 800298c:	4013      	ands	r3, r2
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	6992      	ldr	r2, [r2, #24]
 8002992:	431a      	orrs	r2, r3
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80029a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a2:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0310 	and.w	r3, r3, #16
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d036      	beq.n	8002a2a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80029bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80029c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80029c8:	f3bf 8f5f 	dmb	sy
}
 80029cc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80029ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80029da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029dc:	3301      	adds	r3, #1
 80029de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d902      	bls.n	80029ec <ETH_Prepare_Tx_Descriptors+0x160>
 80029e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029e8:	3b04      	subs	r3, #4
 80029ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 80029f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029f8:	3301      	adds	r3, #1
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80029fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a08:	d10f      	bne.n	8002a2a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002a14:	f3bf 8f5f 	dmb	sy
}
 8002a18:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	e1c3      	b.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a38:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ad0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a44:	6852      	ldr	r2, [r2, #4]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a4a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d012      	beq.n	8002a7a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a62:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a6e:	6852      	ldr	r2, [r2, #4]
 8002a70:	0412      	lsls	r2, r2, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a76:	609a      	str	r2, [r3, #8]
 8002a78:	e008      	b.n	8002a8c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a8a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d021      	beq.n	8002adc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	04db      	lsls	r3, r3, #19
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	69d2      	ldr	r2, [r2, #28]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002abc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	e02e      	b.n	8002b2a <ETH_Prepare_Tx_Descriptors+0x29e>
 8002acc:	ffff0000 	.word	0xffff0000
 8002ad0:	ffffc000 	.word	0xffffc000
 8002ad4:	c000ffff 	.word	0xc000ffff
 8002ad8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b7b      	ldr	r3, [pc, #492]	@ (8002cd0 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	6852      	ldr	r2, [r2, #4]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aec:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0320 	and.w	r3, r3, #32
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	431a      	orrs	r2, r3
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b52:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b60:	f3bf 8f5f 	dmb	sy
}
 8002b64:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b70:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80da 	beq.w	8002d34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b90:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002b92:	e0cf      	b.n	8002d34 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d902      	bls.n	8002bb2 <ETH_Prepare_Tx_Descriptors+0x326>
 8002bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bd4:	d007      	beq.n	8002be6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bda:	3304      	adds	r3, #4
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d029      	beq.n	8002c3a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bf8:	e019      	b.n	8002c2e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002bfa:	f3bf 8f5f 	dmb	sy
}
 8002bfe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c0e:	3301      	adds	r3, #1
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d902      	bls.n	8002c1e <ETH_Prepare_Tx_Descriptors+0x392>
 8002c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1a:	3b04      	subs	r3, #4
 8002c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c26:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d3e1      	bcc.n	8002bfa <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0bb      	b.n	8002db2 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c5a:	6852      	ldr	r2, [r2, #4]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c84:	6852      	ldr	r2, [r2, #4]
 8002c86:	0412      	lsls	r2, r2, #16
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	e008      	b.n	8002ca2 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c92:	2200      	movs	r2, #0
 8002c94:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cd8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca0:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0310 	and.w	r3, r3, #16
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d018      	beq.n	8002ce0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8002cdc <ETH_Prepare_Tx_Descriptors+0x450>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	69d2      	ldr	r2, [r2, #28]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cbe:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	e020      	b.n	8002d10 <ETH_Prepare_Tx_Descriptors+0x484>
 8002cce:	bf00      	nop
 8002cd0:	ffff8000 	.word	0xffff8000
 8002cd4:	ffffc000 	.word	0xffffc000
 8002cd8:	c000ffff 	.word	0xc000ffff
 8002cdc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <ETH_Prepare_Tx_Descriptors+0x534>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	6852      	ldr	r2, [r2, #4]
 8002cec:	431a      	orrs	r2, r3
 8002cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d008      	beq.n	8002d10 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d0e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	3301      	adds	r3, #1
 8002d14:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002d16:	f3bf 8f5f 	dmb	sy
}
 8002d1a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d26:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f47f af2b 	bne.w	8002b94 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d006      	beq.n	8002d52 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e005      	b.n	8002d5e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d68:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d72:	3304      	adds	r3, #4
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d7e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	613b      	str	r3, [r7, #16]
  return(result);
 8002d86:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f383 8810 	msr	PRIMASK, r3
}
 8002d94:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	4413      	add	r3, r2
 8002d9e:	1c5a      	adds	r2, r3, #1
 8002da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f383 8810 	msr	PRIMASK, r3
}
 8002dae:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3744      	adds	r7, #68	@ 0x44
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	ffff8000 	.word	0xffff8000

08002dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b089      	sub	sp, #36	@ 0x24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002dd2:	4b86      	ldr	r3, [pc, #536]	@ (8002fec <HAL_GPIO_Init+0x228>)
 8002dd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002dd6:	e18c      	b.n	80030f2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2101      	movs	r1, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 817e 	beq.w	80030ec <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d005      	beq.n	8002e08 <HAL_GPIO_Init+0x44>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d130      	bne.n	8002e6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e3e:	2201      	movs	r2, #1
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	f003 0201 	and.w	r2, r3, #1
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d017      	beq.n	8002ea6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	2203      	movs	r2, #3
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d123      	bne.n	8002efa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	08da      	lsrs	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3208      	adds	r2, #8
 8002eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	08da      	lsrs	r2, r3, #3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3208      	adds	r2, #8
 8002ef4:	69b9      	ldr	r1, [r7, #24]
 8002ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	2203      	movs	r2, #3
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f003 0203 	and.w	r2, r3, #3
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80d8 	beq.w	80030ec <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <HAL_GPIO_Init+0x22c>)
 8002f3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f42:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff0 <HAL_GPIO_Init+0x22c>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002f4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ff0 <HAL_GPIO_Init+0x22c>)
 8002f4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5a:	4a26      	ldr	r2, [pc, #152]	@ (8002ff4 <HAL_GPIO_Init+0x230>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff8 <HAL_GPIO_Init+0x234>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d04a      	beq.n	800301c <HAL_GPIO_Init+0x258>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	@ (8002ffc <HAL_GPIO_Init+0x238>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d02b      	beq.n	8002fe6 <HAL_GPIO_Init+0x222>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1b      	ldr	r2, [pc, #108]	@ (8003000 <HAL_GPIO_Init+0x23c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d025      	beq.n	8002fe2 <HAL_GPIO_Init+0x21e>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	@ (8003004 <HAL_GPIO_Init+0x240>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d01f      	beq.n	8002fde <HAL_GPIO_Init+0x21a>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a19      	ldr	r2, [pc, #100]	@ (8003008 <HAL_GPIO_Init+0x244>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d019      	beq.n	8002fda <HAL_GPIO_Init+0x216>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a18      	ldr	r2, [pc, #96]	@ (800300c <HAL_GPIO_Init+0x248>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d013      	beq.n	8002fd6 <HAL_GPIO_Init+0x212>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a17      	ldr	r2, [pc, #92]	@ (8003010 <HAL_GPIO_Init+0x24c>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_GPIO_Init+0x20e>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <HAL_GPIO_Init+0x250>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d007      	beq.n	8002fce <HAL_GPIO_Init+0x20a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a15      	ldr	r2, [pc, #84]	@ (8003018 <HAL_GPIO_Init+0x254>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_GPIO_Init+0x206>
 8002fc6:	2309      	movs	r3, #9
 8002fc8:	e029      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fca:	230a      	movs	r3, #10
 8002fcc:	e027      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fce:	2307      	movs	r3, #7
 8002fd0:	e025      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fd2:	2306      	movs	r3, #6
 8002fd4:	e023      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	e021      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fda:	2304      	movs	r3, #4
 8002fdc:	e01f      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e01d      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e01b      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e019      	b.n	800301e <HAL_GPIO_Init+0x25a>
 8002fea:	bf00      	nop
 8002fec:	58000080 	.word	0x58000080
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	58000400 	.word	0x58000400
 8002ff8:	58020000 	.word	0x58020000
 8002ffc:	58020400 	.word	0x58020400
 8003000:	58020800 	.word	0x58020800
 8003004:	58020c00 	.word	0x58020c00
 8003008:	58021000 	.word	0x58021000
 800300c:	58021400 	.word	0x58021400
 8003010:	58021800 	.word	0x58021800
 8003014:	58021c00 	.word	0x58021c00
 8003018:	58022400 	.word	0x58022400
 800301c:	2300      	movs	r3, #0
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	f002 0203 	and.w	r2, r2, #3
 8003024:	0092      	lsls	r2, r2, #2
 8003026:	4093      	lsls	r3, r2
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800302e:	4938      	ldr	r1, [pc, #224]	@ (8003110 <HAL_GPIO_Init+0x34c>)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	089b      	lsrs	r3, r3, #2
 8003034:	3302      	adds	r3, #2
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003062:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003090:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	3301      	adds	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f ae6b 	bne.w	8002dd8 <HAL_GPIO_Init+0x14>
  }
}
 8003102:	bf00      	nop
 8003104:	bf00      	nop
 8003106:	3724      	adds	r7, #36	@ 0x24
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	58000400 	.word	0x58000400

08003114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]
 8003120:	4613      	mov	r3, r2
 8003122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003124:	787b      	ldrb	r3, [r7, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800312a:	887a      	ldrh	r2, [r7, #2]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003130:	e003      	b.n	800313a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	041a      	lsls	r2, r3, #16
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	619a      	str	r2, [r3, #24]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003150:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b04      	cmp	r3, #4
 800315a:	d00a      	beq.n	8003172 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800315c:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <HAL_PWREx_ConfigSupply+0x70>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	d001      	beq.n	800316e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e01f      	b.n	80031ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e01d      	b.n	80031ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003172:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	490f      	ldr	r1, [pc, #60]	@ (80031b8 <HAL_PWREx_ConfigSupply+0x70>)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4313      	orrs	r3, r2
 8003180:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003182:	f7fe f8bd 	bl	8001300 <HAL_GetTick>
 8003186:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003188:	e009      	b.n	800319e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800318a:	f7fe f8b9 	bl	8001300 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003198:	d901      	bls.n	800319e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e007      	b.n	80031ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_PWREx_ConfigSupply+0x70>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031aa:	d1ee      	bne.n	800318a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	58024800 	.word	0x58024800

080031bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e3c8      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8087 	beq.w	80032ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031dc:	4b88      	ldr	r3, [pc, #544]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031e6:	4b86      	ldr	r3, [pc, #536]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d007      	beq.n	8003202 <HAL_RCC_OscConfig+0x46>
 80031f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f4:	2b18      	cmp	r3, #24
 80031f6:	d110      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
 80031f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b7f      	ldr	r3, [pc, #508]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x12c>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d168      	bne.n	80032e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e3a2      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x76>
 8003224:	4b76      	ldr	r3, [pc, #472]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a75      	ldr	r2, [pc, #468]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e02e      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b71      	ldr	r3, [pc, #452]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a70      	ldr	r2, [pc, #448]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6e      	ldr	r3, [pc, #440]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6d      	ldr	r2, [pc, #436]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800324c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xbc>
 800325e:	4b68      	ldr	r3, [pc, #416]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a67      	ldr	r2, [pc, #412]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b65      	ldr	r3, [pc, #404]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a64      	ldr	r2, [pc, #400]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xd4>
 8003278:	4b61      	ldr	r3, [pc, #388]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a60      	ldr	r2, [pc, #384]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b5e      	ldr	r3, [pc, #376]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a5d      	ldr	r2, [pc, #372]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe f832 	bl	8001300 <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe f82e 	bl	8001300 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e356      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80032b2:	4b53      	ldr	r3, [pc, #332]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe4>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe f81e 	bl	8001300 <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe f81a 	bl	8001300 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e342      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032da:	4b49      	ldr	r3, [pc, #292]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x10c>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 808c 	beq.w	8003410 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f8:	4b41      	ldr	r3, [pc, #260]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003300:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003302:	4b3f      	ldr	r3, [pc, #252]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003306:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d007      	beq.n	800331e <HAL_RCC_OscConfig+0x162>
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	2b18      	cmp	r3, #24
 8003312:	d137      	bne.n	8003384 <HAL_RCC_OscConfig+0x1c8>
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d132      	bne.n	8003384 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800331e:	4b38      	ldr	r3, [pc, #224]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_RCC_OscConfig+0x17a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e314      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003336:	4b32      	ldr	r3, [pc, #200]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f023 0219 	bic.w	r2, r3, #25
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	492f      	ldr	r1, [pc, #188]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003348:	f7fd ffda 	bl	8001300 <HAL_GetTick>
 800334c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003350:	f7fd ffd6 	bl	8001300 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e2fe      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003362:	4b27      	ldr	r3, [pc, #156]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336e:	4b24      	ldr	r3, [pc, #144]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	061b      	lsls	r3, r3, #24
 800337c:	4920      	ldr	r1, [pc, #128]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800337e:	4313      	orrs	r3, r2
 8003380:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003382:	e045      	b.n	8003410 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d026      	beq.n	80033da <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800338c:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 0219 	bic.w	r2, r3, #25
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	4919      	ldr	r1, [pc, #100]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 800339a:	4313      	orrs	r3, r2
 800339c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fd ffaf 	bl	8001300 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a6:	f7fd ffab 	bl	8001300 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e2d3      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033b8:	4b11      	ldr	r3, [pc, #68]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	490b      	ldr	r1, [pc, #44]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	604b      	str	r3, [r1, #4]
 80033d8:	e01a      	b.n	8003410 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <HAL_RCC_OscConfig+0x244>)
 80033e0:	f023 0301 	bic.w	r3, r3, #1
 80033e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fd ff8b 	bl	8001300 <HAL_GetTick>
 80033ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ee:	f7fd ff87 	bl	8001300 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d903      	bls.n	8003404 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e2af      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
 8003400:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003404:	4b96      	ldr	r3, [pc, #600]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	2b00      	cmp	r3, #0
 800341a:	d06a      	beq.n	80034f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800341c:	4b90      	ldr	r3, [pc, #576]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003424:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003426:	4b8e      	ldr	r3, [pc, #568]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800342a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	2b08      	cmp	r3, #8
 8003430:	d007      	beq.n	8003442 <HAL_RCC_OscConfig+0x286>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b18      	cmp	r3, #24
 8003436:	d11b      	bne.n	8003470 <HAL_RCC_OscConfig+0x2b4>
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003442:	4b87      	ldr	r3, [pc, #540]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x29e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b80      	cmp	r3, #128	@ 0x80
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e282      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800345a:	4b81      	ldr	r3, [pc, #516]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	061b      	lsls	r3, r3, #24
 8003468:	497d      	ldr	r1, [pc, #500]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800346a:	4313      	orrs	r3, r2
 800346c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800346e:	e040      	b.n	80034f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d023      	beq.n	80034c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003478:	4b79      	ldr	r3, [pc, #484]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a78      	ldr	r2, [pc, #480]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800347e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd ff3c 	bl	8001300 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800348c:	f7fd ff38 	bl	8001300 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e260      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800349e:	4b70      	ldr	r3, [pc, #448]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	061b      	lsls	r3, r3, #24
 80034b8:	4969      	ldr	r1, [pc, #420]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60cb      	str	r3, [r1, #12]
 80034be:	e018      	b.n	80034f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80034c0:	4b67      	ldr	r3, [pc, #412]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a66      	ldr	r2, [pc, #408]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80034c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fd ff18 	bl	8001300 <HAL_GetTick>
 80034d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80034d4:	f7fd ff14 	bl	8001300 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e23c      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80034e6:	4b5e      	ldr	r3, [pc, #376]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d036      	beq.n	800356c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d019      	beq.n	800353a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003506:	4b56      	ldr	r3, [pc, #344]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800350a:	4a55      	ldr	r2, [pc, #340]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003512:	f7fd fef5 	bl	8001300 <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351a:	f7fd fef1 	bl	8001300 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e219      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800352c:	4b4c      	ldr	r3, [pc, #304]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800352e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x35e>
 8003538:	e018      	b.n	800356c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353a:	4b49      	ldr	r3, [pc, #292]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353e:	4a48      	ldr	r2, [pc, #288]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003546:	f7fd fedb 	bl	8001300 <HAL_GetTick>
 800354a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354e:	f7fd fed7 	bl	8001300 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1ff      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003560:	4b3f      	ldr	r3, [pc, #252]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d036      	beq.n	80035e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d019      	beq.n	80035b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003580:	4b37      	ldr	r3, [pc, #220]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a36      	ldr	r2, [pc, #216]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003586:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800358a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800358c:	f7fd feb8 	bl	8001300 <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003594:	f7fd feb4 	bl	8001300 <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1dc      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x3d8>
 80035b2:	e018      	b.n	80035e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a29      	ldr	r2, [pc, #164]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80035ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80035c0:	f7fd fe9e 	bl	8001300 <HAL_GetTick>
 80035c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c8:	f7fd fe9a 	bl	8001300 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e1c2      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035da:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8086 	beq.w	8003700 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80035f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003664 <HAL_RCC_OscConfig+0x4a8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003664 <HAL_RCC_OscConfig+0x4a8>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003600:	f7fd fe7e 	bl	8001300 <HAL_GetTick>
 8003604:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fd fe7a 	bl	8001300 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	@ 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e1a2      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800361a:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <HAL_RCC_OscConfig+0x4a8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d106      	bne.n	800363c <HAL_RCC_OscConfig+0x480>
 800362e:	4b0c      	ldr	r3, [pc, #48]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003632:	4a0b      	ldr	r2, [pc, #44]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	@ 0x70
 800363a:	e032      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e6>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d111      	bne.n	8003668 <HAL_RCC_OscConfig+0x4ac>
 8003644:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	4a05      	ldr	r2, [pc, #20]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003650:	4b03      	ldr	r3, [pc, #12]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a02      	ldr	r2, [pc, #8]	@ (8003660 <HAL_RCC_OscConfig+0x4a4>)
 8003656:	f023 0304 	bic.w	r3, r3, #4
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	e021      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e6>
 800365e:	bf00      	nop
 8003660:	58024400 	.word	0x58024400
 8003664:	58024800 	.word	0x58024800
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b05      	cmp	r3, #5
 800366e:	d10c      	bne.n	800368a <HAL_RCC_OscConfig+0x4ce>
 8003670:	4b83      	ldr	r3, [pc, #524]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	4a82      	ldr	r2, [pc, #520]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	6713      	str	r3, [r2, #112]	@ 0x70
 800367c:	4b80      	ldr	r3, [pc, #512]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800367e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003680:	4a7f      	ldr	r2, [pc, #508]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003682:	f043 0301 	orr.w	r3, r3, #1
 8003686:	6713      	str	r3, [r2, #112]	@ 0x70
 8003688:	e00b      	b.n	80036a2 <HAL_RCC_OscConfig+0x4e6>
 800368a:	4b7d      	ldr	r3, [pc, #500]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368e:	4a7c      	ldr	r2, [pc, #496]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	@ 0x70
 8003696:	4b7a      	ldr	r3, [pc, #488]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	4a79      	ldr	r2, [pc, #484]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800369c:	f023 0304 	bic.w	r3, r3, #4
 80036a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036aa:	f7fd fe29 	bl	8001300 <HAL_GetTick>
 80036ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036b0:	e00a      	b.n	80036c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b2:	f7fd fe25 	bl	8001300 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e14b      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0ee      	beq.n	80036b2 <HAL_RCC_OscConfig+0x4f6>
 80036d4:	e014      	b.n	8003700 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd fe13 	bl	8001300 <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036dc:	e00a      	b.n	80036f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036de:	f7fd fe0f 	bl	8001300 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e135      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036f4:	4b62      	ldr	r3, [pc, #392]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80036f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1ee      	bne.n	80036de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 812a 	beq.w	800395e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800370a:	4b5d      	ldr	r3, [pc, #372]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003712:	2b18      	cmp	r3, #24
 8003714:	f000 80ba 	beq.w	800388c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371c:	2b02      	cmp	r3, #2
 800371e:	f040 8095 	bne.w	800384c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003722:	4b57      	ldr	r3, [pc, #348]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a56      	ldr	r2, [pc, #344]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003728:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372e:	f7fd fde7 	bl	8001300 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003736:	f7fd fde3 	bl	8001300 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e10b      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003748:	4b4d      	ldr	r3, [pc, #308]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1f0      	bne.n	8003736 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003754:	4b4a      	ldr	r3, [pc, #296]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003756:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003758:	4b4a      	ldr	r3, [pc, #296]	@ (8003884 <HAL_RCC_OscConfig+0x6c8>)
 800375a:	4013      	ands	r3, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	430a      	orrs	r2, r1
 8003768:	4945      	ldr	r1, [pc, #276]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	628b      	str	r3, [r1, #40]	@ 0x28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	3b01      	subs	r3, #1
 8003774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377c:	3b01      	subs	r3, #1
 800377e:	025b      	lsls	r3, r3, #9
 8003780:	b29b      	uxth	r3, r3
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	3b01      	subs	r3, #1
 800378a:	041b      	lsls	r3, r3, #16
 800378c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003796:	3b01      	subs	r3, #1
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800379e:	4938      	ldr	r1, [pc, #224]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80037a4:	4b36      	ldr	r3, [pc, #216]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	4a35      	ldr	r2, [pc, #212]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80037b0:	4b33      	ldr	r3, [pc, #204]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037b4:	4b34      	ldr	r3, [pc, #208]	@ (8003888 <HAL_RCC_OscConfig+0x6cc>)
 80037b6:	4013      	ands	r3, r2
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037bc:	00d2      	lsls	r2, r2, #3
 80037be:	4930      	ldr	r1, [pc, #192]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80037c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	f023 020c 	bic.w	r2, r3, #12
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	492b      	ldr	r1, [pc, #172]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80037d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	f023 0202 	bic.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e2:	4927      	ldr	r1, [pc, #156]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037e8:	4b25      	ldr	r3, [pc, #148]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	4a24      	ldr	r2, [pc, #144]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037f4:	4b22      	ldr	r3, [pc, #136]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	4a21      	ldr	r2, [pc, #132]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 80037fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003800:	4b1f      	ldr	r3, [pc, #124]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	4a1e      	ldr	r2, [pc, #120]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800380a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800380c:	4b1c      	ldr	r3, [pc, #112]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	4a1b      	ldr	r2, [pc, #108]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003818:	4b19      	ldr	r3, [pc, #100]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a18      	ldr	r2, [pc, #96]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800381e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd fd6c 	bl	8001300 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800382c:	f7fd fd68 	bl	8001300 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e090      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800383e:	4b10      	ldr	r3, [pc, #64]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x670>
 800384a:	e088      	b.n	800395e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384c:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0b      	ldr	r2, [pc, #44]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003852:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fd fd52 	bl	8001300 <HAL_GetTick>
 800385c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd fd4e 	bl	8001300 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e076      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003872:	4b03      	ldr	r3, [pc, #12]	@ (8003880 <HAL_RCC_OscConfig+0x6c4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f0      	bne.n	8003860 <HAL_RCC_OscConfig+0x6a4>
 800387e:	e06e      	b.n	800395e <HAL_RCC_OscConfig+0x7a2>
 8003880:	58024400 	.word	0x58024400
 8003884:	fffffc0c 	.word	0xfffffc0c
 8003888:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800388c:	4b36      	ldr	r3, [pc, #216]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 800388e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003890:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003892:	4b35      	ldr	r3, [pc, #212]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	2b01      	cmp	r3, #1
 800389e:	d031      	beq.n	8003904 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f003 0203 	and.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d12a      	bne.n	8003904 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d122      	bne.n	8003904 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d11a      	bne.n	8003904 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	0a5b      	lsrs	r3, r3, #9
 80038d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d111      	bne.n	8003904 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d108      	bne.n	8003904 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	0e1b      	lsrs	r3, r3, #24
 80038f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e02b      	b.n	8003960 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003908:	4b17      	ldr	r3, [pc, #92]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 800390a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003912:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	429a      	cmp	r2, r3
 800391c:	d01f      	beq.n	800395e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800391e:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 8003920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003922:	4a11      	ldr	r2, [pc, #68]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800392a:	f7fd fce9 	bl	8001300 <HAL_GetTick>
 800392e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003930:	bf00      	nop
 8003932:	f7fd fce5 	bl	8001300 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	4293      	cmp	r3, r2
 800393c:	d0f9      	beq.n	8003932 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800393e:	4b0a      	ldr	r3, [pc, #40]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 8003940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <HAL_RCC_OscConfig+0x7b0>)
 8003944:	4013      	ands	r3, r2
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800394a:	00d2      	lsls	r2, r2, #3
 800394c:	4906      	ldr	r1, [pc, #24]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 800394e:	4313      	orrs	r3, r2
 8003950:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003952:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 8003954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003956:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <HAL_RCC_OscConfig+0x7ac>)
 8003958:	f043 0301 	orr.w	r3, r3, #1
 800395c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3730      	adds	r7, #48	@ 0x30
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	58024400 	.word	0x58024400
 800396c:	ffff0007 	.word	0xffff0007

08003970 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e19c      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b8a      	ldr	r3, [pc, #552]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 030f 	and.w	r3, r3, #15
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d910      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b87      	ldr	r3, [pc, #540]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f023 020f 	bic.w	r2, r3, #15
 800399a:	4985      	ldr	r1, [pc, #532]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b83      	ldr	r3, [pc, #524]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e184      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d010      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d908      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80039d0:	4b78      	ldr	r3, [pc, #480]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	4975      	ldr	r1, [pc, #468]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d010      	beq.n	8003a10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695a      	ldr	r2, [r3, #20]
 80039f2:	4b70      	ldr	r3, [pc, #448]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d908      	bls.n	8003a10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80039fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	496a      	ldr	r1, [pc, #424]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d010      	beq.n	8003a3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699a      	ldr	r2, [r3, #24]
 8003a20:	4b64      	ldr	r3, [pc, #400]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d908      	bls.n	8003a3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a2c:	4b61      	ldr	r3, [pc, #388]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	495e      	ldr	r1, [pc, #376]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0320 	and.w	r3, r3, #32
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d010      	beq.n	8003a6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69da      	ldr	r2, [r3, #28]
 8003a4e:	4b59      	ldr	r3, [pc, #356]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d908      	bls.n	8003a6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003a5a:	4b56      	ldr	r3, [pc, #344]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4953      	ldr	r1, [pc, #332]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d010      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d908      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a88:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f023 020f 	bic.w	r2, r3, #15
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	4947      	ldr	r1, [pc, #284]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d055      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003aa6:	4b43      	ldr	r3, [pc, #268]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	4940      	ldr	r1, [pc, #256]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d121      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0f6      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d107      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ad8:	4b36      	ldr	r3, [pc, #216]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d115      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0ea      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003af0:	4b30      	ldr	r3, [pc, #192]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d109      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0de      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b00:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0d6      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b10:	4b28      	ldr	r3, [pc, #160]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f023 0207 	bic.w	r2, r3, #7
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4925      	ldr	r1, [pc, #148]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b22:	f7fd fbed 	bl	8001300 <HAL_GetTick>
 8003b26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b28:	e00a      	b.n	8003b40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2a:	f7fd fbe9 	bl	8001300 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e0be      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b40:	4b1c      	ldr	r3, [pc, #112]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d1eb      	bne.n	8003b2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	4b14      	ldr	r3, [pc, #80]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d208      	bcs.n	8003b80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6e:	4b11      	ldr	r3, [pc, #68]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	f023 020f 	bic.w	r2, r3, #15
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	490e      	ldr	r1, [pc, #56]	@ (8003bb4 <HAL_RCC_ClockConfig+0x244>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d214      	bcs.n	8003bb8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f023 020f 	bic.w	r2, r3, #15
 8003b96:	4906      	ldr	r1, [pc, #24]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <HAL_RCC_ClockConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d005      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e086      	b.n	8003cbe <HAL_RCC_ClockConfig+0x34e>
 8003bb0:	52002000 	.word	0x52002000
 8003bb4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d208      	bcs.n	8003be6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	4939      	ldr	r1, [pc, #228]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d208      	bcs.n	8003c14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003c02:	4b31      	ldr	r3, [pc, #196]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	492e      	ldr	r1, [pc, #184]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d010      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699a      	ldr	r2, [r3, #24]
 8003c24:	4b28      	ldr	r3, [pc, #160]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d208      	bcs.n	8003c42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003c30:	4b25      	ldr	r3, [pc, #148]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	4922      	ldr	r1, [pc, #136]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d010      	beq.n	8003c70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69da      	ldr	r2, [r3, #28]
 8003c52:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d208      	bcs.n	8003c70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	4917      	ldr	r1, [pc, #92]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c70:	f000 f834 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b14      	ldr	r3, [pc, #80]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	4912      	ldr	r1, [pc, #72]	@ (8003ccc <HAL_RCC_ClockConfig+0x35c>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <HAL_RCC_ClockConfig+0x358>)
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <HAL_RCC_ClockConfig+0x35c>)
 8003c98:	5cd3      	ldrb	r3, [r2, r3]
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd0 <HAL_RCC_ClockConfig+0x360>)
 8003ca6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd4 <HAL_RCC_ClockConfig+0x364>)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003cae:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd8 <HAL_RCC_ClockConfig+0x368>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fd fada 	bl	800126c <HAL_InitTick>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	08013a8c 	.word	0x08013a8c
 8003cd0:	24000004 	.word	0x24000004
 8003cd4:	24000000 	.word	0x24000000
 8003cd8:	2400000c 	.word	0x2400000c

08003cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	@ 0x24
 8003ce0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce2:	4bb3      	ldr	r3, [pc, #716]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cea:	2b18      	cmp	r3, #24
 8003cec:	f200 8155 	bhi.w	8003f9a <HAL_RCC_GetSysClockFreq+0x2be>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003f9b 	.word	0x08003f9b
 8003d00:	08003f9b 	.word	0x08003f9b
 8003d04:	08003f9b 	.word	0x08003f9b
 8003d08:	08003f9b 	.word	0x08003f9b
 8003d0c:	08003f9b 	.word	0x08003f9b
 8003d10:	08003f9b 	.word	0x08003f9b
 8003d14:	08003f9b 	.word	0x08003f9b
 8003d18:	08003d83 	.word	0x08003d83
 8003d1c:	08003f9b 	.word	0x08003f9b
 8003d20:	08003f9b 	.word	0x08003f9b
 8003d24:	08003f9b 	.word	0x08003f9b
 8003d28:	08003f9b 	.word	0x08003f9b
 8003d2c:	08003f9b 	.word	0x08003f9b
 8003d30:	08003f9b 	.word	0x08003f9b
 8003d34:	08003f9b 	.word	0x08003f9b
 8003d38:	08003d89 	.word	0x08003d89
 8003d3c:	08003f9b 	.word	0x08003f9b
 8003d40:	08003f9b 	.word	0x08003f9b
 8003d44:	08003f9b 	.word	0x08003f9b
 8003d48:	08003f9b 	.word	0x08003f9b
 8003d4c:	08003f9b 	.word	0x08003f9b
 8003d50:	08003f9b 	.word	0x08003f9b
 8003d54:	08003f9b 	.word	0x08003f9b
 8003d58:	08003d8f 	.word	0x08003d8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d5c:	4b94      	ldr	r3, [pc, #592]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d009      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d68:	4b91      	ldr	r3, [pc, #580]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	08db      	lsrs	r3, r3, #3
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	4a90      	ldr	r2, [pc, #576]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d74:	fa22 f303 	lsr.w	r3, r2, r3
 8003d78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003d7a:	e111      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003d7c:	4b8d      	ldr	r3, [pc, #564]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003d7e:	61bb      	str	r3, [r7, #24]
      break;
 8003d80:	e10e      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003d82:	4b8d      	ldr	r3, [pc, #564]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d84:	61bb      	str	r3, [r7, #24]
      break;
 8003d86:	e10b      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003d88:	4b8c      	ldr	r3, [pc, #560]	@ (8003fbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003d8a:	61bb      	str	r3, [r7, #24]
      break;
 8003d8c:	e108      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d8e:	4b88      	ldr	r3, [pc, #544]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d92:	f003 0303 	and.w	r3, r3, #3
 8003d96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003d98:	4b85      	ldr	r3, [pc, #532]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003da2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003da4:	4b82      	ldr	r3, [pc, #520]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003dae:	4b80      	ldr	r3, [pc, #512]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db2:	08db      	lsrs	r3, r3, #3
 8003db4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80e1 	beq.w	8003f94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	f000 8083 	beq.w	8003ee0 <HAL_RCC_GetSysClockFreq+0x204>
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	f200 80a1 	bhi.w	8003f24 <HAL_RCC_GetSysClockFreq+0x248>
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_RCC_GetSysClockFreq+0x114>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d056      	beq.n	8003e9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8003dee:	e099      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003df0:	4b6f      	ldr	r3, [pc, #444]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d02d      	beq.n	8003e58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003dfc:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	4a6b      	ldr	r2, [pc, #428]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e26:	4b62      	ldr	r3, [pc, #392]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e3a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003e56:	e087      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003fc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6a:	4b51      	ldr	r3, [pc, #324]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e7e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e9a:	e065      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b40      	ldr	r3, [pc, #256]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ec2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ede:	e043      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003fcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f06:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f22:	e021      	b.n	8003f68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003fc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f36:	4b1e      	ldr	r3, [pc, #120]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f4a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003fc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003f68:	4b11      	ldr	r3, [pc, #68]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	0a5b      	lsrs	r3, r3, #9
 8003f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f72:	3301      	adds	r3, #1
 8003f74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f8c:	ee17 3a90 	vmov	r3, s15
 8003f90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003f92:	e005      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	61bb      	str	r3, [r7, #24]
      break;
 8003f98:	e002      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003f9a:	4b07      	ldr	r3, [pc, #28]	@ (8003fb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003f9c:	61bb      	str	r3, [r7, #24]
      break;
 8003f9e:	bf00      	nop
  }

  return sysclockfreq;
 8003fa0:	69bb      	ldr	r3, [r7, #24]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3724      	adds	r7, #36	@ 0x24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	58024400 	.word	0x58024400
 8003fb4:	03d09000 	.word	0x03d09000
 8003fb8:	003d0900 	.word	0x003d0900
 8003fbc:	017d7840 	.word	0x017d7840
 8003fc0:	46000000 	.word	0x46000000
 8003fc4:	4c742400 	.word	0x4c742400
 8003fc8:	4a742400 	.word	0x4a742400
 8003fcc:	4bbebc20 	.word	0x4bbebc20

08003fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003fd6:	f7ff fe81 	bl	8003cdc <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b10      	ldr	r3, [pc, #64]	@ (8004020 <HAL_RCC_GetHCLKFreq+0x50>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490f      	ldr	r1, [pc, #60]	@ (8004024 <HAL_RCC_GetHCLKFreq+0x54>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ff4:	4b0a      	ldr	r3, [pc, #40]	@ (8004020 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	4a09      	ldr	r2, [pc, #36]	@ (8004024 <HAL_RCC_GetHCLKFreq+0x54>)
 8003ffe:	5cd3      	ldrb	r3, [r2, r3]
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	fa22 f303 	lsr.w	r3, r2, r3
 800400a:	4a07      	ldr	r2, [pc, #28]	@ (8004028 <HAL_RCC_GetHCLKFreq+0x58>)
 800400c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800400e:	4a07      	ldr	r2, [pc, #28]	@ (800402c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004014:	4b04      	ldr	r3, [pc, #16]	@ (8004028 <HAL_RCC_GetHCLKFreq+0x58>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	58024400 	.word	0x58024400
 8004024:	08013a8c 	.word	0x08013a8c
 8004028:	24000004 	.word	0x24000004
 800402c:	24000000 	.word	0x24000000

08004030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004034:	f7ff ffcc 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8004038:	4602      	mov	r2, r0
 800403a:	4b06      	ldr	r3, [pc, #24]	@ (8004054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4904      	ldr	r1, [pc, #16]	@ (8004058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004046:	5ccb      	ldrb	r3, [r1, r3]
 8004048:	f003 031f 	and.w	r3, r3, #31
 800404c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004050:	4618      	mov	r0, r3
 8004052:	bd80      	pop	{r7, pc}
 8004054:	58024400 	.word	0x58024400
 8004058:	08013a8c 	.word	0x08013a8c

0800405c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004060:	f7ff ffb6 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	0a1b      	lsrs	r3, r3, #8
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4904      	ldr	r1, [pc, #16]	@ (8004084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	58024400 	.word	0x58024400
 8004084:	08013a8c 	.word	0x08013a8c

08004088 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800408c:	f7ff ffa0 	bl	8003fd0 <HAL_RCC_GetHCLKFreq>
 8004090:	4602      	mov	r2, r0
 8004092:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	091b      	lsrs	r3, r3, #4
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	4904      	ldr	r1, [pc, #16]	@ (80040b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800409e:	5ccb      	ldrb	r3, [r1, r3]
 80040a0:	f003 031f 	and.w	r3, r3, #31
 80040a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	bd80      	pop	{r7, pc}
 80040ac:	58024400 	.word	0x58024400
 80040b0:	08013a8c 	.word	0x08013a8c

080040b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	@ 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80040c6:	4b9f      	ldr	r3, [pc, #636]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ca:	0b1b      	lsrs	r3, r3, #12
 80040cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80040de:	4b99      	ldr	r3, [pc, #612]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e2:	08db      	lsrs	r3, r3, #3
 80040e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8111 	beq.w	8004324 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b02      	cmp	r3, #2
 8004106:	f000 8083 	beq.w	8004210 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b02      	cmp	r3, #2
 800410e:	f200 80a1 	bhi.w	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d003      	beq.n	8004120 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d056      	beq.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800411e:	e099      	b.n	8004254 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004120:	4b88      	ldr	r3, [pc, #544]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d02d      	beq.n	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800412c:	4b85      	ldr	r3, [pc, #532]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	08db      	lsrs	r3, r3, #3
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	4a84      	ldr	r2, [pc, #528]	@ (8004348 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
 800413c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004156:	4b7b      	ldr	r3, [pc, #492]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004166:	ed97 6a03 	vldr	s12, [r7, #12]
 800416a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800434c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004186:	e087      	b.n	8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419a:	4b6a      	ldr	r3, [pc, #424]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800434c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ca:	e065      	b.n	8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041de:	4b59      	ldr	r3, [pc, #356]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e6:	ee07 3a90 	vmov	s15, r3
 80041ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800434c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800420e:	e043      	b.n	8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	ee07 3a90 	vmov	s15, r3
 8004216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800421e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004222:	4b48      	ldr	r3, [pc, #288]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422a:	ee07 3a90 	vmov	s15, r3
 800422e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004232:	ed97 6a03 	vldr	s12, [r7, #12]
 8004236:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800434c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800423a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800423e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004242:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800424e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004252:	e021      	b.n	8004298 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800425e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004266:	4b37      	ldr	r3, [pc, #220]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800426a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426e:	ee07 3a90 	vmov	s15, r3
 8004272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004276:	ed97 6a03 	vldr	s12, [r7, #12]
 800427a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800434c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800427e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004286:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800428a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800428e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004296:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004298:	4b2a      	ldr	r3, [pc, #168]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	0a5b      	lsrs	r3, r3, #9
 800429e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a2:	ee07 3a90 	vmov	s15, r3
 80042a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042be:	ee17 2a90 	vmov	r2, s15
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80042c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d0:	ee07 3a90 	vmov	s15, r3
 80042d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ec:	ee17 2a90 	vmov	r2, s15
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80042f4:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f8:	0e1b      	lsrs	r3, r3, #24
 80042fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042fe:	ee07 3a90 	vmov	s15, r3
 8004302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800430a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800430e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800431a:	ee17 2a90 	vmov	r2, s15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004322:	e008      	b.n	8004336 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	609a      	str	r2, [r3, #8]
}
 8004336:	bf00      	nop
 8004338:	3724      	adds	r7, #36	@ 0x24
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	58024400 	.word	0x58024400
 8004348:	03d09000 	.word	0x03d09000
 800434c:	46000000 	.word	0x46000000
 8004350:	4c742400 	.word	0x4c742400
 8004354:	4a742400 	.word	0x4a742400
 8004358:	4bbebc20 	.word	0x4bbebc20

0800435c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	@ 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004364:	4ba1      	ldr	r3, [pc, #644]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800436e:	4b9f      	ldr	r3, [pc, #636]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004372:	0d1b      	lsrs	r3, r3, #20
 8004374:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004378:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800437a:	4b9c      	ldr	r3, [pc, #624]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	0a1b      	lsrs	r3, r3, #8
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004386:	4b99      	ldr	r3, [pc, #612]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	08db      	lsrs	r3, r3, #3
 800438c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8111 	beq.w	80045cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	f000 8083 	beq.w	80044b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	f200 80a1 	bhi.w	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d056      	beq.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043c6:	e099      	b.n	80044fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043c8:	4b88      	ldr	r3, [pc, #544]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02d      	beq.n	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043d4:	4b85      	ldr	r3, [pc, #532]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	08db      	lsrs	r3, r3, #3
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	4a84      	ldr	r2, [pc, #528]	@ (80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
 80043e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	ee07 3a90 	vmov	s15, r3
 80043ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fe:	4b7b      	ldr	r3, [pc, #492]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004412:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800442e:	e087      	b.n	8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80045f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b6a      	ldr	r3, [pc, #424]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a03 	vldr	s12, [r7, #12]
 8004456:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004472:	e065      	b.n	8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004486:	4b59      	ldr	r3, [pc, #356]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004496:	ed97 6a03 	vldr	s12, [r7, #12]
 800449a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800449e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044b6:	e043      	b.n	8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	ee07 3a90 	vmov	s15, r3
 80044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004600 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ca:	4b48      	ldr	r3, [pc, #288]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d2:	ee07 3a90 	vmov	s15, r3
 80044d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044da:	ed97 6a03 	vldr	s12, [r7, #12]
 80044de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044fa:	e021      	b.n	8004540 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	ee07 3a90 	vmov	s15, r3
 8004502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004506:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80045fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800450a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800450e:	4b37      	ldr	r3, [pc, #220]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004516:	ee07 3a90 	vmov	s15, r3
 800451a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800451e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004522:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80045f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800452a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800452e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800453e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004540:	4b2a      	ldr	r3, [pc, #168]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004544:	0a5b      	lsrs	r3, r3, #9
 8004546:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004556:	ee37 7a87 	vadd.f32	s14, s15, s14
 800455a:	edd7 6a07 	vldr	s13, [r7, #28]
 800455e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004566:	ee17 2a90 	vmov	r2, s15
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800456e:	4b1f      	ldr	r3, [pc, #124]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004572:	0c1b      	lsrs	r3, r3, #16
 8004574:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004578:	ee07 3a90 	vmov	s15, r3
 800457c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004580:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004584:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004588:	edd7 6a07 	vldr	s13, [r7, #28]
 800458c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004594:	ee17 2a90 	vmov	r2, s15
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800459c:	4b13      	ldr	r3, [pc, #76]	@ (80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	0e1b      	lsrs	r3, r3, #24
 80045a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045c2:	ee17 2a90 	vmov	r2, s15
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045ca:	e008      	b.n	80045de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
}
 80045de:	bf00      	nop
 80045e0:	3724      	adds	r7, #36	@ 0x24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	58024400 	.word	0x58024400
 80045f0:	03d09000 	.word	0x03d09000
 80045f4:	46000000 	.word	0x46000000
 80045f8:	4c742400 	.word	0x4c742400
 80045fc:	4a742400 	.word	0x4a742400
 8004600:	4bbebc20 	.word	0x4bbebc20

08004604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e042      	b.n	800469c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f83b 	bl	80046a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2224      	movs	r2, #36	@ 0x24
 8004632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464a:	2b00      	cmp	r3, #0
 800464c:	d002      	beq.n	8004654 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 ff2c 	bl	80054ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f8bd 	bl	80047d4 <UART_SetConfig>
 800465a:	4603      	mov	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e01b      	b.n	800469c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004672:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689a      	ldr	r2, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004682:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 ffab 	bl	80055f0 <UART_CheckIdleState>
 800469a:	4603      	mov	r3, r0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08a      	sub	sp, #40	@ 0x28
 80046bc:	af02      	add	r7, sp, #8
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	603b      	str	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d17b      	bne.n	80047ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <HAL_UART_Transmit+0x26>
 80046d8:	88fb      	ldrh	r3, [r7, #6]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e074      	b.n	80047cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2221      	movs	r2, #33	@ 0x21
 80046ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046f2:	f7fc fe05 	bl	8001300 <HAL_GetTick>
 80046f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	88fa      	ldrh	r2, [r7, #6]
 8004704:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004710:	d108      	bne.n	8004724 <HAL_UART_Transmit+0x6c>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d104      	bne.n	8004724 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	61bb      	str	r3, [r7, #24]
 8004722:	e003      	b.n	800472c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800472c:	e030      	b.n	8004790 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	2200      	movs	r2, #0
 8004736:	2180      	movs	r1, #128	@ 0x80
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f001 f803 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e03d      	b.n	80047cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	461a      	mov	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	3302      	adds	r3, #2
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e007      	b.n	800477e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	781a      	ldrb	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	3301      	adds	r3, #1
 800477c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1c8      	bne.n	800472e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	2200      	movs	r2, #0
 80047a4:	2140      	movs	r1, #64	@ 0x40
 80047a6:	68f8      	ldr	r0, [r7, #12]
 80047a8:	f000 ffcc 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d005      	beq.n	80047be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e006      	b.n	80047cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b092      	sub	sp, #72	@ 0x48
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4bbe      	ldr	r3, [pc, #760]	@ (8004afc <UART_SetConfig+0x328>)
 8004804:	4013      	ands	r3, r2
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800480c:	430b      	orrs	r3, r1
 800480e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4ab3      	ldr	r2, [pc, #716]	@ (8004b00 <UART_SetConfig+0x32c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	6a1b      	ldr	r3, [r3, #32]
 800483a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800483c:	4313      	orrs	r3, r2
 800483e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	4baf      	ldr	r3, [pc, #700]	@ (8004b04 <UART_SetConfig+0x330>)
 8004848:	4013      	ands	r3, r2
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004850:	430b      	orrs	r3, r1
 8004852:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800485a:	f023 010f 	bic.w	r1, r3, #15
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4aa6      	ldr	r2, [pc, #664]	@ (8004b08 <UART_SetConfig+0x334>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d177      	bne.n	8004964 <UART_SetConfig+0x190>
 8004874:	4ba5      	ldr	r3, [pc, #660]	@ (8004b0c <UART_SetConfig+0x338>)
 8004876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004878:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800487c:	2b28      	cmp	r3, #40	@ 0x28
 800487e:	d86d      	bhi.n	800495c <UART_SetConfig+0x188>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <UART_SetConfig+0xb4>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	0800492d 	.word	0x0800492d
 800488c:	0800495d 	.word	0x0800495d
 8004890:	0800495d 	.word	0x0800495d
 8004894:	0800495d 	.word	0x0800495d
 8004898:	0800495d 	.word	0x0800495d
 800489c:	0800495d 	.word	0x0800495d
 80048a0:	0800495d 	.word	0x0800495d
 80048a4:	0800495d 	.word	0x0800495d
 80048a8:	08004935 	.word	0x08004935
 80048ac:	0800495d 	.word	0x0800495d
 80048b0:	0800495d 	.word	0x0800495d
 80048b4:	0800495d 	.word	0x0800495d
 80048b8:	0800495d 	.word	0x0800495d
 80048bc:	0800495d 	.word	0x0800495d
 80048c0:	0800495d 	.word	0x0800495d
 80048c4:	0800495d 	.word	0x0800495d
 80048c8:	0800493d 	.word	0x0800493d
 80048cc:	0800495d 	.word	0x0800495d
 80048d0:	0800495d 	.word	0x0800495d
 80048d4:	0800495d 	.word	0x0800495d
 80048d8:	0800495d 	.word	0x0800495d
 80048dc:	0800495d 	.word	0x0800495d
 80048e0:	0800495d 	.word	0x0800495d
 80048e4:	0800495d 	.word	0x0800495d
 80048e8:	08004945 	.word	0x08004945
 80048ec:	0800495d 	.word	0x0800495d
 80048f0:	0800495d 	.word	0x0800495d
 80048f4:	0800495d 	.word	0x0800495d
 80048f8:	0800495d 	.word	0x0800495d
 80048fc:	0800495d 	.word	0x0800495d
 8004900:	0800495d 	.word	0x0800495d
 8004904:	0800495d 	.word	0x0800495d
 8004908:	0800494d 	.word	0x0800494d
 800490c:	0800495d 	.word	0x0800495d
 8004910:	0800495d 	.word	0x0800495d
 8004914:	0800495d 	.word	0x0800495d
 8004918:	0800495d 	.word	0x0800495d
 800491c:	0800495d 	.word	0x0800495d
 8004920:	0800495d 	.word	0x0800495d
 8004924:	0800495d 	.word	0x0800495d
 8004928:	08004955 	.word	0x08004955
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004932:	e326      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004934:	2304      	movs	r3, #4
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493a:	e322      	b.n	8004f82 <UART_SetConfig+0x7ae>
 800493c:	2308      	movs	r3, #8
 800493e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004942:	e31e      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004944:	2310      	movs	r3, #16
 8004946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494a:	e31a      	b.n	8004f82 <UART_SetConfig+0x7ae>
 800494c:	2320      	movs	r3, #32
 800494e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004952:	e316      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004954:	2340      	movs	r3, #64	@ 0x40
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495a:	e312      	b.n	8004f82 <UART_SetConfig+0x7ae>
 800495c:	2380      	movs	r3, #128	@ 0x80
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004962:	e30e      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a69      	ldr	r2, [pc, #420]	@ (8004b10 <UART_SetConfig+0x33c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d130      	bne.n	80049d0 <UART_SetConfig+0x1fc>
 800496e:	4b67      	ldr	r3, [pc, #412]	@ (8004b0c <UART_SetConfig+0x338>)
 8004970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b05      	cmp	r3, #5
 8004978:	d826      	bhi.n	80049c8 <UART_SetConfig+0x1f4>
 800497a:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <UART_SetConfig+0x1ac>)
 800497c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004980:	08004999 	.word	0x08004999
 8004984:	080049a1 	.word	0x080049a1
 8004988:	080049a9 	.word	0x080049a9
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b9 	.word	0x080049b9
 8004994:	080049c1 	.word	0x080049c1
 8004998:	2300      	movs	r3, #0
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e2f0      	b.n	8004f82 <UART_SetConfig+0x7ae>
 80049a0:	2304      	movs	r3, #4
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a6:	e2ec      	b.n	8004f82 <UART_SetConfig+0x7ae>
 80049a8:	2308      	movs	r3, #8
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ae:	e2e8      	b.n	8004f82 <UART_SetConfig+0x7ae>
 80049b0:	2310      	movs	r3, #16
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b6:	e2e4      	b.n	8004f82 <UART_SetConfig+0x7ae>
 80049b8:	2320      	movs	r3, #32
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049be:	e2e0      	b.n	8004f82 <UART_SetConfig+0x7ae>
 80049c0:	2340      	movs	r3, #64	@ 0x40
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c6:	e2dc      	b.n	8004f82 <UART_SetConfig+0x7ae>
 80049c8:	2380      	movs	r3, #128	@ 0x80
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ce:	e2d8      	b.n	8004f82 <UART_SetConfig+0x7ae>
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004b14 <UART_SetConfig+0x340>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d130      	bne.n	8004a3c <UART_SetConfig+0x268>
 80049da:	4b4c      	ldr	r3, [pc, #304]	@ (8004b0c <UART_SetConfig+0x338>)
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d826      	bhi.n	8004a34 <UART_SetConfig+0x260>
 80049e6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <UART_SetConfig+0x218>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a05 	.word	0x08004a05
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	08004a15 	.word	0x08004a15
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a25 	.word	0x08004a25
 8004a00:	08004a2d 	.word	0x08004a2d
 8004a04:	2300      	movs	r3, #0
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e2ba      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a12:	e2b6      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a14:	2308      	movs	r3, #8
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1a:	e2b2      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a22:	e2ae      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a24:	2320      	movs	r3, #32
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2a:	e2aa      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a2c:	2340      	movs	r3, #64	@ 0x40
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a32:	e2a6      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a34:	2380      	movs	r3, #128	@ 0x80
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3a:	e2a2      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a35      	ldr	r2, [pc, #212]	@ (8004b18 <UART_SetConfig+0x344>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d130      	bne.n	8004aa8 <UART_SetConfig+0x2d4>
 8004a46:	4b31      	ldr	r3, [pc, #196]	@ (8004b0c <UART_SetConfig+0x338>)
 8004a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	2b05      	cmp	r3, #5
 8004a50:	d826      	bhi.n	8004aa0 <UART_SetConfig+0x2cc>
 8004a52:	a201      	add	r2, pc, #4	@ (adr r2, 8004a58 <UART_SetConfig+0x284>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a71 	.word	0x08004a71
 8004a5c:	08004a79 	.word	0x08004a79
 8004a60:	08004a81 	.word	0x08004a81
 8004a64:	08004a89 	.word	0x08004a89
 8004a68:	08004a91 	.word	0x08004a91
 8004a6c:	08004a99 	.word	0x08004a99
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a76:	e284      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a78:	2304      	movs	r3, #4
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7e:	e280      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a80:	2308      	movs	r3, #8
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a86:	e27c      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8e:	e278      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a90:	2320      	movs	r3, #32
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a96:	e274      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004a98:	2340      	movs	r3, #64	@ 0x40
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9e:	e270      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004aa0:	2380      	movs	r3, #128	@ 0x80
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa6:	e26c      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1b      	ldr	r2, [pc, #108]	@ (8004b1c <UART_SetConfig+0x348>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d142      	bne.n	8004b38 <UART_SetConfig+0x364>
 8004ab2:	4b16      	ldr	r3, [pc, #88]	@ (8004b0c <UART_SetConfig+0x338>)
 8004ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b05      	cmp	r3, #5
 8004abc:	d838      	bhi.n	8004b30 <UART_SetConfig+0x35c>
 8004abe:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <UART_SetConfig+0x2f0>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004add 	.word	0x08004add
 8004ac8:	08004ae5 	.word	0x08004ae5
 8004acc:	08004aed 	.word	0x08004aed
 8004ad0:	08004af5 	.word	0x08004af5
 8004ad4:	08004b21 	.word	0x08004b21
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	2300      	movs	r3, #0
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e24e      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ae4:	2304      	movs	r3, #4
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aea:	e24a      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004aec:	2308      	movs	r3, #8
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af2:	e246      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004af4:	2310      	movs	r3, #16
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afa:	e242      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004afc:	cfff69f3 	.word	0xcfff69f3
 8004b00:	58000c00 	.word	0x58000c00
 8004b04:	11fff4ff 	.word	0x11fff4ff
 8004b08:	40011000 	.word	0x40011000
 8004b0c:	58024400 	.word	0x58024400
 8004b10:	40004400 	.word	0x40004400
 8004b14:	40004800 	.word	0x40004800
 8004b18:	40004c00 	.word	0x40004c00
 8004b1c:	40005000 	.word	0x40005000
 8004b20:	2320      	movs	r3, #32
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e22c      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004b28:	2340      	movs	r3, #64	@ 0x40
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e228      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004b30:	2380      	movs	r3, #128	@ 0x80
 8004b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b36:	e224      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4ab1      	ldr	r2, [pc, #708]	@ (8004e04 <UART_SetConfig+0x630>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d176      	bne.n	8004c30 <UART_SetConfig+0x45c>
 8004b42:	4bb1      	ldr	r3, [pc, #708]	@ (8004e08 <UART_SetConfig+0x634>)
 8004b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b4a:	2b28      	cmp	r3, #40	@ 0x28
 8004b4c:	d86c      	bhi.n	8004c28 <UART_SetConfig+0x454>
 8004b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <UART_SetConfig+0x380>)
 8004b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b54:	08004bf9 	.word	0x08004bf9
 8004b58:	08004c29 	.word	0x08004c29
 8004b5c:	08004c29 	.word	0x08004c29
 8004b60:	08004c29 	.word	0x08004c29
 8004b64:	08004c29 	.word	0x08004c29
 8004b68:	08004c29 	.word	0x08004c29
 8004b6c:	08004c29 	.word	0x08004c29
 8004b70:	08004c29 	.word	0x08004c29
 8004b74:	08004c01 	.word	0x08004c01
 8004b78:	08004c29 	.word	0x08004c29
 8004b7c:	08004c29 	.word	0x08004c29
 8004b80:	08004c29 	.word	0x08004c29
 8004b84:	08004c29 	.word	0x08004c29
 8004b88:	08004c29 	.word	0x08004c29
 8004b8c:	08004c29 	.word	0x08004c29
 8004b90:	08004c29 	.word	0x08004c29
 8004b94:	08004c09 	.word	0x08004c09
 8004b98:	08004c29 	.word	0x08004c29
 8004b9c:	08004c29 	.word	0x08004c29
 8004ba0:	08004c29 	.word	0x08004c29
 8004ba4:	08004c29 	.word	0x08004c29
 8004ba8:	08004c29 	.word	0x08004c29
 8004bac:	08004c29 	.word	0x08004c29
 8004bb0:	08004c29 	.word	0x08004c29
 8004bb4:	08004c11 	.word	0x08004c11
 8004bb8:	08004c29 	.word	0x08004c29
 8004bbc:	08004c29 	.word	0x08004c29
 8004bc0:	08004c29 	.word	0x08004c29
 8004bc4:	08004c29 	.word	0x08004c29
 8004bc8:	08004c29 	.word	0x08004c29
 8004bcc:	08004c29 	.word	0x08004c29
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c19 	.word	0x08004c19
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c29 	.word	0x08004c29
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c29 	.word	0x08004c29
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfe:	e1c0      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c00:	2304      	movs	r3, #4
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c06:	e1bc      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c08:	2308      	movs	r3, #8
 8004c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c0e:	e1b8      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c10:	2310      	movs	r3, #16
 8004c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c16:	e1b4      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c18:	2320      	movs	r3, #32
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1e:	e1b0      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c20:	2340      	movs	r3, #64	@ 0x40
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c26:	e1ac      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c28:	2380      	movs	r3, #128	@ 0x80
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2e:	e1a8      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a75      	ldr	r2, [pc, #468]	@ (8004e0c <UART_SetConfig+0x638>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d130      	bne.n	8004c9c <UART_SetConfig+0x4c8>
 8004c3a:	4b73      	ldr	r3, [pc, #460]	@ (8004e08 <UART_SetConfig+0x634>)
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	2b05      	cmp	r3, #5
 8004c44:	d826      	bhi.n	8004c94 <UART_SetConfig+0x4c0>
 8004c46:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <UART_SetConfig+0x478>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c65 	.word	0x08004c65
 8004c50:	08004c6d 	.word	0x08004c6d
 8004c54:	08004c75 	.word	0x08004c75
 8004c58:	08004c7d 	.word	0x08004c7d
 8004c5c:	08004c85 	.word	0x08004c85
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e18a      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e186      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c74:	2308      	movs	r3, #8
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7a:	e182      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c82:	e17e      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c84:	2320      	movs	r3, #32
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8a:	e17a      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c8c:	2340      	movs	r3, #64	@ 0x40
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c92:	e176      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c94:	2380      	movs	r3, #128	@ 0x80
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9a:	e172      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a5b      	ldr	r2, [pc, #364]	@ (8004e10 <UART_SetConfig+0x63c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d130      	bne.n	8004d08 <UART_SetConfig+0x534>
 8004ca6:	4b58      	ldr	r3, [pc, #352]	@ (8004e08 <UART_SetConfig+0x634>)
 8004ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d826      	bhi.n	8004d00 <UART_SetConfig+0x52c>
 8004cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <UART_SetConfig+0x4e4>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004cd1 	.word	0x08004cd1
 8004cbc:	08004cd9 	.word	0x08004cd9
 8004cc0:	08004ce1 	.word	0x08004ce1
 8004cc4:	08004ce9 	.word	0x08004ce9
 8004cc8:	08004cf1 	.word	0x08004cf1
 8004ccc:	08004cf9 	.word	0x08004cf9
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e154      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004cd8:	2304      	movs	r3, #4
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e150      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ce0:	2308      	movs	r3, #8
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce6:	e14c      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ce8:	2310      	movs	r3, #16
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cee:	e148      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004cf0:	2320      	movs	r3, #32
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf6:	e144      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004cf8:	2340      	movs	r3, #64	@ 0x40
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfe:	e140      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004d00:	2380      	movs	r3, #128	@ 0x80
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d06:	e13c      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a41      	ldr	r2, [pc, #260]	@ (8004e14 <UART_SetConfig+0x640>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	f040 8082 	bne.w	8004e18 <UART_SetConfig+0x644>
 8004d14:	4b3c      	ldr	r3, [pc, #240]	@ (8004e08 <UART_SetConfig+0x634>)
 8004d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d1c:	2b28      	cmp	r3, #40	@ 0x28
 8004d1e:	d86d      	bhi.n	8004dfc <UART_SetConfig+0x628>
 8004d20:	a201      	add	r2, pc, #4	@ (adr r2, 8004d28 <UART_SetConfig+0x554>)
 8004d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d26:	bf00      	nop
 8004d28:	08004dcd 	.word	0x08004dcd
 8004d2c:	08004dfd 	.word	0x08004dfd
 8004d30:	08004dfd 	.word	0x08004dfd
 8004d34:	08004dfd 	.word	0x08004dfd
 8004d38:	08004dfd 	.word	0x08004dfd
 8004d3c:	08004dfd 	.word	0x08004dfd
 8004d40:	08004dfd 	.word	0x08004dfd
 8004d44:	08004dfd 	.word	0x08004dfd
 8004d48:	08004dd5 	.word	0x08004dd5
 8004d4c:	08004dfd 	.word	0x08004dfd
 8004d50:	08004dfd 	.word	0x08004dfd
 8004d54:	08004dfd 	.word	0x08004dfd
 8004d58:	08004dfd 	.word	0x08004dfd
 8004d5c:	08004dfd 	.word	0x08004dfd
 8004d60:	08004dfd 	.word	0x08004dfd
 8004d64:	08004dfd 	.word	0x08004dfd
 8004d68:	08004ddd 	.word	0x08004ddd
 8004d6c:	08004dfd 	.word	0x08004dfd
 8004d70:	08004dfd 	.word	0x08004dfd
 8004d74:	08004dfd 	.word	0x08004dfd
 8004d78:	08004dfd 	.word	0x08004dfd
 8004d7c:	08004dfd 	.word	0x08004dfd
 8004d80:	08004dfd 	.word	0x08004dfd
 8004d84:	08004dfd 	.word	0x08004dfd
 8004d88:	08004de5 	.word	0x08004de5
 8004d8c:	08004dfd 	.word	0x08004dfd
 8004d90:	08004dfd 	.word	0x08004dfd
 8004d94:	08004dfd 	.word	0x08004dfd
 8004d98:	08004dfd 	.word	0x08004dfd
 8004d9c:	08004dfd 	.word	0x08004dfd
 8004da0:	08004dfd 	.word	0x08004dfd
 8004da4:	08004dfd 	.word	0x08004dfd
 8004da8:	08004ded 	.word	0x08004ded
 8004dac:	08004dfd 	.word	0x08004dfd
 8004db0:	08004dfd 	.word	0x08004dfd
 8004db4:	08004dfd 	.word	0x08004dfd
 8004db8:	08004dfd 	.word	0x08004dfd
 8004dbc:	08004dfd 	.word	0x08004dfd
 8004dc0:	08004dfd 	.word	0x08004dfd
 8004dc4:	08004dfd 	.word	0x08004dfd
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd2:	e0d6      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004dd4:	2304      	movs	r3, #4
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dda:	e0d2      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ddc:	2308      	movs	r3, #8
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e0ce      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004de4:	2310      	movs	r3, #16
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dea:	e0ca      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004dec:	2320      	movs	r3, #32
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df2:	e0c6      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004df4:	2340      	movs	r3, #64	@ 0x40
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfa:	e0c2      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004dfc:	2380      	movs	r3, #128	@ 0x80
 8004dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e02:	e0be      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004e04:	40011400 	.word	0x40011400
 8004e08:	58024400 	.word	0x58024400
 8004e0c:	40007800 	.word	0x40007800
 8004e10:	40007c00 	.word	0x40007c00
 8004e14:	40011800 	.word	0x40011800
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4aad      	ldr	r2, [pc, #692]	@ (80050d4 <UART_SetConfig+0x900>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d176      	bne.n	8004f10 <UART_SetConfig+0x73c>
 8004e22:	4bad      	ldr	r3, [pc, #692]	@ (80050d8 <UART_SetConfig+0x904>)
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e2a:	2b28      	cmp	r3, #40	@ 0x28
 8004e2c:	d86c      	bhi.n	8004f08 <UART_SetConfig+0x734>
 8004e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e34 <UART_SetConfig+0x660>)
 8004e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e34:	08004ed9 	.word	0x08004ed9
 8004e38:	08004f09 	.word	0x08004f09
 8004e3c:	08004f09 	.word	0x08004f09
 8004e40:	08004f09 	.word	0x08004f09
 8004e44:	08004f09 	.word	0x08004f09
 8004e48:	08004f09 	.word	0x08004f09
 8004e4c:	08004f09 	.word	0x08004f09
 8004e50:	08004f09 	.word	0x08004f09
 8004e54:	08004ee1 	.word	0x08004ee1
 8004e58:	08004f09 	.word	0x08004f09
 8004e5c:	08004f09 	.word	0x08004f09
 8004e60:	08004f09 	.word	0x08004f09
 8004e64:	08004f09 	.word	0x08004f09
 8004e68:	08004f09 	.word	0x08004f09
 8004e6c:	08004f09 	.word	0x08004f09
 8004e70:	08004f09 	.word	0x08004f09
 8004e74:	08004ee9 	.word	0x08004ee9
 8004e78:	08004f09 	.word	0x08004f09
 8004e7c:	08004f09 	.word	0x08004f09
 8004e80:	08004f09 	.word	0x08004f09
 8004e84:	08004f09 	.word	0x08004f09
 8004e88:	08004f09 	.word	0x08004f09
 8004e8c:	08004f09 	.word	0x08004f09
 8004e90:	08004f09 	.word	0x08004f09
 8004e94:	08004ef1 	.word	0x08004ef1
 8004e98:	08004f09 	.word	0x08004f09
 8004e9c:	08004f09 	.word	0x08004f09
 8004ea0:	08004f09 	.word	0x08004f09
 8004ea4:	08004f09 	.word	0x08004f09
 8004ea8:	08004f09 	.word	0x08004f09
 8004eac:	08004f09 	.word	0x08004f09
 8004eb0:	08004f09 	.word	0x08004f09
 8004eb4:	08004ef9 	.word	0x08004ef9
 8004eb8:	08004f09 	.word	0x08004f09
 8004ebc:	08004f09 	.word	0x08004f09
 8004ec0:	08004f09 	.word	0x08004f09
 8004ec4:	08004f09 	.word	0x08004f09
 8004ec8:	08004f09 	.word	0x08004f09
 8004ecc:	08004f09 	.word	0x08004f09
 8004ed0:	08004f09 	.word	0x08004f09
 8004ed4:	08004f01 	.word	0x08004f01
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ede:	e050      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ee6:	e04c      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eee:	e048      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ef0:	2310      	movs	r3, #16
 8004ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ef6:	e044      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004ef8:	2320      	movs	r3, #32
 8004efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004efe:	e040      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f00:	2340      	movs	r3, #64	@ 0x40
 8004f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f06:	e03c      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f08:	2380      	movs	r3, #128	@ 0x80
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0e:	e038      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a71      	ldr	r2, [pc, #452]	@ (80050dc <UART_SetConfig+0x908>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d130      	bne.n	8004f7c <UART_SetConfig+0x7a8>
 8004f1a:	4b6f      	ldr	r3, [pc, #444]	@ (80050d8 <UART_SetConfig+0x904>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	f003 0307 	and.w	r3, r3, #7
 8004f22:	2b05      	cmp	r3, #5
 8004f24:	d826      	bhi.n	8004f74 <UART_SetConfig+0x7a0>
 8004f26:	a201      	add	r2, pc, #4	@ (adr r2, 8004f2c <UART_SetConfig+0x758>)
 8004f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2c:	08004f45 	.word	0x08004f45
 8004f30:	08004f4d 	.word	0x08004f4d
 8004f34:	08004f55 	.word	0x08004f55
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4a:	e01a      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f52:	e016      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5a:	e012      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f62:	e00e      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f64:	2320      	movs	r3, #32
 8004f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f6a:	e00a      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f6c:	2340      	movs	r3, #64	@ 0x40
 8004f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f72:	e006      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f74:	2380      	movs	r3, #128	@ 0x80
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e002      	b.n	8004f82 <UART_SetConfig+0x7ae>
 8004f7c:	2380      	movs	r3, #128	@ 0x80
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a55      	ldr	r2, [pc, #340]	@ (80050dc <UART_SetConfig+0x908>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	f040 80f8 	bne.w	800517e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	dc46      	bgt.n	8005024 <UART_SetConfig+0x850>
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	db75      	blt.n	8005086 <UART_SetConfig+0x8b2>
 8004f9a:	3b02      	subs	r3, #2
 8004f9c:	2b1e      	cmp	r3, #30
 8004f9e:	d872      	bhi.n	8005086 <UART_SetConfig+0x8b2>
 8004fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa8 <UART_SetConfig+0x7d4>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	0800502b 	.word	0x0800502b
 8004fac:	08005087 	.word	0x08005087
 8004fb0:	08005033 	.word	0x08005033
 8004fb4:	08005087 	.word	0x08005087
 8004fb8:	08005087 	.word	0x08005087
 8004fbc:	08005087 	.word	0x08005087
 8004fc0:	08005043 	.word	0x08005043
 8004fc4:	08005087 	.word	0x08005087
 8004fc8:	08005087 	.word	0x08005087
 8004fcc:	08005087 	.word	0x08005087
 8004fd0:	08005087 	.word	0x08005087
 8004fd4:	08005087 	.word	0x08005087
 8004fd8:	08005087 	.word	0x08005087
 8004fdc:	08005087 	.word	0x08005087
 8004fe0:	08005053 	.word	0x08005053
 8004fe4:	08005087 	.word	0x08005087
 8004fe8:	08005087 	.word	0x08005087
 8004fec:	08005087 	.word	0x08005087
 8004ff0:	08005087 	.word	0x08005087
 8004ff4:	08005087 	.word	0x08005087
 8004ff8:	08005087 	.word	0x08005087
 8004ffc:	08005087 	.word	0x08005087
 8005000:	08005087 	.word	0x08005087
 8005004:	08005087 	.word	0x08005087
 8005008:	08005087 	.word	0x08005087
 800500c:	08005087 	.word	0x08005087
 8005010:	08005087 	.word	0x08005087
 8005014:	08005087 	.word	0x08005087
 8005018:	08005087 	.word	0x08005087
 800501c:	08005087 	.word	0x08005087
 8005020:	08005079 	.word	0x08005079
 8005024:	2b40      	cmp	r3, #64	@ 0x40
 8005026:	d02a      	beq.n	800507e <UART_SetConfig+0x8aa>
 8005028:	e02d      	b.n	8005086 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800502a:	f7ff f82d 	bl	8004088 <HAL_RCCEx_GetD3PCLK1Freq>
 800502e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005030:	e02f      	b.n	8005092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff f83c 	bl	80040b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005040:	e027      	b.n	8005092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005042:	f107 0318 	add.w	r3, r7, #24
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff f988 	bl	800435c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005050:	e01f      	b.n	8005092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005052:	4b21      	ldr	r3, [pc, #132]	@ (80050d8 <UART_SetConfig+0x904>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800505e:	4b1e      	ldr	r3, [pc, #120]	@ (80050d8 <UART_SetConfig+0x904>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	08db      	lsrs	r3, r3, #3
 8005064:	f003 0303 	and.w	r3, r3, #3
 8005068:	4a1d      	ldr	r2, [pc, #116]	@ (80050e0 <UART_SetConfig+0x90c>)
 800506a:	fa22 f303 	lsr.w	r3, r2, r3
 800506e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005070:	e00f      	b.n	8005092 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005072:	4b1b      	ldr	r3, [pc, #108]	@ (80050e0 <UART_SetConfig+0x90c>)
 8005074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005076:	e00c      	b.n	8005092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005078:	4b1a      	ldr	r3, [pc, #104]	@ (80050e4 <UART_SetConfig+0x910>)
 800507a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800507c:	e009      	b.n	8005092 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800507e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005084:	e005      	b.n	8005092 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005090:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 81ee 	beq.w	8005476 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	4a12      	ldr	r2, [pc, #72]	@ (80050e8 <UART_SetConfig+0x914>)
 80050a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d305      	bcc.n	80050ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d910      	bls.n	80050ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80050d0:	e1d1      	b.n	8005476 <UART_SetConfig+0xca2>
 80050d2:	bf00      	nop
 80050d4:	40011c00 	.word	0x40011c00
 80050d8:	58024400 	.word	0x58024400
 80050dc:	58000c00 	.word	0x58000c00
 80050e0:	03d09000 	.word	0x03d09000
 80050e4:	003d0900 	.word	0x003d0900
 80050e8:	08013a9c 	.word	0x08013a9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ee:	2200      	movs	r2, #0
 80050f0:	60bb      	str	r3, [r7, #8]
 80050f2:	60fa      	str	r2, [r7, #12]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	4ac0      	ldr	r2, [pc, #768]	@ (80053fc <UART_SetConfig+0xc28>)
 80050fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	2200      	movs	r2, #0
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	e9d7 2300 	ldrd	r2, r3, [r7]
 800510a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800510e:	f7fb f94f 	bl	80003b0 <__aeabi_uldivmod>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4610      	mov	r0, r2
 8005118:	4619      	mov	r1, r3
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	020b      	lsls	r3, r1, #8
 8005124:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005128:	0202      	lsls	r2, r0, #8
 800512a:	6979      	ldr	r1, [r7, #20]
 800512c:	6849      	ldr	r1, [r1, #4]
 800512e:	0849      	lsrs	r1, r1, #1
 8005130:	2000      	movs	r0, #0
 8005132:	460c      	mov	r4, r1
 8005134:	4605      	mov	r5, r0
 8005136:	eb12 0804 	adds.w	r8, r2, r4
 800513a:	eb43 0905 	adc.w	r9, r3, r5
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	469a      	mov	sl, r3
 8005146:	4693      	mov	fp, r2
 8005148:	4652      	mov	r2, sl
 800514a:	465b      	mov	r3, fp
 800514c:	4640      	mov	r0, r8
 800514e:	4649      	mov	r1, r9
 8005150:	f7fb f92e 	bl	80003b0 <__aeabi_uldivmod>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4613      	mov	r3, r2
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005162:	d308      	bcc.n	8005176 <UART_SetConfig+0x9a2>
 8005164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516a:	d204      	bcs.n	8005176 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005172:	60da      	str	r2, [r3, #12]
 8005174:	e17f      	b.n	8005476 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800517c:	e17b      	b.n	8005476 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005186:	f040 80bd 	bne.w	8005304 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800518a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800518e:	2b20      	cmp	r3, #32
 8005190:	dc48      	bgt.n	8005224 <UART_SetConfig+0xa50>
 8005192:	2b00      	cmp	r3, #0
 8005194:	db7b      	blt.n	800528e <UART_SetConfig+0xaba>
 8005196:	2b20      	cmp	r3, #32
 8005198:	d879      	bhi.n	800528e <UART_SetConfig+0xaba>
 800519a:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <UART_SetConfig+0x9cc>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	0800522b 	.word	0x0800522b
 80051a4:	08005233 	.word	0x08005233
 80051a8:	0800528f 	.word	0x0800528f
 80051ac:	0800528f 	.word	0x0800528f
 80051b0:	0800523b 	.word	0x0800523b
 80051b4:	0800528f 	.word	0x0800528f
 80051b8:	0800528f 	.word	0x0800528f
 80051bc:	0800528f 	.word	0x0800528f
 80051c0:	0800524b 	.word	0x0800524b
 80051c4:	0800528f 	.word	0x0800528f
 80051c8:	0800528f 	.word	0x0800528f
 80051cc:	0800528f 	.word	0x0800528f
 80051d0:	0800528f 	.word	0x0800528f
 80051d4:	0800528f 	.word	0x0800528f
 80051d8:	0800528f 	.word	0x0800528f
 80051dc:	0800528f 	.word	0x0800528f
 80051e0:	0800525b 	.word	0x0800525b
 80051e4:	0800528f 	.word	0x0800528f
 80051e8:	0800528f 	.word	0x0800528f
 80051ec:	0800528f 	.word	0x0800528f
 80051f0:	0800528f 	.word	0x0800528f
 80051f4:	0800528f 	.word	0x0800528f
 80051f8:	0800528f 	.word	0x0800528f
 80051fc:	0800528f 	.word	0x0800528f
 8005200:	0800528f 	.word	0x0800528f
 8005204:	0800528f 	.word	0x0800528f
 8005208:	0800528f 	.word	0x0800528f
 800520c:	0800528f 	.word	0x0800528f
 8005210:	0800528f 	.word	0x0800528f
 8005214:	0800528f 	.word	0x0800528f
 8005218:	0800528f 	.word	0x0800528f
 800521c:	0800528f 	.word	0x0800528f
 8005220:	08005281 	.word	0x08005281
 8005224:	2b40      	cmp	r3, #64	@ 0x40
 8005226:	d02e      	beq.n	8005286 <UART_SetConfig+0xab2>
 8005228:	e031      	b.n	800528e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522a:	f7fe ff01 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 800522e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005230:	e033      	b.n	800529a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005232:	f7fe ff13 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 8005236:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005238:	e02f      	b.n	800529a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800523a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe ff38 	bl	80040b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005248:	e027      	b.n	800529a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800524a:	f107 0318 	add.w	r3, r7, #24
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff f884 	bl	800435c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005258:	e01f      	b.n	800529a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525a:	4b69      	ldr	r3, [pc, #420]	@ (8005400 <UART_SetConfig+0xc2c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0320 	and.w	r3, r3, #32
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005266:	4b66      	ldr	r3, [pc, #408]	@ (8005400 <UART_SetConfig+0xc2c>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	08db      	lsrs	r3, r3, #3
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	4a64      	ldr	r2, [pc, #400]	@ (8005404 <UART_SetConfig+0xc30>)
 8005272:	fa22 f303 	lsr.w	r3, r2, r3
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005278:	e00f      	b.n	800529a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800527a:	4b62      	ldr	r3, [pc, #392]	@ (8005404 <UART_SetConfig+0xc30>)
 800527c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800527e:	e00c      	b.n	800529a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005280:	4b61      	ldr	r3, [pc, #388]	@ (8005408 <UART_SetConfig+0xc34>)
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005284:	e009      	b.n	800529a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800528c:	e005      	b.n	800529a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005298:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800529a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80ea 	beq.w	8005476 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	4a55      	ldr	r2, [pc, #340]	@ (80053fc <UART_SetConfig+0xc28>)
 80052a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ac:	461a      	mov	r2, r3
 80052ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b4:	005a      	lsls	r2, r3, #1
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	441a      	add	r2, r3
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d916      	bls.n	80052fc <UART_SetConfig+0xb28>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d4:	d212      	bcs.n	80052fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f023 030f 	bic.w	r3, r3, #15
 80052de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80052ee:	4313      	orrs	r3, r2
 80052f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	e0bc      	b.n	8005476 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005302:	e0b8      	b.n	8005476 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005304:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005308:	2b20      	cmp	r3, #32
 800530a:	dc4b      	bgt.n	80053a4 <UART_SetConfig+0xbd0>
 800530c:	2b00      	cmp	r3, #0
 800530e:	f2c0 8087 	blt.w	8005420 <UART_SetConfig+0xc4c>
 8005312:	2b20      	cmp	r3, #32
 8005314:	f200 8084 	bhi.w	8005420 <UART_SetConfig+0xc4c>
 8005318:	a201      	add	r2, pc, #4	@ (adr r2, 8005320 <UART_SetConfig+0xb4c>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	080053ab 	.word	0x080053ab
 8005324:	080053b3 	.word	0x080053b3
 8005328:	08005421 	.word	0x08005421
 800532c:	08005421 	.word	0x08005421
 8005330:	080053bb 	.word	0x080053bb
 8005334:	08005421 	.word	0x08005421
 8005338:	08005421 	.word	0x08005421
 800533c:	08005421 	.word	0x08005421
 8005340:	080053cb 	.word	0x080053cb
 8005344:	08005421 	.word	0x08005421
 8005348:	08005421 	.word	0x08005421
 800534c:	08005421 	.word	0x08005421
 8005350:	08005421 	.word	0x08005421
 8005354:	08005421 	.word	0x08005421
 8005358:	08005421 	.word	0x08005421
 800535c:	08005421 	.word	0x08005421
 8005360:	080053db 	.word	0x080053db
 8005364:	08005421 	.word	0x08005421
 8005368:	08005421 	.word	0x08005421
 800536c:	08005421 	.word	0x08005421
 8005370:	08005421 	.word	0x08005421
 8005374:	08005421 	.word	0x08005421
 8005378:	08005421 	.word	0x08005421
 800537c:	08005421 	.word	0x08005421
 8005380:	08005421 	.word	0x08005421
 8005384:	08005421 	.word	0x08005421
 8005388:	08005421 	.word	0x08005421
 800538c:	08005421 	.word	0x08005421
 8005390:	08005421 	.word	0x08005421
 8005394:	08005421 	.word	0x08005421
 8005398:	08005421 	.word	0x08005421
 800539c:	08005421 	.word	0x08005421
 80053a0:	08005413 	.word	0x08005413
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d037      	beq.n	8005418 <UART_SetConfig+0xc44>
 80053a8:	e03a      	b.n	8005420 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053aa:	f7fe fe41 	bl	8004030 <HAL_RCC_GetPCLK1Freq>
 80053ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053b0:	e03c      	b.n	800542c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053b2:	f7fe fe53 	bl	800405c <HAL_RCC_GetPCLK2Freq>
 80053b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80053b8:	e038      	b.n	800542c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe fe78 	bl	80040b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053c8:	e030      	b.n	800542c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ca:	f107 0318 	add.w	r3, r7, #24
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe ffc4 	bl	800435c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053d8:	e028      	b.n	800542c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053da:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <UART_SetConfig+0xc2c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d012      	beq.n	800540c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053e6:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <UART_SetConfig+0xc2c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	08db      	lsrs	r3, r3, #3
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	4a04      	ldr	r2, [pc, #16]	@ (8005404 <UART_SetConfig+0xc30>)
 80053f2:	fa22 f303 	lsr.w	r3, r2, r3
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053f8:	e018      	b.n	800542c <UART_SetConfig+0xc58>
 80053fa:	bf00      	nop
 80053fc:	08013a9c 	.word	0x08013a9c
 8005400:	58024400 	.word	0x58024400
 8005404:	03d09000 	.word	0x03d09000
 8005408:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800540c:	4b24      	ldr	r3, [pc, #144]	@ (80054a0 <UART_SetConfig+0xccc>)
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005410:	e00c      	b.n	800542c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005412:	4b24      	ldr	r3, [pc, #144]	@ (80054a4 <UART_SetConfig+0xcd0>)
 8005414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005416:	e009      	b.n	800542c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005418:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800541c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800541e:	e005      	b.n	800542c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800542a:	bf00      	nop
    }

    if (pclk != 0U)
 800542c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d021      	beq.n	8005476 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	4a1c      	ldr	r2, [pc, #112]	@ (80054a8 <UART_SetConfig+0xcd4>)
 8005438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543c:	461a      	mov	r2, r3
 800543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005440:	fbb3 f2f2 	udiv	r2, r3, r2
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	441a      	add	r2, r3
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	fbb2 f3f3 	udiv	r3, r2, r3
 8005454:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005458:	2b0f      	cmp	r3, #15
 800545a:	d909      	bls.n	8005470 <UART_SetConfig+0xc9c>
 800545c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800545e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005462:	d205      	bcs.n	8005470 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005466:	b29a      	uxth	r2, r3
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60da      	str	r2, [r3, #12]
 800546e:	e002      	b.n	8005476 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	2201      	movs	r2, #1
 800547a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2201      	movs	r2, #1
 8005482:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2200      	movs	r2, #0
 800548a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2200      	movs	r2, #0
 8005490:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005492:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005496:	4618      	mov	r0, r3
 8005498:	3748      	adds	r7, #72	@ 0x48
 800549a:	46bd      	mov	sp, r7
 800549c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054a0:	03d09000 	.word	0x03d09000
 80054a4:	003d0900 	.word	0x003d0900
 80054a8:	08013a9c 	.word	0x08013a9c

080054ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b8:	f003 0308 	and.w	r3, r3, #8
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005588:	2b00      	cmp	r3, #0
 800558a:	d01a      	beq.n	80055c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055aa:	d10a      	bne.n	80055c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b098      	sub	sp, #96	@ 0x60
 80055f4:	af02      	add	r7, sp, #8
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005600:	f7fb fe7e 	bl	8001300 <HAL_GetTick>
 8005604:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	2b08      	cmp	r3, #8
 8005612:	d12f      	bne.n	8005674 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f88e 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d022      	beq.n	8005674 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005642:	653b      	str	r3, [r7, #80]	@ 0x50
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564c:	647b      	str	r3, [r7, #68]	@ 0x44
 800564e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005652:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800565a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e063      	b.n	800573c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b04      	cmp	r3, #4
 8005680:	d149      	bne.n	8005716 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005682:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568a:	2200      	movs	r2, #0
 800568c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f857 	bl	8005744 <UART_WaitOnFlagUntilTimeout>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d03c      	beq.n	8005716 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	e853 3f00 	ldrex	r3, [r3]
 80056a8:	623b      	str	r3, [r7, #32]
   return(result);
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	461a      	mov	r2, r3
 80056b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80056bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1e6      	bne.n	800569c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	e853 3f00 	ldrex	r3, [r3]
 80056dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f023 0301 	bic.w	r3, r3, #1
 80056e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3308      	adds	r3, #8
 80056ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ee:	61fa      	str	r2, [r7, #28]
 80056f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	69b9      	ldr	r1, [r7, #24]
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	e841 2300 	strex	r3, r2, [r1]
 80056fa:	617b      	str	r3, [r7, #20]
   return(result);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1e5      	bne.n	80056ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e012      	b.n	800573c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2220      	movs	r2, #32
 8005722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3758      	adds	r7, #88	@ 0x58
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005754:	e04f      	b.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d04b      	beq.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575e:	f7fb fdcf 	bl	8001300 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <UART_WaitOnFlagUntilTimeout+0x30>
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e04e      	b.n	8005816 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d037      	beq.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b80      	cmp	r3, #128	@ 0x80
 800578a:	d034      	beq.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	d031      	beq.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b08      	cmp	r3, #8
 800579e:	d110      	bne.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2208      	movs	r2, #8
 80057a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f839 	bl	8005820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2208      	movs	r2, #8
 80057b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e029      	b.n	8005816 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057d0:	d111      	bne.n	80057f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f81f 	bl	8005820 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e00f      	b.n	8005816 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4013      	ands	r3, r2
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	429a      	cmp	r2, r3
 8005804:	bf0c      	ite	eq
 8005806:	2301      	moveq	r3, #1
 8005808:	2300      	movne	r3, #0
 800580a:	b2db      	uxtb	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	429a      	cmp	r2, r3
 8005812:	d0a0      	beq.n	8005756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005820:	b480      	push	{r7}
 8005822:	b095      	sub	sp, #84	@ 0x54
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800583c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005846:	643b      	str	r3, [r7, #64]	@ 0x40
 8005848:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800584c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e6      	bne.n	8005828 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	61fb      	str	r3, [r7, #28]
   return(result);
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	4b1e      	ldr	r3, [pc, #120]	@ (80058e8 <UART_EndRxTransfer+0xc8>)
 800586e:	4013      	ands	r3, r2
 8005870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	3308      	adds	r3, #8
 8005878:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800587a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800587c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e5      	bne.n	800585a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d118      	bne.n	80058c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f023 0310 	bic.w	r3, r3, #16
 80058aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	461a      	mov	r2, r3
 80058b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6979      	ldr	r1, [r7, #20]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	613b      	str	r3, [r7, #16]
   return(result);
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e6      	bne.n	8005896 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80058dc:	bf00      	nop
 80058de:	3754      	adds	r7, #84	@ 0x54
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	effffffe 	.word	0xeffffffe

080058ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80058f2:	4b87      	ldr	r3, [pc, #540]	@ (8005b10 <MX_LWIP_Init+0x224>)
 80058f4:	22c0      	movs	r2, #192	@ 0xc0
 80058f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80058f8:	4b85      	ldr	r3, [pc, #532]	@ (8005b10 <MX_LWIP_Init+0x224>)
 80058fa:	22a8      	movs	r2, #168	@ 0xa8
 80058fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80058fe:	4b84      	ldr	r3, [pc, #528]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005900:	2200      	movs	r2, #0
 8005902:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8005904:	4b82      	ldr	r3, [pc, #520]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005906:	2264      	movs	r2, #100	@ 0x64
 8005908:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800590a:	4b82      	ldr	r3, [pc, #520]	@ (8005b14 <MX_LWIP_Init+0x228>)
 800590c:	22ff      	movs	r2, #255	@ 0xff
 800590e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005910:	4b80      	ldr	r3, [pc, #512]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005912:	22ff      	movs	r2, #255	@ 0xff
 8005914:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005916:	4b7f      	ldr	r3, [pc, #508]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005918:	22ff      	movs	r2, #255	@ 0xff
 800591a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800591c:	4b7d      	ldr	r3, [pc, #500]	@ (8005b14 <MX_LWIP_Init+0x228>)
 800591e:	2200      	movs	r2, #0
 8005920:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8005922:	4b7d      	ldr	r3, [pc, #500]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005924:	22c0      	movs	r2, #192	@ 0xc0
 8005926:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8005928:	4b7b      	ldr	r3, [pc, #492]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 800592a:	22a8      	movs	r2, #168	@ 0xa8
 800592c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800592e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005930:	2200      	movs	r2, #0
 8005932:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8005934:	4b78      	ldr	r3, [pc, #480]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005936:	2201      	movs	r2, #1
 8005938:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800593a:	f000 fe17 	bl	800656c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800593e:	4b74      	ldr	r3, [pc, #464]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	061a      	lsls	r2, r3, #24
 8005944:	4b72      	ldr	r3, [pc, #456]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005946:	785b      	ldrb	r3, [r3, #1]
 8005948:	041b      	lsls	r3, r3, #16
 800594a:	431a      	orrs	r2, r3
 800594c:	4b70      	ldr	r3, [pc, #448]	@ (8005b10 <MX_LWIP_Init+0x224>)
 800594e:	789b      	ldrb	r3, [r3, #2]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	4313      	orrs	r3, r2
 8005954:	4a6e      	ldr	r2, [pc, #440]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005956:	78d2      	ldrb	r2, [r2, #3]
 8005958:	4313      	orrs	r3, r2
 800595a:	061a      	lsls	r2, r3, #24
 800595c:	4b6c      	ldr	r3, [pc, #432]	@ (8005b10 <MX_LWIP_Init+0x224>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	0619      	lsls	r1, r3, #24
 8005962:	4b6b      	ldr	r3, [pc, #428]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	4319      	orrs	r1, r3
 800596a:	4b69      	ldr	r3, [pc, #420]	@ (8005b10 <MX_LWIP_Init+0x224>)
 800596c:	789b      	ldrb	r3, [r3, #2]
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	430b      	orrs	r3, r1
 8005972:	4967      	ldr	r1, [pc, #412]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005974:	78c9      	ldrb	r1, [r1, #3]
 8005976:	430b      	orrs	r3, r1
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800597e:	431a      	orrs	r2, r3
 8005980:	4b63      	ldr	r3, [pc, #396]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	0619      	lsls	r1, r3, #24
 8005986:	4b62      	ldr	r3, [pc, #392]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005988:	785b      	ldrb	r3, [r3, #1]
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	4319      	orrs	r1, r3
 800598e:	4b60      	ldr	r3, [pc, #384]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005990:	789b      	ldrb	r3, [r3, #2]
 8005992:	021b      	lsls	r3, r3, #8
 8005994:	430b      	orrs	r3, r1
 8005996:	495e      	ldr	r1, [pc, #376]	@ (8005b10 <MX_LWIP_Init+0x224>)
 8005998:	78c9      	ldrb	r1, [r1, #3]
 800599a:	430b      	orrs	r3, r1
 800599c:	0a1b      	lsrs	r3, r3, #8
 800599e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80059a2:	431a      	orrs	r2, r3
 80059a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005b10 <MX_LWIP_Init+0x224>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	0619      	lsls	r1, r3, #24
 80059aa:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <MX_LWIP_Init+0x224>)
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	4319      	orrs	r1, r3
 80059b2:	4b57      	ldr	r3, [pc, #348]	@ (8005b10 <MX_LWIP_Init+0x224>)
 80059b4:	789b      	ldrb	r3, [r3, #2]
 80059b6:	021b      	lsls	r3, r3, #8
 80059b8:	430b      	orrs	r3, r1
 80059ba:	4955      	ldr	r1, [pc, #340]	@ (8005b10 <MX_LWIP_Init+0x224>)
 80059bc:	78c9      	ldrb	r1, [r1, #3]
 80059be:	430b      	orrs	r3, r1
 80059c0:	0e1b      	lsrs	r3, r3, #24
 80059c2:	4313      	orrs	r3, r2
 80059c4:	4a55      	ldr	r2, [pc, #340]	@ (8005b1c <MX_LWIP_Init+0x230>)
 80059c6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80059c8:	4b52      	ldr	r3, [pc, #328]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	061a      	lsls	r2, r3, #24
 80059ce:	4b51      	ldr	r3, [pc, #324]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	431a      	orrs	r2, r3
 80059d6:	4b4f      	ldr	r3, [pc, #316]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059d8:	789b      	ldrb	r3, [r3, #2]
 80059da:	021b      	lsls	r3, r3, #8
 80059dc:	4313      	orrs	r3, r2
 80059de:	4a4d      	ldr	r2, [pc, #308]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059e0:	78d2      	ldrb	r2, [r2, #3]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	061a      	lsls	r2, r3, #24
 80059e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	0619      	lsls	r1, r3, #24
 80059ec:	4b49      	ldr	r3, [pc, #292]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059ee:	785b      	ldrb	r3, [r3, #1]
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	4319      	orrs	r1, r3
 80059f4:	4b47      	ldr	r3, [pc, #284]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059f6:	789b      	ldrb	r3, [r3, #2]
 80059f8:	021b      	lsls	r3, r3, #8
 80059fa:	430b      	orrs	r3, r1
 80059fc:	4945      	ldr	r1, [pc, #276]	@ (8005b14 <MX_LWIP_Init+0x228>)
 80059fe:	78c9      	ldrb	r1, [r1, #3]
 8005a00:	430b      	orrs	r3, r1
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	4b42      	ldr	r3, [pc, #264]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	0619      	lsls	r1, r3, #24
 8005a10:	4b40      	ldr	r3, [pc, #256]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	041b      	lsls	r3, r3, #16
 8005a16:	4319      	orrs	r1, r3
 8005a18:	4b3e      	ldr	r3, [pc, #248]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a1a:	789b      	ldrb	r3, [r3, #2]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	493c      	ldr	r1, [pc, #240]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a22:	78c9      	ldrb	r1, [r1, #3]
 8005a24:	430b      	orrs	r3, r1
 8005a26:	0a1b      	lsrs	r3, r3, #8
 8005a28:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	4b39      	ldr	r3, [pc, #228]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	0619      	lsls	r1, r3, #24
 8005a34:	4b37      	ldr	r3, [pc, #220]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	041b      	lsls	r3, r3, #16
 8005a3a:	4319      	orrs	r1, r3
 8005a3c:	4b35      	ldr	r3, [pc, #212]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a3e:	789b      	ldrb	r3, [r3, #2]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	430b      	orrs	r3, r1
 8005a44:	4933      	ldr	r1, [pc, #204]	@ (8005b14 <MX_LWIP_Init+0x228>)
 8005a46:	78c9      	ldrb	r1, [r1, #3]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	0e1b      	lsrs	r3, r3, #24
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	4a34      	ldr	r2, [pc, #208]	@ (8005b20 <MX_LWIP_Init+0x234>)
 8005a50:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005a52:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	061a      	lsls	r2, r3, #24
 8005a58:	4b2f      	ldr	r3, [pc, #188]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	4b2d      	ldr	r3, [pc, #180]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a62:	789b      	ldrb	r3, [r3, #2]
 8005a64:	021b      	lsls	r3, r3, #8
 8005a66:	4313      	orrs	r3, r2
 8005a68:	4a2b      	ldr	r2, [pc, #172]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a6a:	78d2      	ldrb	r2, [r2, #3]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	061a      	lsls	r2, r3, #24
 8005a70:	4b29      	ldr	r3, [pc, #164]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	0619      	lsls	r1, r3, #24
 8005a76:	4b28      	ldr	r3, [pc, #160]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a78:	785b      	ldrb	r3, [r3, #1]
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	4319      	orrs	r1, r3
 8005a7e:	4b26      	ldr	r3, [pc, #152]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a80:	789b      	ldrb	r3, [r3, #2]
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	430b      	orrs	r3, r1
 8005a86:	4924      	ldr	r1, [pc, #144]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a88:	78c9      	ldrb	r1, [r1, #3]
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	021b      	lsls	r3, r3, #8
 8005a8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a92:	431a      	orrs	r2, r3
 8005a94:	4b20      	ldr	r3, [pc, #128]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	0619      	lsls	r1, r3, #24
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	041b      	lsls	r3, r3, #16
 8005aa0:	4319      	orrs	r1, r3
 8005aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005aa4:	789b      	ldrb	r3, [r3, #2]
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	430b      	orrs	r3, r1
 8005aaa:	491b      	ldr	r1, [pc, #108]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005aac:	78c9      	ldrb	r1, [r1, #3]
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	0a1b      	lsrs	r3, r3, #8
 8005ab2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	4b17      	ldr	r3, [pc, #92]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	0619      	lsls	r1, r3, #24
 8005abe:	4b16      	ldr	r3, [pc, #88]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005ac0:	785b      	ldrb	r3, [r3, #1]
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	4319      	orrs	r1, r3
 8005ac6:	4b14      	ldr	r3, [pc, #80]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005ac8:	789b      	ldrb	r3, [r3, #2]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	430b      	orrs	r3, r1
 8005ace:	4912      	ldr	r1, [pc, #72]	@ (8005b18 <MX_LWIP_Init+0x22c>)
 8005ad0:	78c9      	ldrb	r1, [r1, #3]
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	0e1b      	lsrs	r3, r3, #24
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	4a12      	ldr	r2, [pc, #72]	@ (8005b24 <MX_LWIP_Init+0x238>)
 8005ada:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005adc:	4b12      	ldr	r3, [pc, #72]	@ (8005b28 <MX_LWIP_Init+0x23c>)
 8005ade:	9302      	str	r3, [sp, #8]
 8005ae0:	4b12      	ldr	r3, [pc, #72]	@ (8005b2c <MX_LWIP_Init+0x240>)
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8005b24 <MX_LWIP_Init+0x238>)
 8005aea:	4a0d      	ldr	r2, [pc, #52]	@ (8005b20 <MX_LWIP_Init+0x234>)
 8005aec:	490b      	ldr	r1, [pc, #44]	@ (8005b1c <MX_LWIP_Init+0x230>)
 8005aee:	4810      	ldr	r0, [pc, #64]	@ (8005b30 <MX_LWIP_Init+0x244>)
 8005af0:	f001 fa24 	bl	8006f3c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005af4:	480e      	ldr	r0, [pc, #56]	@ (8005b30 <MX_LWIP_Init+0x244>)
 8005af6:	f001 fbd3 	bl	80072a0 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8005afa:	480d      	ldr	r0, [pc, #52]	@ (8005b30 <MX_LWIP_Init+0x244>)
 8005afc:	f001 fbe0 	bl	80072c0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005b00:	490c      	ldr	r1, [pc, #48]	@ (8005b34 <MX_LWIP_Init+0x248>)
 8005b02:	480b      	ldr	r0, [pc, #44]	@ (8005b30 <MX_LWIP_Init+0x244>)
 8005b04:	f001 fcde 	bl	80074c4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005b08:	bf00      	nop
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	240001a0 	.word	0x240001a0
 8005b14:	240001a4 	.word	0x240001a4
 8005b18:	240001a8 	.word	0x240001a8
 8005b1c:	24000194 	.word	0x24000194
 8005b20:	24000198 	.word	0x24000198
 8005b24:	2400019c 	.word	0x2400019c
 8005b28:	0800fdc5 	.word	0x0800fdc5
 8005b2c:	08005e79 	.word	0x08005e79
 8005b30:	24000160 	.word	0x24000160
 8005b34:	08005b89 	.word	0x08005b89

08005b38 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8005b40:	f7fb fbde 	bl	8001300 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b08      	ldr	r3, [pc, #32]	@ (8005b68 <Ethernet_Link_Periodic_Handle+0x30>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b63      	cmp	r3, #99	@ 0x63
 8005b4e:	d907      	bls.n	8005b60 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8005b50:	f7fb fbd6 	bl	8001300 <HAL_GetTick>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4a04      	ldr	r2, [pc, #16]	@ (8005b68 <Ethernet_Link_Periodic_Handle+0x30>)
 8005b58:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 faf8 	bl	8006150 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	2400015c 	.word	0x2400015c

08005b6c <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005b70:	4804      	ldr	r0, [pc, #16]	@ (8005b84 <MX_LWIP_Process+0x18>)
 8005b72:	f000 f961 	bl	8005e38 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005b76:	f007 fd13 	bl	800d5a0 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8005b7a:	4802      	ldr	r0, [pc, #8]	@ (8005b84 <MX_LWIP_Process+0x18>)
 8005b7c:	f7ff ffdc 	bl	8005b38 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8005b80:	bf00      	nop
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	24000160 	.word	0x24000160

08005b88 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <ethernet_link_status_updated+0x20>
  {
/* USER CODE BEGIN 5 */
	  printf("Ethernet is up\n");
 8005ba0:	4805      	ldr	r0, [pc, #20]	@ (8005bb8 <ethernet_link_status_updated+0x30>)
 8005ba2:	f00a fb4d 	bl	8010240 <puts>
  {
/* USER CODE BEGIN 6 */
	  printf("Ethernet is down\n");
/* USER CODE END 6 */
  }
}
 8005ba6:	e002      	b.n	8005bae <ethernet_link_status_updated+0x26>
	  printf("Ethernet is down\n");
 8005ba8:	4804      	ldr	r0, [pc, #16]	@ (8005bbc <ethernet_link_status_updated+0x34>)
 8005baa:	f00a fb49 	bl	8010240 <puts>
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	08011088 	.word	0x08011088
 8005bbc:	08011098 	.word	0x08011098

08005bc0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005bcc:	4b44      	ldr	r3, [pc, #272]	@ (8005ce0 <low_level_init+0x120>)
 8005bce:	4a45      	ldr	r2, [pc, #276]	@ (8005ce4 <low_level_init+0x124>)
 8005bd0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005bd6:	2380      	movs	r3, #128	@ 0x80
 8005bd8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005bda:	23e1      	movs	r3, #225	@ 0xe1
 8005bdc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005bde:	2300      	movs	r3, #0
 8005be0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005be2:	2300      	movs	r3, #0
 8005be4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005be6:	2300      	movs	r3, #0
 8005be8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005bea:	4a3d      	ldr	r2, [pc, #244]	@ (8005ce0 <low_level_init+0x120>)
 8005bec:	f107 0308 	add.w	r3, r7, #8
 8005bf0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce0 <low_level_init+0x120>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005bf8:	4b39      	ldr	r3, [pc, #228]	@ (8005ce0 <low_level_init+0x120>)
 8005bfa:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce8 <low_level_init+0x128>)
 8005bfc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005bfe:	4b38      	ldr	r3, [pc, #224]	@ (8005ce0 <low_level_init+0x120>)
 8005c00:	4a3a      	ldr	r2, [pc, #232]	@ (8005cec <low_level_init+0x12c>)
 8005c02:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005c04:	4b36      	ldr	r3, [pc, #216]	@ (8005ce0 <low_level_init+0x120>)
 8005c06:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8005c0a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005c0c:	4834      	ldr	r0, [pc, #208]	@ (8005ce0 <low_level_init+0x120>)
 8005c0e:	f7fb fcf3 	bl	80015f8 <HAL_ETH_Init>
 8005c12:	4603      	mov	r3, r0
 8005c14:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005c16:	2238      	movs	r2, #56	@ 0x38
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4835      	ldr	r0, [pc, #212]	@ (8005cf0 <low_level_init+0x130>)
 8005c1c:	f00a fc00 	bl	8010420 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005c20:	4b33      	ldr	r3, [pc, #204]	@ (8005cf0 <low_level_init+0x130>)
 8005c22:	2221      	movs	r2, #33	@ 0x21
 8005c24:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005c26:	4b32      	ldr	r3, [pc, #200]	@ (8005cf0 <low_level_init+0x130>)
 8005c28:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005c2c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005c2e:	4b30      	ldr	r3, [pc, #192]	@ (8005cf0 <low_level_init+0x130>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005c34:	482f      	ldr	r0, [pc, #188]	@ (8005cf4 <low_level_init+0x134>)
 8005c36:	f001 f849 	bl	8006ccc <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2206      	movs	r2, #6
 8005c3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005c42:	4b27      	ldr	r3, [pc, #156]	@ (8005ce0 <low_level_init+0x120>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	781a      	ldrb	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005c4e:	4b24      	ldr	r3, [pc, #144]	@ (8005ce0 <low_level_init+0x120>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	785a      	ldrb	r2, [r3, #1]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005c5a:	4b21      	ldr	r3, [pc, #132]	@ (8005ce0 <low_level_init+0x120>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	789a      	ldrb	r2, [r3, #2]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005c66:	4b1e      	ldr	r3, [pc, #120]	@ (8005ce0 <low_level_init+0x120>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	78da      	ldrb	r2, [r3, #3]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005c72:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce0 <low_level_init+0x120>)
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	791a      	ldrb	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005c7e:	4b18      	ldr	r3, [pc, #96]	@ (8005ce0 <low_level_init+0x120>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	795a      	ldrb	r2, [r3, #5]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005c90:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005c98:	f043 030a 	orr.w	r3, r3, #10
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005ca4:	4914      	ldr	r1, [pc, #80]	@ (8005cf8 <low_level_init+0x138>)
 8005ca6:	4815      	ldr	r0, [pc, #84]	@ (8005cfc <low_level_init+0x13c>)
 8005ca8:	f7fb f8c7 	bl	8000e3a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8005cac:	4813      	ldr	r0, [pc, #76]	@ (8005cfc <low_level_init+0x13c>)
 8005cae:	f7fb f8f6 	bl	8000e9e <LAN8742_Init>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d006      	beq.n	8005cc6 <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fbd3 	bl	8007464 <netif_set_link_down>
    netif_set_down(netif);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f001 fb6a 	bl	8007398 <netif_set_down>
 8005cc4:	e008      	b.n	8005cd8 <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fa3f 	bl	8006150 <ethernet_link_check_state>
 8005cd2:	e001      	b.n	8005cd8 <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 8005cd4:	f7fa feb7 	bl	8000a46 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	240001b4 	.word	0x240001b4
 8005ce4:	40028000 	.word	0x40028000
 8005ce8:	30000080 	.word	0x30000080
 8005cec:	30000000 	.word	0x30000000
 8005cf0:	24000264 	.word	0x24000264
 8005cf4:	08013ab4 	.word	0x08013ab4
 8005cf8:	24000014 	.word	0x24000014
 8005cfc:	2400029c 	.word	0x2400029c

08005d00 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b092      	sub	sp, #72	@ 0x48
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	2230      	movs	r2, #48	@ 0x30
 8005d1e:	2100      	movs	r1, #0
 8005d20:	4618      	mov	r0, r3
 8005d22:	f00a fb7d 	bl	8010420 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005d26:	f107 030c 	add.w	r3, r7, #12
 8005d2a:	2230      	movs	r2, #48	@ 0x30
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f00a fb76 	bl	8010420 <memset>

  for(q = p; q != NULL; q = q->next)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d38:	e045      	b.n	8005dc6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d902      	bls.n	8005d46 <low_level_output+0x46>
      return ERR_IF;
 8005d40:	f06f 030b 	mvn.w	r3, #11
 8005d44:	e055      	b.n	8005df2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8005d46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d48:	6859      	ldr	r1, [r3, #4]
 8005d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	005b      	lsls	r3, r3, #1
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	3348      	adds	r3, #72	@ 0x48
 8005d56:	443b      	add	r3, r7
 8005d58:	3b3c      	subs	r3, #60	@ 0x3c
 8005d5a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d5e:	895b      	ldrh	r3, [r3, #10]
 8005d60:	4619      	mov	r1, r3
 8005d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d64:	4613      	mov	r3, r2
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	3348      	adds	r3, #72	@ 0x48
 8005d6e:	443b      	add	r3, r7
 8005d70:	3b38      	subs	r3, #56	@ 0x38
 8005d72:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d011      	beq.n	8005d9e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d7c:	1e5a      	subs	r2, r3, #1
 8005d7e:	f107 000c 	add.w	r0, r7, #12
 8005d82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d84:	460b      	mov	r3, r1
 8005d86:	005b      	lsls	r3, r3, #1
 8005d88:	440b      	add	r3, r1
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	18c1      	adds	r1, r0, r3
 8005d8e:	4613      	mov	r3, r2
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	4413      	add	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	3348      	adds	r3, #72	@ 0x48
 8005d98:	443b      	add	r3, r7
 8005d9a:	3b34      	subs	r3, #52	@ 0x34
 8005d9c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005d9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d109      	bne.n	8005dba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da8:	4613      	mov	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	3348      	adds	r3, #72	@ 0x48
 8005db2:	443b      	add	r3, r7
 8005db4:	3b34      	subs	r3, #52	@ 0x34
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8005dc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1b6      	bne.n	8005d3a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	891b      	ldrh	r3, [r3, #8]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <low_level_output+0xfc>)
 8005dd4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005dd6:	4a09      	ldr	r2, [pc, #36]	@ (8005dfc <low_level_output+0xfc>)
 8005dd8:	f107 030c 	add.w	r3, r7, #12
 8005ddc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005dde:	4a07      	ldr	r2, [pc, #28]	@ (8005dfc <low_level_output+0xfc>)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005de4:	2214      	movs	r2, #20
 8005de6:	4905      	ldr	r1, [pc, #20]	@ (8005dfc <low_level_output+0xfc>)
 8005de8:	4805      	ldr	r0, [pc, #20]	@ (8005e00 <low_level_output+0x100>)
 8005dea:	f7fb fdb5 	bl	8001958 <HAL_ETH_Transmit>

  return errval;
 8005dee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3748      	adds	r7, #72	@ 0x48
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	24000264 	.word	0x24000264
 8005e00:	240001b4 	.word	0x240001b4

08005e04 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005e10:	4b07      	ldr	r3, [pc, #28]	@ (8005e30 <low_level_input+0x2c>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4805      	ldr	r0, [pc, #20]	@ (8005e34 <low_level_input+0x30>)
 8005e20:	f7fb fe31 	bl	8001a86 <HAL_ETH_ReadData>
  }

  return p;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	240001b0 	.word	0x240001b0
 8005e34:	240001b4 	.word	0x240001b4

08005e38 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff ffdd 	bl	8005e04 <low_level_input>
 8005e4a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	68f8      	ldr	r0, [r7, #12]
 8005e5a:	4798      	blx	r3
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 feae 	bl	8007bc4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1ea      	bne.n	8005e44 <ethernetif_input+0xc>
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <ethernetif_init+0x1c>
 8005e86:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec0 <ethernetif_init+0x48>)
 8005e88:	f240 128b 	movw	r2, #395	@ 0x18b
 8005e8c:	490d      	ldr	r1, [pc, #52]	@ (8005ec4 <ethernetif_init+0x4c>)
 8005e8e:	480e      	ldr	r0, [pc, #56]	@ (8005ec8 <ethernetif_init+0x50>)
 8005e90:	f00a f96e 	bl	8010170 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2273      	movs	r2, #115	@ 0x73
 8005e98:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2274      	movs	r2, #116	@ 0x74
 8005ea0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a09      	ldr	r2, [pc, #36]	@ (8005ecc <ethernetif_init+0x54>)
 8005ea8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a08      	ldr	r2, [pc, #32]	@ (8005ed0 <ethernetif_init+0x58>)
 8005eae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff fe85 	bl	8005bc0 <low_level_init>

  return ERR_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	080110ac 	.word	0x080110ac
 8005ec4:	080110c8 	.word	0x080110c8
 8005ec8:	080110d8 	.word	0x080110d8
 8005ecc:	0800e231 	.word	0x0800e231
 8005ed0:	08005d01 	.word	0x08005d01

08005ed4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	4807      	ldr	r0, [pc, #28]	@ (8005f00 <pbuf_free_custom+0x2c>)
 8005ee4:	f000 ffd4 	bl	8006e90 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005ee8:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <pbuf_free_custom+0x30>)
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d102      	bne.n	8005ef6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005ef0:	4b04      	ldr	r3, [pc, #16]	@ (8005f04 <pbuf_free_custom+0x30>)
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
  }
}
 8005ef6:	bf00      	nop
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	08013ab4 	.word	0x08013ab4
 8005f04:	240001b0 	.word	0x240001b0

08005f08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f0c:	f7fb f9f8 	bl	8001300 <HAL_GetTick>
 8005f10:	4603      	mov	r3, r0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08e      	sub	sp, #56	@ 0x38
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a59      	ldr	r2, [pc, #356]	@ (800609c <HAL_ETH_MspInit+0x184>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	f040 80ab 	bne.w	8006092 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005f3c:	4b58      	ldr	r3, [pc, #352]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f42:	4a57      	ldr	r2, [pc, #348]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005f4c:	4b54      	ldr	r3, [pc, #336]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f56:	623b      	str	r3, [r7, #32]
 8005f58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8005f5a:	4b51      	ldr	r3, [pc, #324]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f60:	4a4f      	ldr	r2, [pc, #316]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8005f78:	4b49      	ldr	r3, [pc, #292]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f7e:	4a48      	ldr	r2, [pc, #288]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005f88:	4b45      	ldr	r3, [pc, #276]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f92:	61bb      	str	r3, [r7, #24]
 8005f94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f96:	4b42      	ldr	r3, [pc, #264]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f9c:	4a40      	ldr	r2, [pc, #256]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005fa6:	4b3e      	ldr	r3, [pc, #248]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	617b      	str	r3, [r7, #20]
 8005fb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fba:	4a39      	ldr	r2, [pc, #228]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005fbc:	f043 0301 	orr.w	r3, r3, #1
 8005fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005fc4:	4b36      	ldr	r3, [pc, #216]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	613b      	str	r3, [r7, #16]
 8005fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fd2:	4b33      	ldr	r3, [pc, #204]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fd8:	4a31      	ldr	r2, [pc, #196]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005fda:	f043 0302 	orr.w	r3, r3, #2
 8005fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8005ff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006000:	4b27      	ldr	r3, [pc, #156]	@ (80060a0 <HAL_ETH_MspInit+0x188>)
 8006002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600a:	60bb      	str	r3, [r7, #8]
 800600c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800600e:	2332      	movs	r3, #50	@ 0x32
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006012:	2302      	movs	r3, #2
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006016:	2300      	movs	r3, #0
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800601a:	2303      	movs	r3, #3
 800601c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800601e:	230b      	movs	r3, #11
 8006020:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006026:	4619      	mov	r1, r3
 8006028:	481e      	ldr	r0, [pc, #120]	@ (80060a4 <HAL_ETH_MspInit+0x18c>)
 800602a:	f7fc fecb 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800602e:	2386      	movs	r3, #134	@ 0x86
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006032:	2302      	movs	r3, #2
 8006034:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006036:	2300      	movs	r3, #0
 8006038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800603a:	2303      	movs	r3, #3
 800603c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800603e:	230b      	movs	r3, #11
 8006040:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006046:	4619      	mov	r1, r3
 8006048:	4817      	ldr	r0, [pc, #92]	@ (80060a8 <HAL_ETH_MspInit+0x190>)
 800604a:	f7fc febb 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800604e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006054:	2302      	movs	r3, #2
 8006056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006058:	2300      	movs	r3, #0
 800605a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800605c:	2303      	movs	r3, #3
 800605e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006060:	230b      	movs	r3, #11
 8006062:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006068:	4619      	mov	r1, r3
 800606a:	4810      	ldr	r0, [pc, #64]	@ (80060ac <HAL_ETH_MspInit+0x194>)
 800606c:	f7fc feaa 	bl	8002dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8006070:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006076:	2302      	movs	r3, #2
 8006078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	2300      	movs	r3, #0
 800607c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800607e:	2303      	movs	r3, #3
 8006080:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006082:	230b      	movs	r3, #11
 8006084:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800608a:	4619      	mov	r1, r3
 800608c:	4808      	ldr	r0, [pc, #32]	@ (80060b0 <HAL_ETH_MspInit+0x198>)
 800608e:	f7fc fe99 	bl	8002dc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006092:	bf00      	nop
 8006094:	3738      	adds	r7, #56	@ 0x38
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40028000 	.word	0x40028000
 80060a0:	58024400 	.word	0x58024400
 80060a4:	58020800 	.word	0x58020800
 80060a8:	58020000 	.word	0x58020000
 80060ac:	58020400 	.word	0x58020400
 80060b0:	58021800 	.word	0x58021800

080060b4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80060b8:	4802      	ldr	r0, [pc, #8]	@ (80060c4 <ETH_PHY_IO_Init+0x10>)
 80060ba:	f7fc f8b1 	bl	8002220 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	240001b4 	.word	0x240001b4

080060c8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  return 0;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	68f9      	ldr	r1, [r7, #12]
 80060ea:	4807      	ldr	r0, [pc, #28]	@ (8006108 <ETH_PHY_IO_ReadReg+0x30>)
 80060ec:	f7fb fe01 	bl	8001cf2 <HAL_ETH_ReadPHYRegister>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80060f6:	f04f 33ff 	mov.w	r3, #4294967295
 80060fa:	e000      	b.n	80060fe <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	240001b4 	.word	0x240001b4

0800610c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	4807      	ldr	r0, [pc, #28]	@ (800613c <ETH_PHY_IO_WriteReg+0x30>)
 8006120:	f7fb fe3c 	bl	8001d9c <HAL_ETH_WritePHYRegister>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295
 800612e:	e000      	b.n	8006132 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	240001b4 	.word	0x240001b4

08006140 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006144:	f7fb f8dc 	bl	8001300 <HAL_GetTick>
 8006148:	4603      	mov	r3, r0
}
 800614a:	4618      	mov	r0, r3
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b0a0      	sub	sp, #128	@ 0x80
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006158:	f107 030c 	add.w	r3, r7, #12
 800615c:	2264      	movs	r2, #100	@ 0x64
 800615e:	2100      	movs	r1, #0
 8006160:	4618      	mov	r0, r3
 8006162:	f00a f95d 	bl	8010420 <memset>
  int32_t PHYLinkState = 0;
 8006166:	2300      	movs	r3, #0
 8006168:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800616e:	2300      	movs	r3, #0
 8006170:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006172:	2300      	movs	r3, #0
 8006174:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006176:	483a      	ldr	r0, [pc, #232]	@ (8006260 <ethernet_link_check_state+0x110>)
 8006178:	f7fa fede 	bl	8000f38 <LAN8742_GetLinkState>
 800617c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006184:	089b      	lsrs	r3, r3, #2
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <ethernet_link_check_state+0x5a>
 8006190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006192:	2b01      	cmp	r3, #1
 8006194:	dc09      	bgt.n	80061aa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006196:	4833      	ldr	r0, [pc, #204]	@ (8006264 <ethernet_link_check_state+0x114>)
 8006198:	f7fb fb8e 	bl	80018b8 <HAL_ETH_Stop>
    netif_set_down(netif);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f001 f8fb 	bl	8007398 <netif_set_down>
    netif_set_link_down(netif);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f001 f95e 	bl	8007464 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80061a8:	e055      	b.n	8006256 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d14e      	bne.n	8006256 <ethernet_link_check_state+0x106>
 80061b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	dd4b      	ble.n	8006256 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80061be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061c0:	3b02      	subs	r3, #2
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d82a      	bhi.n	800621c <ethernet_link_check_state+0xcc>
 80061c6:	a201      	add	r2, pc, #4	@ (adr r2, 80061cc <ethernet_link_check_state+0x7c>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	080061dd 	.word	0x080061dd
 80061d0:	080061ef 	.word	0x080061ef
 80061d4:	080061ff 	.word	0x080061ff
 80061d8:	0800620f 	.word	0x0800620f
      duplex = ETH_FULLDUPLEX_MODE;
 80061dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80061e0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80061e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80061e6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80061e8:	2301      	movs	r3, #1
 80061ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80061ec:	e017      	b.n	800621e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80061ee:	2300      	movs	r3, #0
 80061f0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80061f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80061f6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80061f8:	2301      	movs	r3, #1
 80061fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80061fc:	e00f      	b.n	800621e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80061fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006202:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006204:	2300      	movs	r3, #0
 8006206:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006208:	2301      	movs	r3, #1
 800620a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800620c:	e007      	b.n	800621e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800620e:	2300      	movs	r3, #0
 8006210:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006212:	2300      	movs	r3, #0
 8006214:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006216:	2301      	movs	r3, #1
 8006218:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800621a:	e000      	b.n	800621e <ethernet_link_check_state+0xce>
      break;
 800621c:	bf00      	nop
    if(linkchanged)
 800621e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006220:	2b00      	cmp	r3, #0
 8006222:	d018      	beq.n	8006256 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	4619      	mov	r1, r3
 800622a:	480e      	ldr	r0, [pc, #56]	@ (8006264 <ethernet_link_check_state+0x114>)
 800622c:	f7fb fe0a 	bl	8001e44 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006236:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	4619      	mov	r1, r3
 800623e:	4809      	ldr	r0, [pc, #36]	@ (8006264 <ethernet_link_check_state+0x114>)
 8006240:	f7fb ffd4 	bl	80021ec <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006244:	4807      	ldr	r0, [pc, #28]	@ (8006264 <ethernet_link_check_state+0x114>)
 8006246:	f7fb fad5 	bl	80017f4 <HAL_ETH_Start>
      netif_set_up(netif);
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 f838 	bl	80072c0 <netif_set_up>
      netif_set_link_up(netif);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f001 f8d3 	bl	80073fc <netif_set_link_up>
}
 8006256:	bf00      	nop
 8006258:	3780      	adds	r7, #128	@ 0x80
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	2400029c 	.word	0x2400029c
 8006264:	240001b4 	.word	0x240001b4

08006268 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af02      	add	r7, sp, #8
 800626e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006270:	4812      	ldr	r0, [pc, #72]	@ (80062bc <HAL_ETH_RxAllocateCallback+0x54>)
 8006272:	f000 fd9f 	bl	8006db4 <memp_malloc_pool>
 8006276:	60f8      	str	r0, [r7, #12]
  if (p)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d014      	beq.n	80062a8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f103 0220 	add.w	r2, r3, #32
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a0d      	ldr	r2, [pc, #52]	@ (80062c0 <HAL_ETH_RxAllocateCallback+0x58>)
 800628c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006296:	9201      	str	r2, [sp, #4]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2241      	movs	r2, #65	@ 0x41
 800629e:	2100      	movs	r1, #0
 80062a0:	2000      	movs	r0, #0
 80062a2:	f001 fad5 	bl	8007850 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80062a6:	e005      	b.n	80062b4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	08013ab4 	.word	0x08013ab4
 80062c0:	08005ed5 	.word	0x08005ed5
 80062c4:	240001b0 	.word	0x240001b0

080062c8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b08d      	sub	sp, #52	@ 0x34
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3b20      	subs	r3, #32
 80062e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80062ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f0:	2200      	movs	r2, #0
 80062f2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80062f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80062fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d103      	bne.n	800630a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006306:	601a      	str	r2, [r3, #0]
 8006308:	e003      	b.n	8006312 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800630a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006310:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006316:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800631e:	e009      	b.n	8006334 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	891a      	ldrh	r2, [r3, #8]
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	4413      	add	r3, r2
 8006328:	b29a      	uxth	r2, r3
 800632a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800632e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f2      	bne.n	8006320 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800633a:	887b      	ldrh	r3, [r7, #2]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	623a      	str	r2, [r7, #32]
 8006340:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	2b00      	cmp	r3, #0
 8006346:	dd1d      	ble.n	8006384 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	f003 021f 	and.w	r2, r3, #31
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006358:	f3bf 8f4f 	dsb	sy
}
 800635c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800635e:	4a0d      	ldr	r2, [pc, #52]	@ (8006394 <HAL_ETH_RxLinkCallback+0xcc>)
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	3320      	adds	r3, #32
 800636a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	3b20      	subs	r3, #32
 8006370:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	dcf2      	bgt.n	800635e <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8006378:	f3bf 8f4f 	dsb	sy
}
 800637c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800637e:	f3bf 8f6f 	isb	sy
}
 8006382:	bf00      	nop
}
 8006384:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006386:	bf00      	nop
 8006388:	3734      	adds	r7, #52	@ 0x34
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	e000ed00 	.word	0xe000ed00

08006398 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	b21a      	sxth	r2, r3
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	0a1b      	lsrs	r3, r3, #8
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	b29b      	uxth	r3, r3
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	061a      	lsls	r2, r3, #24
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063d6:	431a      	orrs	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	0e1b      	lsrs	r3, r3, #24
 80063e6:	4313      	orrs	r3, r2
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b089      	sub	sp, #36	@ 0x24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00d      	beq.n	8006434 <lwip_standard_chksum+0x40>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	dd0a      	ble.n	8006434 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	1c53      	adds	r3, r2, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	f107 030e 	add.w	r3, r7, #14
 8006428:	3301      	adds	r3, #1
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	701a      	strb	r2, [r3, #0]
    len--;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	3b01      	subs	r3, #1
 8006432:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006438:	e00a      	b.n	8006450 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	1c9a      	adds	r2, r3, #2
 800643e:	61ba      	str	r2, [r7, #24]
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	4413      	add	r3, r2
 8006448:	617b      	str	r3, [r7, #20]
    len -= 2;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	3b02      	subs	r3, #2
 800644e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2b01      	cmp	r3, #1
 8006454:	dcf1      	bgt.n	800643a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dd04      	ble.n	8006466 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800645c:	f107 030e 	add.w	r3, r7, #14
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	7812      	ldrb	r2, [r2, #0]
 8006464:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8006466:	89fb      	ldrh	r3, [r7, #14]
 8006468:	461a      	mov	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	4413      	add	r3, r2
 800646e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	0c1a      	lsrs	r2, r3, #16
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	b29b      	uxth	r3, r3
 8006478:	4413      	add	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	0c1a      	lsrs	r2, r3, #16
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	b29b      	uxth	r3, r3
 8006484:	4413      	add	r3, r2
 8006486:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	b29a      	uxth	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	0a1b      	lsrs	r3, r3, #8
 8006498:	b2db      	uxtb	r3, r3
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	b29b      	uxth	r3, r3
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3724      	adds	r7, #36	@ 0x24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80064ba:	887b      	ldrh	r3, [r7, #2]
 80064bc:	4619      	mov	r1, r3
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7ff ff98 	bl	80063f4 <lwip_standard_chksum>
 80064c4:	4603      	mov	r3, r0
 80064c6:	43db      	mvns	r3, r3
 80064c8:	b29b      	uxth	r3, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	613b      	str	r3, [r7, #16]
 80064e6:	e02b      	b.n	8006540 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	685a      	ldr	r2, [r3, #4]
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	895b      	ldrh	r3, [r3, #10]
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f7ff ff7e 	bl	80063f4 <lwip_standard_chksum>
 80064f8:	4603      	mov	r3, r0
 80064fa:	461a      	mov	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	4413      	add	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	0c1a      	lsrs	r2, r3, #16
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	b29b      	uxth	r3, r3
 800650a:	4413      	add	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	895b      	ldrh	r3, [r3, #10]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00e      	beq.n	800653a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	bf0c      	ite	eq
 8006522:	2301      	moveq	r3, #1
 8006524:	2300      	movne	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	b29a      	uxth	r2, r3
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1d0      	bne.n	80064e8 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	021b      	lsls	r3, r3, #8
 8006550:	b29a      	uxth	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	b2db      	uxtb	r3, r3
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	b29b      	uxth	r3, r3
 8006560:	43db      	mvns	r3, r3
 8006562:	b29b      	uxth	r3, r3
}
 8006564:	4618      	mov	r0, r3
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006576:	f000 f8d5 	bl	8006724 <mem_init>
  memp_init();
 800657a:	f000 fbd7 	bl	8006d2c <memp_init>
  pbuf_init();
  netif_init();
 800657e:	f000 fcd5 	bl	8006f2c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006582:	f007 f84f 	bl	800d624 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006586:	f001 fdab 	bl	80080e0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800658a:	f006 ffc1 	bl	800d510 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80065a2:	4b05      	ldr	r3, [pc, #20]	@ (80065b8 <ptr_to_mem+0x20>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	4413      	add	r3, r2
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	240002d4 	.word	0x240002d4

080065bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80065c4:	4b05      	ldr	r3, [pc, #20]	@ (80065dc <mem_to_ptr+0x20>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	b29b      	uxth	r3, r3
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	370c      	adds	r7, #12
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	240002d4 	.word	0x240002d4

080065e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80065e0:	b590      	push	{r4, r7, lr}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80065e8:	4b45      	ldr	r3, [pc, #276]	@ (8006700 <plug_holes+0x120>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d206      	bcs.n	8006600 <plug_holes+0x20>
 80065f2:	4b44      	ldr	r3, [pc, #272]	@ (8006704 <plug_holes+0x124>)
 80065f4:	f240 12df 	movw	r2, #479	@ 0x1df
 80065f8:	4943      	ldr	r1, [pc, #268]	@ (8006708 <plug_holes+0x128>)
 80065fa:	4844      	ldr	r0, [pc, #272]	@ (800670c <plug_holes+0x12c>)
 80065fc:	f009 fdb8 	bl	8010170 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006600:	4b43      	ldr	r3, [pc, #268]	@ (8006710 <plug_holes+0x130>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	429a      	cmp	r2, r3
 8006608:	d306      	bcc.n	8006618 <plug_holes+0x38>
 800660a:	4b3e      	ldr	r3, [pc, #248]	@ (8006704 <plug_holes+0x124>)
 800660c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006610:	4940      	ldr	r1, [pc, #256]	@ (8006714 <plug_holes+0x134>)
 8006612:	483e      	ldr	r0, [pc, #248]	@ (800670c <plug_holes+0x12c>)
 8006614:	f009 fdac 	bl	8010170 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	791b      	ldrb	r3, [r3, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d006      	beq.n	800662e <plug_holes+0x4e>
 8006620:	4b38      	ldr	r3, [pc, #224]	@ (8006704 <plug_holes+0x124>)
 8006622:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006626:	493c      	ldr	r1, [pc, #240]	@ (8006718 <plug_holes+0x138>)
 8006628:	4838      	ldr	r0, [pc, #224]	@ (800670c <plug_holes+0x12c>)
 800662a:	f009 fda1 	bl	8010170 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006636:	d906      	bls.n	8006646 <plug_holes+0x66>
 8006638:	4b32      	ldr	r3, [pc, #200]	@ (8006704 <plug_holes+0x124>)
 800663a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800663e:	4937      	ldr	r1, [pc, #220]	@ (800671c <plug_holes+0x13c>)
 8006640:	4832      	ldr	r0, [pc, #200]	@ (800670c <plug_holes+0x12c>)
 8006642:	f009 fd95 	bl	8010170 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff ffa4 	bl	8006598 <ptr_to_mem>
 8006650:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	429a      	cmp	r2, r3
 8006658:	d024      	beq.n	80066a4 <plug_holes+0xc4>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d120      	bne.n	80066a4 <plug_holes+0xc4>
 8006662:	4b2b      	ldr	r3, [pc, #172]	@ (8006710 <plug_holes+0x130>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	429a      	cmp	r2, r3
 800666a:	d01b      	beq.n	80066a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800666c:	4b2c      	ldr	r3, [pc, #176]	@ (8006720 <plug_holes+0x140>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	429a      	cmp	r2, r3
 8006674:	d102      	bne.n	800667c <plug_holes+0x9c>
      lfree = mem;
 8006676:	4a2a      	ldr	r2, [pc, #168]	@ (8006720 <plug_holes+0x140>)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	881a      	ldrh	r2, [r3, #0]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800668c:	d00a      	beq.n	80066a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff ff80 	bl	8006598 <ptr_to_mem>
 8006698:	4604      	mov	r4, r0
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff ff8e 	bl	80065bc <mem_to_ptr>
 80066a0:	4603      	mov	r3, r0
 80066a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	885b      	ldrh	r3, [r3, #2]
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ff75 	bl	8006598 <ptr_to_mem>
 80066ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d01f      	beq.n	80066f8 <plug_holes+0x118>
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	791b      	ldrb	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d11b      	bne.n	80066f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80066c0:	4b17      	ldr	r3, [pc, #92]	@ (8006720 <plug_holes+0x140>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d102      	bne.n	80066d0 <plug_holes+0xf0>
      lfree = pmem;
 80066ca:	4a15      	ldr	r2, [pc, #84]	@ (8006720 <plug_holes+0x140>)
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	881a      	ldrh	r2, [r3, #0]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066e0:	d00a      	beq.n	80066f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff ff56 	bl	8006598 <ptr_to_mem>
 80066ec:	4604      	mov	r4, r0
 80066ee:	68b8      	ldr	r0, [r7, #8]
 80066f0:	f7ff ff64 	bl	80065bc <mem_to_ptr>
 80066f4:	4603      	mov	r3, r0
 80066f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80066f8:	bf00      	nop
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd90      	pop	{r4, r7, pc}
 8006700:	240002d4 	.word	0x240002d4
 8006704:	08011100 	.word	0x08011100
 8006708:	08011130 	.word	0x08011130
 800670c:	08011148 	.word	0x08011148
 8006710:	240002d8 	.word	0x240002d8
 8006714:	08011170 	.word	0x08011170
 8006718:	0801118c 	.word	0x0801118c
 800671c:	080111a8 	.word	0x080111a8
 8006720:	240002dc 	.word	0x240002dc

08006724 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800672a:	4b16      	ldr	r3, [pc, #88]	@ (8006784 <mem_init+0x60>)
 800672c:	4a16      	ldr	r2, [pc, #88]	@ (8006788 <mem_init+0x64>)
 800672e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006730:	4b14      	ldr	r3, [pc, #80]	@ (8006784 <mem_init+0x60>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800673c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800674a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800674e:	f7ff ff23 	bl	8006598 <ptr_to_mem>
 8006752:	4603      	mov	r3, r0
 8006754:	4a0d      	ldr	r2, [pc, #52]	@ (800678c <mem_init+0x68>)
 8006756:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006758:	4b0c      	ldr	r3, [pc, #48]	@ (800678c <mem_init+0x68>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2201      	movs	r2, #1
 800675e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006760:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <mem_init+0x68>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006768:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800676a:	4b08      	ldr	r3, [pc, #32]	@ (800678c <mem_init+0x68>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006772:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006774:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <mem_init+0x60>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a05      	ldr	r2, [pc, #20]	@ (8006790 <mem_init+0x6c>)
 800677a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800677c:	bf00      	nop
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	240002d4 	.word	0x240002d4
 8006788:	30002000 	.word	0x30002000
 800678c:	240002d8 	.word	0x240002d8
 8006790:	240002dc 	.word	0x240002dc

08006794 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f7ff ff0d 	bl	80065bc <mem_to_ptr>
 80067a2:	4603      	mov	r3, r0
 80067a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff fef4 	bl	8006598 <ptr_to_mem>
 80067b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	885b      	ldrh	r3, [r3, #2]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff feee 	bl	8006598 <ptr_to_mem>
 80067bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	881b      	ldrh	r3, [r3, #0]
 80067c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067c6:	d818      	bhi.n	80067fa <mem_link_valid+0x66>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	885b      	ldrh	r3, [r3, #2]
 80067cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067d0:	d813      	bhi.n	80067fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80067d6:	8afa      	ldrh	r2, [r7, #22]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d004      	beq.n	80067e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	8afa      	ldrh	r2, [r7, #22]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d109      	bne.n	80067fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067e6:	4b08      	ldr	r3, [pc, #32]	@ (8006808 <mem_link_valid+0x74>)
 80067e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d006      	beq.n	80067fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	885b      	ldrh	r3, [r3, #2]
 80067f4:	8afa      	ldrh	r2, [r7, #22]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d001      	beq.n	80067fe <mem_link_valid+0x6a>
    return 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <mem_link_valid+0x6c>
  }
  return 1;
 80067fe:	2301      	movs	r3, #1
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	240002d8 	.word	0x240002d8

0800680c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d04c      	beq.n	80068b4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f003 0303 	and.w	r3, r3, #3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d007      	beq.n	8006834 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8006824:	4b25      	ldr	r3, [pc, #148]	@ (80068bc <mem_free+0xb0>)
 8006826:	f240 2273 	movw	r2, #627	@ 0x273
 800682a:	4925      	ldr	r1, [pc, #148]	@ (80068c0 <mem_free+0xb4>)
 800682c:	4825      	ldr	r0, [pc, #148]	@ (80068c4 <mem_free+0xb8>)
 800682e:	f009 fc9f 	bl	8010170 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006832:	e040      	b.n	80068b6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3b08      	subs	r3, #8
 8006838:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800683a:	4b23      	ldr	r3, [pc, #140]	@ (80068c8 <mem_free+0xbc>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	429a      	cmp	r2, r3
 8006842:	d306      	bcc.n	8006852 <mem_free+0x46>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f103 020c 	add.w	r2, r3, #12
 800684a:	4b20      	ldr	r3, [pc, #128]	@ (80068cc <mem_free+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d907      	bls.n	8006862 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8006852:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <mem_free+0xb0>)
 8006854:	f240 227f 	movw	r2, #639	@ 0x27f
 8006858:	491d      	ldr	r1, [pc, #116]	@ (80068d0 <mem_free+0xc4>)
 800685a:	481a      	ldr	r0, [pc, #104]	@ (80068c4 <mem_free+0xb8>)
 800685c:	f009 fc88 	bl	8010170 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006860:	e029      	b.n	80068b6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	791b      	ldrb	r3, [r3, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d107      	bne.n	800687a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800686a:	4b14      	ldr	r3, [pc, #80]	@ (80068bc <mem_free+0xb0>)
 800686c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8006870:	4918      	ldr	r1, [pc, #96]	@ (80068d4 <mem_free+0xc8>)
 8006872:	4814      	ldr	r0, [pc, #80]	@ (80068c4 <mem_free+0xb8>)
 8006874:	f009 fc7c 	bl	8010170 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006878:	e01d      	b.n	80068b6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800687a:	68f8      	ldr	r0, [r7, #12]
 800687c:	f7ff ff8a 	bl	8006794 <mem_link_valid>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d107      	bne.n	8006896 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <mem_free+0xb0>)
 8006888:	f240 2295 	movw	r2, #661	@ 0x295
 800688c:	4912      	ldr	r1, [pc, #72]	@ (80068d8 <mem_free+0xcc>)
 800688e:	480d      	ldr	r0, [pc, #52]	@ (80068c4 <mem_free+0xb8>)
 8006890:	f009 fc6e 	bl	8010170 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8006894:	e00f      	b.n	80068b6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800689c:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <mem_free+0xd0>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d202      	bcs.n	80068ac <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80068a6:	4a0d      	ldr	r2, [pc, #52]	@ (80068dc <mem_free+0xd0>)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f7ff fe97 	bl	80065e0 <plug_holes>
 80068b2:	e000      	b.n	80068b6 <mem_free+0xaa>
    return;
 80068b4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	08011100 	.word	0x08011100
 80068c0:	080111d4 	.word	0x080111d4
 80068c4:	08011148 	.word	0x08011148
 80068c8:	240002d4 	.word	0x240002d4
 80068cc:	240002d8 	.word	0x240002d8
 80068d0:	080111f8 	.word	0x080111f8
 80068d4:	08011214 	.word	0x08011214
 80068d8:	0801123c 	.word	0x0801123c
 80068dc:	240002dc 	.word	0x240002dc

080068e0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b088      	sub	sp, #32
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	3303      	adds	r3, #3
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	f023 0303 	bic.w	r3, r3, #3
 80068f6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80068f8:	8bfb      	ldrh	r3, [r7, #30]
 80068fa:	2b0b      	cmp	r3, #11
 80068fc:	d801      	bhi.n	8006902 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80068fe:	230c      	movs	r3, #12
 8006900:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8006902:	8bfb      	ldrh	r3, [r7, #30]
 8006904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006908:	d803      	bhi.n	8006912 <mem_trim+0x32>
 800690a:	8bfa      	ldrh	r2, [r7, #30]
 800690c:	887b      	ldrh	r3, [r7, #2]
 800690e:	429a      	cmp	r2, r3
 8006910:	d201      	bcs.n	8006916 <mem_trim+0x36>
    return NULL;
 8006912:	2300      	movs	r3, #0
 8006914:	e0cc      	b.n	8006ab0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006916:	4b68      	ldr	r3, [pc, #416]	@ (8006ab8 <mem_trim+0x1d8>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d304      	bcc.n	800692a <mem_trim+0x4a>
 8006920:	4b66      	ldr	r3, [pc, #408]	@ (8006abc <mem_trim+0x1dc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	429a      	cmp	r2, r3
 8006928:	d306      	bcc.n	8006938 <mem_trim+0x58>
 800692a:	4b65      	ldr	r3, [pc, #404]	@ (8006ac0 <mem_trim+0x1e0>)
 800692c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8006930:	4964      	ldr	r1, [pc, #400]	@ (8006ac4 <mem_trim+0x1e4>)
 8006932:	4865      	ldr	r0, [pc, #404]	@ (8006ac8 <mem_trim+0x1e8>)
 8006934:	f009 fc1c 	bl	8010170 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006938:	4b5f      	ldr	r3, [pc, #380]	@ (8006ab8 <mem_trim+0x1d8>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	429a      	cmp	r2, r3
 8006940:	d304      	bcc.n	800694c <mem_trim+0x6c>
 8006942:	4b5e      	ldr	r3, [pc, #376]	@ (8006abc <mem_trim+0x1dc>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	429a      	cmp	r2, r3
 800694a:	d301      	bcc.n	8006950 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	e0af      	b.n	8006ab0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	3b08      	subs	r3, #8
 8006954:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8006956:	69b8      	ldr	r0, [r7, #24]
 8006958:	f7ff fe30 	bl	80065bc <mem_to_ptr>
 800695c:	4603      	mov	r3, r0
 800695e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	881a      	ldrh	r2, [r3, #0]
 8006964:	8afb      	ldrh	r3, [r7, #22]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b08      	subs	r3, #8
 800696c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800696e:	8bfa      	ldrh	r2, [r7, #30]
 8006970:	8abb      	ldrh	r3, [r7, #20]
 8006972:	429a      	cmp	r2, r3
 8006974:	d906      	bls.n	8006984 <mem_trim+0xa4>
 8006976:	4b52      	ldr	r3, [pc, #328]	@ (8006ac0 <mem_trim+0x1e0>)
 8006978:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800697c:	4953      	ldr	r1, [pc, #332]	@ (8006acc <mem_trim+0x1ec>)
 800697e:	4852      	ldr	r0, [pc, #328]	@ (8006ac8 <mem_trim+0x1e8>)
 8006980:	f009 fbf6 	bl	8010170 <iprintf>
  if (newsize > size) {
 8006984:	8bfa      	ldrh	r2, [r7, #30]
 8006986:	8abb      	ldrh	r3, [r7, #20]
 8006988:	429a      	cmp	r2, r3
 800698a:	d901      	bls.n	8006990 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	e08f      	b.n	8006ab0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8006990:	8bfa      	ldrh	r2, [r7, #30]
 8006992:	8abb      	ldrh	r3, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d101      	bne.n	800699c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	e089      	b.n	8006ab0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f7ff fdf9 	bl	8006598 <ptr_to_mem>
 80069a6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	791b      	ldrb	r3, [r3, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d13f      	bne.n	8006a30 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b8:	d106      	bne.n	80069c8 <mem_trim+0xe8>
 80069ba:	4b41      	ldr	r3, [pc, #260]	@ (8006ac0 <mem_trim+0x1e0>)
 80069bc:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80069c0:	4943      	ldr	r1, [pc, #268]	@ (8006ad0 <mem_trim+0x1f0>)
 80069c2:	4841      	ldr	r0, [pc, #260]	@ (8006ac8 <mem_trim+0x1e8>)
 80069c4:	f009 fbd4 	bl	8010170 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80069ce:	8afa      	ldrh	r2, [r7, #22]
 80069d0:	8bfb      	ldrh	r3, [r7, #30]
 80069d2:	4413      	add	r3, r2
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	3308      	adds	r3, #8
 80069d8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80069da:	4b3e      	ldr	r3, [pc, #248]	@ (8006ad4 <mem_trim+0x1f4>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d106      	bne.n	80069f2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fdd6 	bl	8006598 <ptr_to_mem>
 80069ec:	4603      	mov	r3, r0
 80069ee:	4a39      	ldr	r2, [pc, #228]	@ (8006ad4 <mem_trim+0x1f4>)
 80069f0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80069f2:	89fb      	ldrh	r3, [r7, #14]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fdcf 	bl	8006598 <ptr_to_mem>
 80069fa:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2200      	movs	r2, #0
 8006a00:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	89ba      	ldrh	r2, [r7, #12]
 8006a06:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	8afa      	ldrh	r2, [r7, #22]
 8006a0c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	89fa      	ldrh	r2, [r7, #14]
 8006a12:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a1c:	d047      	beq.n	8006aae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fdb8 	bl	8006598 <ptr_to_mem>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	89fb      	ldrh	r3, [r7, #14]
 8006a2c:	8053      	strh	r3, [r2, #2]
 8006a2e:	e03e      	b.n	8006aae <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006a30:	8bfb      	ldrh	r3, [r7, #30]
 8006a32:	f103 0214 	add.w	r2, r3, #20
 8006a36:	8abb      	ldrh	r3, [r7, #20]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d838      	bhi.n	8006aae <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8006a3c:	8afa      	ldrh	r2, [r7, #22]
 8006a3e:	8bfb      	ldrh	r3, [r7, #30]
 8006a40:	4413      	add	r3, r2
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	3308      	adds	r3, #8
 8006a46:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a50:	d106      	bne.n	8006a60 <mem_trim+0x180>
 8006a52:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac0 <mem_trim+0x1e0>)
 8006a54:	f240 3216 	movw	r2, #790	@ 0x316
 8006a58:	491d      	ldr	r1, [pc, #116]	@ (8006ad0 <mem_trim+0x1f0>)
 8006a5a:	481b      	ldr	r0, [pc, #108]	@ (8006ac8 <mem_trim+0x1e8>)
 8006a5c:	f009 fb88 	bl	8010170 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8006a60:	89fb      	ldrh	r3, [r7, #14]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7ff fd98 	bl	8006598 <ptr_to_mem>
 8006a68:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8006a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ad4 <mem_trim+0x1f4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d202      	bcs.n	8006a7a <mem_trim+0x19a>
      lfree = mem2;
 8006a74:	4a17      	ldr	r2, [pc, #92]	@ (8006ad4 <mem_trim+0x1f4>)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	881a      	ldrh	r2, [r3, #0]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	8afa      	ldrh	r2, [r7, #22]
 8006a8c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	89fa      	ldrh	r2, [r7, #14]
 8006a92:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a9c:	d007      	beq.n	8006aae <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fd78 	bl	8006598 <ptr_to_mem>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8006aae:	687b      	ldr	r3, [r7, #4]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3720      	adds	r7, #32
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	240002d4 	.word	0x240002d4
 8006abc:	240002d8 	.word	0x240002d8
 8006ac0:	08011100 	.word	0x08011100
 8006ac4:	08011270 	.word	0x08011270
 8006ac8:	08011148 	.word	0x08011148
 8006acc:	08011288 	.word	0x08011288
 8006ad0:	080112a8 	.word	0x080112a8
 8006ad4:	240002dc 	.word	0x240002dc

08006ad8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b088      	sub	sp, #32
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <mem_malloc+0x14>
    return NULL;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e0d9      	b.n	8006ca0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	3303      	adds	r3, #3
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	f023 0303 	bic.w	r3, r3, #3
 8006af6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8006af8:	8bbb      	ldrh	r3, [r7, #28]
 8006afa:	2b0b      	cmp	r3, #11
 8006afc:	d801      	bhi.n	8006b02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8006afe:	230c      	movs	r3, #12
 8006b00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8006b02:	8bbb      	ldrh	r3, [r7, #28]
 8006b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b08:	d803      	bhi.n	8006b12 <mem_malloc+0x3a>
 8006b0a:	8bba      	ldrh	r2, [r7, #28]
 8006b0c:	88fb      	ldrh	r3, [r7, #6]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d201      	bcs.n	8006b16 <mem_malloc+0x3e>
    return NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	e0c4      	b.n	8006ca0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006b16:	4b64      	ldr	r3, [pc, #400]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fd4e 	bl	80065bc <mem_to_ptr>
 8006b20:	4603      	mov	r3, r0
 8006b22:	83fb      	strh	r3, [r7, #30]
 8006b24:	e0b4      	b.n	8006c90 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8006b26:	8bfb      	ldrh	r3, [r7, #30]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fd35 	bl	8006598 <ptr_to_mem>
 8006b2e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	791b      	ldrb	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f040 80a4 	bne.w	8006c82 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	8bfb      	ldrh	r3, [r7, #30]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f1a3 0208 	sub.w	r2, r3, #8
 8006b48:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	f0c0 8099 	bcc.w	8006c82 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	8bfb      	ldrh	r3, [r7, #30]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f1a3 0208 	sub.w	r2, r3, #8
 8006b5e:	8bbb      	ldrh	r3, [r7, #28]
 8006b60:	3314      	adds	r3, #20
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d333      	bcc.n	8006bce <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8006b66:	8bfa      	ldrh	r2, [r7, #30]
 8006b68:	8bbb      	ldrh	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3308      	adds	r3, #8
 8006b70:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8006b72:	8a7b      	ldrh	r3, [r7, #18]
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b78:	d106      	bne.n	8006b88 <mem_malloc+0xb0>
 8006b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8006cac <mem_malloc+0x1d4>)
 8006b7c:	f240 3287 	movw	r2, #903	@ 0x387
 8006b80:	494b      	ldr	r1, [pc, #300]	@ (8006cb0 <mem_malloc+0x1d8>)
 8006b82:	484c      	ldr	r0, [pc, #304]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006b84:	f009 faf4 	bl	8010170 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8006b88:	8a7b      	ldrh	r3, [r7, #18]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7ff fd04 	bl	8006598 <ptr_to_mem>
 8006b90:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2200      	movs	r2, #0
 8006b96:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	881a      	ldrh	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8bfa      	ldrh	r2, [r7, #30]
 8006ba4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	8a7a      	ldrh	r2, [r7, #18]
 8006baa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bba:	d00b      	beq.n	8006bd4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7ff fce9 	bl	8006598 <ptr_to_mem>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	8a7b      	ldrh	r3, [r7, #18]
 8006bca:	8053      	strh	r3, [r2, #2]
 8006bcc:	e002      	b.n	8006bd4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8006bd4:	4b34      	ldr	r3, [pc, #208]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	429a      	cmp	r2, r3
 8006bdc:	d127      	bne.n	8006c2e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8006bde:	4b32      	ldr	r3, [pc, #200]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8006be4:	e005      	b.n	8006bf2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff fcd4 	bl	8006598 <ptr_to_mem>
 8006bf0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <mem_malloc+0x12c>
 8006bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8006cb8 <mem_malloc+0x1e0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d1f0      	bne.n	8006be6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8006c04:	4a28      	ldr	r2, [pc, #160]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006c0a:	4b27      	ldr	r3, [pc, #156]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8006cb8 <mem_malloc+0x1e0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d00b      	beq.n	8006c2e <mem_malloc+0x156>
 8006c16:	4b24      	ldr	r3, [pc, #144]	@ (8006ca8 <mem_malloc+0x1d0>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	791b      	ldrb	r3, [r3, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d006      	beq.n	8006c2e <mem_malloc+0x156>
 8006c20:	4b22      	ldr	r3, [pc, #136]	@ (8006cac <mem_malloc+0x1d4>)
 8006c22:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8006c26:	4925      	ldr	r1, [pc, #148]	@ (8006cbc <mem_malloc+0x1e4>)
 8006c28:	4822      	ldr	r0, [pc, #136]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c2a:	f009 faa1 	bl	8010170 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006c2e:	8bba      	ldrh	r2, [r7, #28]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	4413      	add	r3, r2
 8006c34:	3308      	adds	r3, #8
 8006c36:	4a20      	ldr	r2, [pc, #128]	@ (8006cb8 <mem_malloc+0x1e0>)
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d906      	bls.n	8006c4c <mem_malloc+0x174>
 8006c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <mem_malloc+0x1d4>)
 8006c40:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8006c44:	491e      	ldr	r1, [pc, #120]	@ (8006cc0 <mem_malloc+0x1e8>)
 8006c46:	481b      	ldr	r0, [pc, #108]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c48:	f009 fa92 	bl	8010170 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d006      	beq.n	8006c64 <mem_malloc+0x18c>
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <mem_malloc+0x1d4>)
 8006c58:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8006c5c:	4919      	ldr	r1, [pc, #100]	@ (8006cc4 <mem_malloc+0x1ec>)
 8006c5e:	4815      	ldr	r0, [pc, #84]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c60:	f009 fa86 	bl	8010170 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d006      	beq.n	8006c7c <mem_malloc+0x1a4>
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006cac <mem_malloc+0x1d4>)
 8006c70:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8006c74:	4914      	ldr	r1, [pc, #80]	@ (8006cc8 <mem_malloc+0x1f0>)
 8006c76:	480f      	ldr	r0, [pc, #60]	@ (8006cb4 <mem_malloc+0x1dc>)
 8006c78:	f009 fa7a 	bl	8010170 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	3308      	adds	r3, #8
 8006c80:	e00e      	b.n	8006ca0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8006c82:	8bfb      	ldrh	r3, [r7, #30]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fc87 	bl	8006598 <ptr_to_mem>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8006c90:	8bfa      	ldrh	r2, [r7, #30]
 8006c92:	8bbb      	ldrh	r3, [r7, #28]
 8006c94:	f5c3 5300 	rsb	r3, r3, #8192	@ 0x2000
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	f4ff af44 	bcc.w	8006b26 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3720      	adds	r7, #32
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	240002dc 	.word	0x240002dc
 8006cac:	08011100 	.word	0x08011100
 8006cb0:	080112a8 	.word	0x080112a8
 8006cb4:	08011148 	.word	0x08011148
 8006cb8:	240002d8 	.word	0x240002d8
 8006cbc:	080112bc 	.word	0x080112bc
 8006cc0:	080112d8 	.word	0x080112d8
 8006cc4:	08011308 	.word	0x08011308
 8006cc8:	08011338 	.word	0x08011338

08006ccc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	3303      	adds	r3, #3
 8006ce2:	f023 0303 	bic.w	r3, r3, #3
 8006ce6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60fb      	str	r3, [r7, #12]
 8006cec:	e011      	b.n	8006d12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	881b      	ldrh	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	885b      	ldrh	r3, [r3, #2]
 8006d16:	461a      	mov	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	dbe7      	blt.n	8006cee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8006d1e:	bf00      	nop
 8006d20:	bf00      	nop
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d32:	2300      	movs	r3, #0
 8006d34:	80fb      	strh	r3, [r7, #6]
 8006d36:	e009      	b.n	8006d4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8006d38:	88fb      	ldrh	r3, [r7, #6]
 8006d3a:	4a08      	ldr	r2, [pc, #32]	@ (8006d5c <memp_init+0x30>)
 8006d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7ff ffc3 	bl	8006ccc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	80fb      	strh	r3, [r7, #6]
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d9f2      	bls.n	8006d38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	08013b2c 	.word	0x08013b2c

08006d60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d012      	beq.n	8006d9c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	6812      	ldr	r2, [r2, #0]
 8006d7e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d006      	beq.n	8006d98 <do_memp_malloc_pool+0x38>
 8006d8a:	4b07      	ldr	r3, [pc, #28]	@ (8006da8 <do_memp_malloc_pool+0x48>)
 8006d8c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8006d90:	4906      	ldr	r1, [pc, #24]	@ (8006dac <do_memp_malloc_pool+0x4c>)
 8006d92:	4807      	ldr	r0, [pc, #28]	@ (8006db0 <do_memp_malloc_pool+0x50>)
 8006d94:	f009 f9ec 	bl	8010170 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	e000      	b.n	8006d9e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	0801135c 	.word	0x0801135c
 8006dac:	0801138c 	.word	0x0801138c
 8006db0:	080113b0 	.word	0x080113b0

08006db4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <memp_malloc_pool+0x1c>
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <memp_malloc_pool+0x38>)
 8006dc4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8006dc8:	4909      	ldr	r1, [pc, #36]	@ (8006df0 <memp_malloc_pool+0x3c>)
 8006dca:	480a      	ldr	r0, [pc, #40]	@ (8006df4 <memp_malloc_pool+0x40>)
 8006dcc:	f009 f9d0 	bl	8010170 <iprintf>
  if (desc == NULL) {
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <memp_malloc_pool+0x26>
    return NULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e003      	b.n	8006de2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f7ff ffc0 	bl	8006d60 <do_memp_malloc_pool>
 8006de0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	0801135c 	.word	0x0801135c
 8006df0:	080113d8 	.word	0x080113d8
 8006df4:	080113b0 	.word	0x080113b0

08006df8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	4603      	mov	r3, r0
 8006e00:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d908      	bls.n	8006e1a <memp_malloc+0x22>
 8006e08:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <memp_malloc+0x3c>)
 8006e0a:	f240 1257 	movw	r2, #343	@ 0x157
 8006e0e:	490a      	ldr	r1, [pc, #40]	@ (8006e38 <memp_malloc+0x40>)
 8006e10:	480a      	ldr	r0, [pc, #40]	@ (8006e3c <memp_malloc+0x44>)
 8006e12:	f009 f9ad 	bl	8010170 <iprintf>
 8006e16:	2300      	movs	r3, #0
 8006e18:	e008      	b.n	8006e2c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006e1a:	79fb      	ldrb	r3, [r7, #7]
 8006e1c:	4a08      	ldr	r2, [pc, #32]	@ (8006e40 <memp_malloc+0x48>)
 8006e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff ff9c 	bl	8006d60 <do_memp_malloc_pool>
 8006e28:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	0801135c 	.word	0x0801135c
 8006e38:	080113ec 	.word	0x080113ec
 8006e3c:	080113b0 	.word	0x080113b0
 8006e40:	08013b2c 	.word	0x08013b2c

08006e44 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f003 0303 	and.w	r3, r3, #3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d006      	beq.n	8006e66 <do_memp_free_pool+0x22>
 8006e58:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <do_memp_free_pool+0x40>)
 8006e5a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8006e5e:	490a      	ldr	r1, [pc, #40]	@ (8006e88 <do_memp_free_pool+0x44>)
 8006e60:	480a      	ldr	r0, [pc, #40]	@ (8006e8c <do_memp_free_pool+0x48>)
 8006e62:	f009 f985 	bl	8010170 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	0801135c 	.word	0x0801135c
 8006e88:	0801140c 	.word	0x0801140c
 8006e8c:	080113b0 	.word	0x080113b0

08006e90 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d106      	bne.n	8006eae <memp_free_pool+0x1e>
 8006ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8006ecc <memp_free_pool+0x3c>)
 8006ea2:	f240 1295 	movw	r2, #405	@ 0x195
 8006ea6:	490a      	ldr	r1, [pc, #40]	@ (8006ed0 <memp_free_pool+0x40>)
 8006ea8:	480a      	ldr	r0, [pc, #40]	@ (8006ed4 <memp_free_pool+0x44>)
 8006eaa:	f009 f961 	bl	8010170 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <memp_free_pool+0x34>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d004      	beq.n	8006ec4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8006eba:	6839      	ldr	r1, [r7, #0]
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff ffc1 	bl	8006e44 <do_memp_free_pool>
 8006ec2:	e000      	b.n	8006ec6 <memp_free_pool+0x36>
    return;
 8006ec4:	bf00      	nop
}
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	0801135c 	.word	0x0801135c
 8006ed0:	080113d8 	.word	0x080113d8
 8006ed4:	080113b0 	.word	0x080113b0

08006ed8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	4603      	mov	r3, r0
 8006ee0:	6039      	str	r1, [r7, #0]
 8006ee2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2b08      	cmp	r3, #8
 8006ee8:	d907      	bls.n	8006efa <memp_free+0x22>
 8006eea:	4b0c      	ldr	r3, [pc, #48]	@ (8006f1c <memp_free+0x44>)
 8006eec:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8006ef0:	490b      	ldr	r1, [pc, #44]	@ (8006f20 <memp_free+0x48>)
 8006ef2:	480c      	ldr	r0, [pc, #48]	@ (8006f24 <memp_free+0x4c>)
 8006ef4:	f009 f93c 	bl	8010170 <iprintf>
 8006ef8:	e00c      	b.n	8006f14 <memp_free+0x3c>

  if (mem == NULL) {
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	4a09      	ldr	r2, [pc, #36]	@ (8006f28 <memp_free+0x50>)
 8006f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f08:	6839      	ldr	r1, [r7, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff9a 	bl	8006e44 <do_memp_free_pool>
 8006f10:	e000      	b.n	8006f14 <memp_free+0x3c>
    return;
 8006f12:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	0801135c 	.word	0x0801135c
 8006f20:	0801142c 	.word	0x0801142c
 8006f24:	080113b0 	.word	0x080113b0
 8006f28:	08013b2c 	.word	0x08013b2c

08006f2c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr
	...

08006f3c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b086      	sub	sp, #24
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	607a      	str	r2, [r7, #4]
 8006f48:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d108      	bne.n	8006f62 <netif_add+0x26>
 8006f50:	4b57      	ldr	r3, [pc, #348]	@ (80070b0 <netif_add+0x174>)
 8006f52:	f240 1227 	movw	r2, #295	@ 0x127
 8006f56:	4957      	ldr	r1, [pc, #348]	@ (80070b4 <netif_add+0x178>)
 8006f58:	4857      	ldr	r0, [pc, #348]	@ (80070b8 <netif_add+0x17c>)
 8006f5a:	f009 f909 	bl	8010170 <iprintf>
 8006f5e:	2300      	movs	r3, #0
 8006f60:	e0a2      	b.n	80070a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d108      	bne.n	8006f7a <netif_add+0x3e>
 8006f68:	4b51      	ldr	r3, [pc, #324]	@ (80070b0 <netif_add+0x174>)
 8006f6a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8006f6e:	4953      	ldr	r1, [pc, #332]	@ (80070bc <netif_add+0x180>)
 8006f70:	4851      	ldr	r0, [pc, #324]	@ (80070b8 <netif_add+0x17c>)
 8006f72:	f009 f8fd 	bl	8010170 <iprintf>
 8006f76:	2300      	movs	r3, #0
 8006f78:	e096      	b.n	80070a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006f80:	4b4f      	ldr	r3, [pc, #316]	@ (80070c0 <netif_add+0x184>)
 8006f82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8006f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80070c0 <netif_add+0x184>)
 8006f8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006f94:	4b4a      	ldr	r3, [pc, #296]	@ (80070c0 <netif_add+0x184>)
 8006f96:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4a45      	ldr	r2, [pc, #276]	@ (80070c4 <netif_add+0x188>)
 8006fae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a3a      	ldr	r2, [r7, #32]
 8006fc8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8006fca:	4b3f      	ldr	r3, [pc, #252]	@ (80070c8 <netif_add+0x18c>)
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006fd8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f913 	bl	800720c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	4798      	blx	r3
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <netif_add+0xba>
    return NULL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e058      	b.n	80070a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006ffc:	2bff      	cmp	r3, #255	@ 0xff
 8006ffe:	d103      	bne.n	8007008 <netif_add+0xcc>
        netif->num = 0;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800700c:	4b2f      	ldr	r3, [pc, #188]	@ (80070cc <netif_add+0x190>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	e02b      	b.n	800706c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	429a      	cmp	r2, r3
 800701a:	d106      	bne.n	800702a <netif_add+0xee>
 800701c:	4b24      	ldr	r3, [pc, #144]	@ (80070b0 <netif_add+0x174>)
 800701e:	f240 128b 	movw	r2, #395	@ 0x18b
 8007022:	492b      	ldr	r1, [pc, #172]	@ (80070d0 <netif_add+0x194>)
 8007024:	4824      	ldr	r0, [pc, #144]	@ (80070b8 <netif_add+0x17c>)
 8007026:	f009 f8a3 	bl	8010170 <iprintf>
        num_netifs++;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	3301      	adds	r3, #1
 800702e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	2bff      	cmp	r3, #255	@ 0xff
 8007034:	dd06      	ble.n	8007044 <netif_add+0x108>
 8007036:	4b1e      	ldr	r3, [pc, #120]	@ (80070b0 <netif_add+0x174>)
 8007038:	f240 128d 	movw	r2, #397	@ 0x18d
 800703c:	4925      	ldr	r1, [pc, #148]	@ (80070d4 <netif_add+0x198>)
 800703e:	481e      	ldr	r0, [pc, #120]	@ (80070b8 <netif_add+0x17c>)
 8007040:	f009 f896 	bl	8010170 <iprintf>
        if (netif2->num == netif->num) {
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007050:	429a      	cmp	r2, r3
 8007052:	d108      	bne.n	8007066 <netif_add+0x12a>
          netif->num++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800705a:	3301      	adds	r3, #1
 800705c:	b2da      	uxtb	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8007064:	e005      	b.n	8007072 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	617b      	str	r3, [r7, #20]
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1d0      	bne.n	8007014 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1be      	bne.n	8006ff6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800707e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007080:	d103      	bne.n	800708a <netif_add+0x14e>
    netif_num = 0;
 8007082:	4b11      	ldr	r3, [pc, #68]	@ (80070c8 <netif_add+0x18c>)
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
 8007088:	e006      	b.n	8007098 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007090:	3301      	adds	r3, #1
 8007092:	b2da      	uxtb	r2, r3
 8007094:	4b0c      	ldr	r3, [pc, #48]	@ (80070c8 <netif_add+0x18c>)
 8007096:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007098:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <netif_add+0x190>)
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80070a0:	4a0a      	ldr	r2, [pc, #40]	@ (80070cc <netif_add+0x190>)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80070a6:	68fb      	ldr	r3, [r7, #12]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	08011448 	.word	0x08011448
 80070b4:	080114dc 	.word	0x080114dc
 80070b8:	08011498 	.word	0x08011498
 80070bc:	080114f8 	.word	0x080114f8
 80070c0:	08013b90 	.word	0x08013b90
 80070c4:	080074e7 	.word	0x080074e7
 80070c8:	240031d4 	.word	0x240031d4
 80070cc:	240031cc 	.word	0x240031cc
 80070d0:	0801151c 	.word	0x0801151c
 80070d4:	08011530 	.word	0x08011530

080070d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f002 fb45 	bl	8009774 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f006 fc23 	bl	800d938 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80070f2:	bf00      	nop
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d106      	bne.n	800711c <netif_do_set_ipaddr+0x20>
 800710e:	4b1d      	ldr	r3, [pc, #116]	@ (8007184 <netif_do_set_ipaddr+0x88>)
 8007110:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8007114:	491c      	ldr	r1, [pc, #112]	@ (8007188 <netif_do_set_ipaddr+0x8c>)
 8007116:	481d      	ldr	r0, [pc, #116]	@ (800718c <netif_do_set_ipaddr+0x90>)
 8007118:	f009 f82a 	bl	8010170 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d106      	bne.n	8007130 <netif_do_set_ipaddr+0x34>
 8007122:	4b18      	ldr	r3, [pc, #96]	@ (8007184 <netif_do_set_ipaddr+0x88>)
 8007124:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007128:	4917      	ldr	r1, [pc, #92]	@ (8007188 <netif_do_set_ipaddr+0x8c>)
 800712a:	4818      	ldr	r0, [pc, #96]	@ (800718c <netif_do_set_ipaddr+0x90>)
 800712c:	f009 f820 	bl	8010170 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3304      	adds	r3, #4
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d01c      	beq.n	8007178 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3304      	adds	r3, #4
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800714e:	f107 0314 	add.w	r3, r7, #20
 8007152:	4619      	mov	r1, r3
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f7ff ffbf 	bl	80070d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <netif_do_set_ipaddr+0x6a>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	e000      	b.n	8007168 <netif_do_set_ipaddr+0x6c>
 8007166:	2300      	movs	r3, #0
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800716c:	2101      	movs	r1, #1
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f8d2 	bl	8007318 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007174:	2301      	movs	r3, #1
 8007176:	e000      	b.n	800717a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3718      	adds	r7, #24
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	08011448 	.word	0x08011448
 8007188:	08011560 	.word	0x08011560
 800718c:	08011498 	.word	0x08011498

08007190 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3308      	adds	r3, #8
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d00a      	beq.n	80071c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <netif_do_set_netmask+0x26>
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	e000      	b.n	80071b8 <netif_do_set_netmask+0x28>
 80071b6:	2300      	movs	r3, #0
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b085      	sub	sp, #20
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	330c      	adds	r3, #12
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d00a      	beq.n	80071fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <netif_do_set_gw+0x26>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	e000      	b.n	80071f6 <netif_do_set_gw+0x28>
 80071f4:	2300      	movs	r3, #0
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007228:	4b1c      	ldr	r3, [pc, #112]	@ (800729c <netif_set_addr+0x90>)
 800722a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007232:	4b1a      	ldr	r3, [pc, #104]	@ (800729c <netif_set_addr+0x90>)
 8007234:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d101      	bne.n	8007240 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800723c:	4b17      	ldr	r3, [pc, #92]	@ (800729c <netif_set_addr+0x90>)
 800723e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <netif_set_addr+0x42>
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <netif_set_addr+0x46>
 800724e:	2301      	movs	r3, #1
 8007250:	e000      	b.n	8007254 <netif_set_addr+0x48>
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800725c:	f107 0310 	add.w	r3, r7, #16
 8007260:	461a      	mov	r2, r3
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	68f8      	ldr	r0, [r7, #12]
 8007266:	f7ff ff49 	bl	80070fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	6879      	ldr	r1, [r7, #4]
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f7ff ff8e 	bl	8007190 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7ff ffa8 	bl	80071ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	461a      	mov	r2, r3
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff ff35 	bl	80070fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007292:	bf00      	nop
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	08013b90 	.word	0x08013b90

080072a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80072a8:	4a04      	ldr	r2, [pc, #16]	@ (80072bc <netif_set_default+0x1c>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr
 80072ba:	bf00      	nop
 80072bc:	240031d0 	.word	0x240031d0

080072c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d107      	bne.n	80072de <netif_set_up+0x1e>
 80072ce:	4b0f      	ldr	r3, [pc, #60]	@ (800730c <netif_set_up+0x4c>)
 80072d0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80072d4:	490e      	ldr	r1, [pc, #56]	@ (8007310 <netif_set_up+0x50>)
 80072d6:	480f      	ldr	r0, [pc, #60]	@ (8007314 <netif_set_up+0x54>)
 80072d8:	f008 ff4a 	bl	8010170 <iprintf>
 80072dc:	e013      	b.n	8007306 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072e4:	f003 0301 	and.w	r3, r3, #1
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10c      	bne.n	8007306 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80072fe:	2103      	movs	r1, #3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f809 	bl	8007318 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	08011448 	.word	0x08011448
 8007310:	080115d0 	.word	0x080115d0
 8007314:	08011498 	.word	0x08011498

08007318 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <netif_issue_reports+0x20>
 800732a:	4b18      	ldr	r3, [pc, #96]	@ (800738c <netif_issue_reports+0x74>)
 800732c:	f240 326d 	movw	r2, #877	@ 0x36d
 8007330:	4917      	ldr	r1, [pc, #92]	@ (8007390 <netif_issue_reports+0x78>)
 8007332:	4818      	ldr	r0, [pc, #96]	@ (8007394 <netif_issue_reports+0x7c>)
 8007334:	f008 ff1c 	bl	8010170 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	2b00      	cmp	r3, #0
 8007344:	d01e      	beq.n	8007384 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800734c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007350:	2b00      	cmp	r3, #0
 8007352:	d017      	beq.n	8007384 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d013      	beq.n	8007386 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00e      	beq.n	8007386 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800736e:	f003 0308 	and.w	r3, r3, #8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d007      	beq.n	8007386 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3304      	adds	r3, #4
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f007 fa45 	bl	800e80c <etharp_request>
 8007382:	e000      	b.n	8007386 <netif_issue_reports+0x6e>
    return;
 8007384:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	08011448 	.word	0x08011448
 8007390:	080115ec 	.word	0x080115ec
 8007394:	08011498 	.word	0x08011498

08007398 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d107      	bne.n	80073b6 <netif_set_down+0x1e>
 80073a6:	4b12      	ldr	r3, [pc, #72]	@ (80073f0 <netif_set_down+0x58>)
 80073a8:	f240 329b 	movw	r2, #923	@ 0x39b
 80073ac:	4911      	ldr	r1, [pc, #68]	@ (80073f4 <netif_set_down+0x5c>)
 80073ae:	4812      	ldr	r0, [pc, #72]	@ (80073f8 <netif_set_down+0x60>)
 80073b0:	f008 fede 	bl	8010170 <iprintf>
 80073b4:	e019      	b.n	80073ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073bc:	f003 0301 	and.w	r3, r3, #1
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d012      	beq.n	80073ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073ca:	f023 0301 	bic.w	r3, r3, #1
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f006 fdcf 	bl	800df88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	08011448 	.word	0x08011448
 80073f4:	08011610 	.word	0x08011610
 80073f8:	08011498 	.word	0x08011498

080073fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d107      	bne.n	800741a <netif_set_link_up+0x1e>
 800740a:	4b13      	ldr	r3, [pc, #76]	@ (8007458 <netif_set_link_up+0x5c>)
 800740c:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007410:	4912      	ldr	r1, [pc, #72]	@ (800745c <netif_set_link_up+0x60>)
 8007412:	4813      	ldr	r0, [pc, #76]	@ (8007460 <netif_set_link_up+0x64>)
 8007414:	f008 feac 	bl	8010170 <iprintf>
 8007418:	e01b      	b.n	8007452 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d114      	bne.n	8007452 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800742e:	f043 0304 	orr.w	r3, r3, #4
 8007432:	b2da      	uxtb	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800743a:	2103      	movs	r1, #3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff ff6b 	bl	8007318 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d003      	beq.n	8007452 <netif_set_link_up+0x56>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	08011448 	.word	0x08011448
 800745c:	08011630 	.word	0x08011630
 8007460:	08011498 	.word	0x08011498

08007464 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d107      	bne.n	8007482 <netif_set_link_down+0x1e>
 8007472:	4b11      	ldr	r3, [pc, #68]	@ (80074b8 <netif_set_link_down+0x54>)
 8007474:	f240 4206 	movw	r2, #1030	@ 0x406
 8007478:	4910      	ldr	r1, [pc, #64]	@ (80074bc <netif_set_link_down+0x58>)
 800747a:	4811      	ldr	r0, [pc, #68]	@ (80074c0 <netif_set_link_down+0x5c>)
 800747c:	f008 fe78 	bl	8010170 <iprintf>
 8007480:	e017      	b.n	80074b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d010      	beq.n	80074b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007496:	f023 0304 	bic.w	r3, r3, #4
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d003      	beq.n	80074b2 <netif_set_link_down+0x4e>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	08011448 	.word	0x08011448
 80074bc:	08011654 	.word	0x08011654
 80074c0:	08011498 	.word	0x08011498

080074c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	61da      	str	r2, [r3, #28]
  }
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80074f2:	f06f 030b 	mvn.w	r3, #11
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
	...

08007504 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800750e:	79fb      	ldrb	r3, [r7, #7]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d013      	beq.n	800753c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007514:	4b0d      	ldr	r3, [pc, #52]	@ (800754c <netif_get_by_index+0x48>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60fb      	str	r3, [r7, #12]
 800751a:	e00c      	b.n	8007536 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007522:	3301      	adds	r3, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	79fa      	ldrb	r2, [r7, #7]
 8007528:	429a      	cmp	r2, r3
 800752a:	d101      	bne.n	8007530 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	e006      	b.n	800753e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	60fb      	str	r3, [r7, #12]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1ef      	bne.n	800751c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	240031cc 	.word	0x240031cc

08007550 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007556:	4b0c      	ldr	r3, [pc, #48]	@ (8007588 <pbuf_free_ooseq+0x38>)
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800755c:	4b0b      	ldr	r3, [pc, #44]	@ (800758c <pbuf_free_ooseq+0x3c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	607b      	str	r3, [r7, #4]
 8007562:	e00a      	b.n	800757a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f002 f93f 	bl	80097f0 <tcp_free_ooseq>
      return;
 8007572:	e005      	b.n	8007580 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	607b      	str	r3, [r7, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1f1      	bne.n	8007564 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	240031d5 	.word	0x240031d5
 800758c:	240031e4 	.word	0x240031e4

08007590 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007594:	4b03      	ldr	r3, [pc, #12]	@ (80075a4 <pbuf_pool_is_empty+0x14>)
 8007596:	2201      	movs	r2, #1
 8007598:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800759a:	bf00      	nop
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	240031d5 	.word	0x240031d5

080075a8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4611      	mov	r1, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	460b      	mov	r3, r1
 80075b8:	80fb      	strh	r3, [r7, #6]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	88fa      	ldrh	r2, [r7, #6]
 80075ce:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	88ba      	ldrh	r2, [r7, #4]
 80075d4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80075d6:	8b3b      	ldrh	r3, [r7, #24]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	7f3a      	ldrb	r2, [r7, #28]
 80075e2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2201      	movs	r2, #1
 80075e8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	73da      	strb	r2, [r3, #15]
}
 80075f0:	bf00      	nop
 80075f2:	3714      	adds	r7, #20
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08c      	sub	sp, #48	@ 0x30
 8007600:	af02      	add	r7, sp, #8
 8007602:	4603      	mov	r3, r0
 8007604:	71fb      	strb	r3, [r7, #7]
 8007606:	460b      	mov	r3, r1
 8007608:	80bb      	strh	r3, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007612:	887b      	ldrh	r3, [r7, #2]
 8007614:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007618:	d07f      	beq.n	800771a <pbuf_alloc+0x11e>
 800761a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800761e:	f300 80c8 	bgt.w	80077b2 <pbuf_alloc+0x1b6>
 8007622:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007626:	d010      	beq.n	800764a <pbuf_alloc+0x4e>
 8007628:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800762c:	f300 80c1 	bgt.w	80077b2 <pbuf_alloc+0x1b6>
 8007630:	2b01      	cmp	r3, #1
 8007632:	d002      	beq.n	800763a <pbuf_alloc+0x3e>
 8007634:	2b41      	cmp	r3, #65	@ 0x41
 8007636:	f040 80bc 	bne.w	80077b2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800763a:	887a      	ldrh	r2, [r7, #2]
 800763c:	88bb      	ldrh	r3, [r7, #4]
 800763e:	4619      	mov	r1, r3
 8007640:	2000      	movs	r0, #0
 8007642:	f000 f8d1 	bl	80077e8 <pbuf_alloc_reference>
 8007646:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007648:	e0bd      	b.n	80077c6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007652:	88bb      	ldrh	r3, [r7, #4]
 8007654:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007656:	2008      	movs	r0, #8
 8007658:	f7ff fbce 	bl	8006df8 <memp_malloc>
 800765c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d109      	bne.n	8007678 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007664:	f7ff ff94 	bl	8007590 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d002      	beq.n	8007674 <pbuf_alloc+0x78>
            pbuf_free(p);
 800766e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007670:	f000 faa8 	bl	8007bc4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	e0a7      	b.n	80077c8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007678:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800767a:	3303      	adds	r3, #3
 800767c:	b29b      	uxth	r3, r3
 800767e:	f023 0303 	bic.w	r3, r3, #3
 8007682:	b29b      	uxth	r3, r3
 8007684:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007688:	b29b      	uxth	r3, r3
 800768a:	8b7a      	ldrh	r2, [r7, #26]
 800768c:	4293      	cmp	r3, r2
 800768e:	bf28      	it	cs
 8007690:	4613      	movcs	r3, r2
 8007692:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007694:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007696:	3310      	adds	r3, #16
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4413      	add	r3, r2
 800769c:	3303      	adds	r3, #3
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	4618      	mov	r0, r3
 80076a4:	89f9      	ldrh	r1, [r7, #14]
 80076a6:	8b7a      	ldrh	r2, [r7, #26]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9301      	str	r3, [sp, #4]
 80076ac:	887b      	ldrh	r3, [r7, #2]
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	460b      	mov	r3, r1
 80076b2:	4601      	mov	r1, r0
 80076b4:	6938      	ldr	r0, [r7, #16]
 80076b6:	f7ff ff77 	bl	80075a8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d006      	beq.n	80076d4 <pbuf_alloc+0xd8>
 80076c6:	4b42      	ldr	r3, [pc, #264]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80076c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80076cc:	4941      	ldr	r1, [pc, #260]	@ (80077d4 <pbuf_alloc+0x1d8>)
 80076ce:	4842      	ldr	r0, [pc, #264]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80076d0:	f008 fd4e 	bl	8010170 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80076d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80076d6:	3303      	adds	r3, #3
 80076d8:	f023 0303 	bic.w	r3, r3, #3
 80076dc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80076e0:	d106      	bne.n	80076f0 <pbuf_alloc+0xf4>
 80076e2:	4b3b      	ldr	r3, [pc, #236]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80076e4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80076e8:	493c      	ldr	r1, [pc, #240]	@ (80077dc <pbuf_alloc+0x1e0>)
 80076ea:	483b      	ldr	r0, [pc, #236]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80076ec:	f008 fd40 	bl	8010170 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d102      	bne.n	80076fc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fa:	e002      	b.n	8007702 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007706:	8b7a      	ldrh	r2, [r7, #26]
 8007708:	89fb      	ldrh	r3, [r7, #14]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007712:	8b7b      	ldrh	r3, [r7, #26]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d19e      	bne.n	8007656 <pbuf_alloc+0x5a>
      break;
 8007718:	e055      	b.n	80077c6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800771a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800771c:	3303      	adds	r3, #3
 800771e:	b29b      	uxth	r3, r3
 8007720:	f023 0303 	bic.w	r3, r3, #3
 8007724:	b29a      	uxth	r2, r3
 8007726:	88bb      	ldrh	r3, [r7, #4]
 8007728:	3303      	adds	r3, #3
 800772a:	b29b      	uxth	r3, r3
 800772c:	f023 0303 	bic.w	r3, r3, #3
 8007730:	b29b      	uxth	r3, r3
 8007732:	4413      	add	r3, r2
 8007734:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007736:	8b3b      	ldrh	r3, [r7, #24]
 8007738:	3310      	adds	r3, #16
 800773a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800773c:	8b3a      	ldrh	r2, [r7, #24]
 800773e:	88bb      	ldrh	r3, [r7, #4]
 8007740:	3303      	adds	r3, #3
 8007742:	f023 0303 	bic.w	r3, r3, #3
 8007746:	429a      	cmp	r2, r3
 8007748:	d306      	bcc.n	8007758 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800774a:	8afa      	ldrh	r2, [r7, #22]
 800774c:	88bb      	ldrh	r3, [r7, #4]
 800774e:	3303      	adds	r3, #3
 8007750:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007754:	429a      	cmp	r2, r3
 8007756:	d201      	bcs.n	800775c <pbuf_alloc+0x160>
        return NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	e035      	b.n	80077c8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800775c:	8afb      	ldrh	r3, [r7, #22]
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff f9ba 	bl	8006ad8 <mem_malloc>
 8007764:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <pbuf_alloc+0x174>
        return NULL;
 800776c:	2300      	movs	r3, #0
 800776e:	e02b      	b.n	80077c8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007770:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007772:	3310      	adds	r3, #16
 8007774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007776:	4413      	add	r3, r2
 8007778:	3303      	adds	r3, #3
 800777a:	f023 0303 	bic.w	r3, r3, #3
 800777e:	4618      	mov	r0, r3
 8007780:	88b9      	ldrh	r1, [r7, #4]
 8007782:	88ba      	ldrh	r2, [r7, #4]
 8007784:	2300      	movs	r3, #0
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	887b      	ldrh	r3, [r7, #2]
 800778a:	9300      	str	r3, [sp, #0]
 800778c:	460b      	mov	r3, r1
 800778e:	4601      	mov	r1, r0
 8007790:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007792:	f7ff ff09 	bl	80075a8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d010      	beq.n	80077c4 <pbuf_alloc+0x1c8>
 80077a2:	4b0b      	ldr	r3, [pc, #44]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80077a4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80077a8:	490d      	ldr	r1, [pc, #52]	@ (80077e0 <pbuf_alloc+0x1e4>)
 80077aa:	480b      	ldr	r0, [pc, #44]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80077ac:	f008 fce0 	bl	8010170 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80077b0:	e008      	b.n	80077c4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80077b2:	4b07      	ldr	r3, [pc, #28]	@ (80077d0 <pbuf_alloc+0x1d4>)
 80077b4:	f240 1227 	movw	r2, #295	@ 0x127
 80077b8:	490a      	ldr	r1, [pc, #40]	@ (80077e4 <pbuf_alloc+0x1e8>)
 80077ba:	4807      	ldr	r0, [pc, #28]	@ (80077d8 <pbuf_alloc+0x1dc>)
 80077bc:	f008 fcd8 	bl	8010170 <iprintf>
      return NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e001      	b.n	80077c8 <pbuf_alloc+0x1cc>
      break;
 80077c4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	@ 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	08011678 	.word	0x08011678
 80077d4:	080116a8 	.word	0x080116a8
 80077d8:	080116d8 	.word	0x080116d8
 80077dc:	08011700 	.word	0x08011700
 80077e0:	08011734 	.word	0x08011734
 80077e4:	08011760 	.word	0x08011760

080077e8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af02      	add	r7, sp, #8
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	460b      	mov	r3, r1
 80077f2:	807b      	strh	r3, [r7, #2]
 80077f4:	4613      	mov	r3, r2
 80077f6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80077f8:	883b      	ldrh	r3, [r7, #0]
 80077fa:	2b41      	cmp	r3, #65	@ 0x41
 80077fc:	d009      	beq.n	8007812 <pbuf_alloc_reference+0x2a>
 80077fe:	883b      	ldrh	r3, [r7, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d006      	beq.n	8007812 <pbuf_alloc_reference+0x2a>
 8007804:	4b0f      	ldr	r3, [pc, #60]	@ (8007844 <pbuf_alloc_reference+0x5c>)
 8007806:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800780a:	490f      	ldr	r1, [pc, #60]	@ (8007848 <pbuf_alloc_reference+0x60>)
 800780c:	480f      	ldr	r0, [pc, #60]	@ (800784c <pbuf_alloc_reference+0x64>)
 800780e:	f008 fcaf 	bl	8010170 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007812:	2007      	movs	r0, #7
 8007814:	f7ff faf0 	bl	8006df8 <memp_malloc>
 8007818:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	e00b      	b.n	800783c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8007824:	8879      	ldrh	r1, [r7, #2]
 8007826:	887a      	ldrh	r2, [r7, #2]
 8007828:	2300      	movs	r3, #0
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	883b      	ldrh	r3, [r7, #0]
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	460b      	mov	r3, r1
 8007832:	6879      	ldr	r1, [r7, #4]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff feb7 	bl	80075a8 <pbuf_init_alloced_pbuf>
  return p;
 800783a:	68fb      	ldr	r3, [r7, #12]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	08011678 	.word	0x08011678
 8007848:	0801177c 	.word	0x0801177c
 800784c:	080116d8 	.word	0x080116d8

08007850 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b088      	sub	sp, #32
 8007854:	af02      	add	r7, sp, #8
 8007856:	607b      	str	r3, [r7, #4]
 8007858:	4603      	mov	r3, r0
 800785a:	73fb      	strb	r3, [r7, #15]
 800785c:	460b      	mov	r3, r1
 800785e:	81bb      	strh	r3, [r7, #12]
 8007860:	4613      	mov	r3, r2
 8007862:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007868:	8a7b      	ldrh	r3, [r7, #18]
 800786a:	3303      	adds	r3, #3
 800786c:	f023 0203 	bic.w	r2, r3, #3
 8007870:	89bb      	ldrh	r3, [r7, #12]
 8007872:	441a      	add	r2, r3
 8007874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007876:	429a      	cmp	r2, r3
 8007878:	d901      	bls.n	800787e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800787a:	2300      	movs	r3, #0
 800787c:	e018      	b.n	80078b0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800787e:	6a3b      	ldr	r3, [r7, #32]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007884:	8a7b      	ldrh	r3, [r7, #18]
 8007886:	3303      	adds	r3, #3
 8007888:	f023 0303 	bic.w	r3, r3, #3
 800788c:	6a3a      	ldr	r2, [r7, #32]
 800788e:	4413      	add	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	e001      	b.n	8007898 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	89b9      	ldrh	r1, [r7, #12]
 800789c:	89ba      	ldrh	r2, [r7, #12]
 800789e:	2302      	movs	r3, #2
 80078a0:	9301      	str	r3, [sp, #4]
 80078a2:	897b      	ldrh	r3, [r7, #10]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	460b      	mov	r3, r1
 80078a8:	6979      	ldr	r1, [r7, #20]
 80078aa:	f7ff fe7d 	bl	80075a8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80078ae:	687b      	ldr	r3, [r7, #4]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <pbuf_realloc+0x20>
 80078ca:	4b3a      	ldr	r3, [pc, #232]	@ (80079b4 <pbuf_realloc+0xfc>)
 80078cc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80078d0:	4939      	ldr	r1, [pc, #228]	@ (80079b8 <pbuf_realloc+0x100>)
 80078d2:	483a      	ldr	r0, [pc, #232]	@ (80079bc <pbuf_realloc+0x104>)
 80078d4:	f008 fc4c 	bl	8010170 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	891b      	ldrh	r3, [r3, #8]
 80078dc:	887a      	ldrh	r2, [r7, #2]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d263      	bcs.n	80079aa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	891a      	ldrh	r2, [r3, #8]
 80078e6:	887b      	ldrh	r3, [r7, #2]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80078ec:	887b      	ldrh	r3, [r7, #2]
 80078ee:	817b      	strh	r3, [r7, #10]
  q = p;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80078f4:	e018      	b.n	8007928 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	895b      	ldrh	r3, [r3, #10]
 80078fa:	897a      	ldrh	r2, [r7, #10]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	891a      	ldrh	r2, [r3, #8]
 8007904:	893b      	ldrh	r3, [r7, #8]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	b29a      	uxth	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d106      	bne.n	8007928 <pbuf_realloc+0x70>
 800791a:	4b26      	ldr	r3, [pc, #152]	@ (80079b4 <pbuf_realloc+0xfc>)
 800791c:	f240 12af 	movw	r2, #431	@ 0x1af
 8007920:	4927      	ldr	r1, [pc, #156]	@ (80079c0 <pbuf_realloc+0x108>)
 8007922:	4826      	ldr	r0, [pc, #152]	@ (80079bc <pbuf_realloc+0x104>)
 8007924:	f008 fc24 	bl	8010170 <iprintf>
  while (rem_len > q->len) {
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	895b      	ldrh	r3, [r3, #10]
 800792c:	897a      	ldrh	r2, [r7, #10]
 800792e:	429a      	cmp	r2, r3
 8007930:	d8e1      	bhi.n	80078f6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	7b1b      	ldrb	r3, [r3, #12]
 8007936:	f003 030f 	and.w	r3, r3, #15
 800793a:	2b00      	cmp	r3, #0
 800793c:	d121      	bne.n	8007982 <pbuf_realloc+0xca>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	895b      	ldrh	r3, [r3, #10]
 8007942:	897a      	ldrh	r2, [r7, #10]
 8007944:	429a      	cmp	r2, r3
 8007946:	d01c      	beq.n	8007982 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	7b5b      	ldrb	r3, [r3, #13]
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d116      	bne.n	8007982 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	b29a      	uxth	r2, r3
 800795e:	897b      	ldrh	r3, [r7, #10]
 8007960:	4413      	add	r3, r2
 8007962:	b29b      	uxth	r3, r3
 8007964:	4619      	mov	r1, r3
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7fe ffba 	bl	80068e0 <mem_trim>
 800796c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d106      	bne.n	8007982 <pbuf_realloc+0xca>
 8007974:	4b0f      	ldr	r3, [pc, #60]	@ (80079b4 <pbuf_realloc+0xfc>)
 8007976:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800797a:	4912      	ldr	r1, [pc, #72]	@ (80079c4 <pbuf_realloc+0x10c>)
 800797c:	480f      	ldr	r0, [pc, #60]	@ (80079bc <pbuf_realloc+0x104>)
 800797e:	f008 fbf7 	bl	8010170 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	897a      	ldrh	r2, [r7, #10]
 8007986:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	895a      	ldrh	r2, [r3, #10]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d004      	beq.n	80079a2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 f911 	bl	8007bc4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	e000      	b.n	80079ac <pbuf_realloc+0xf4>
    return;
 80079aa:	bf00      	nop

}
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	08011678 	.word	0x08011678
 80079b8:	08011790 	.word	0x08011790
 80079bc:	080116d8 	.word	0x080116d8
 80079c0:	080117a8 	.word	0x080117a8
 80079c4:	080117c0 	.word	0x080117c0

080079c8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	4613      	mov	r3, r2
 80079d4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <pbuf_add_header_impl+0x22>
 80079dc:	4b2b      	ldr	r3, [pc, #172]	@ (8007a8c <pbuf_add_header_impl+0xc4>)
 80079de:	f240 12df 	movw	r2, #479	@ 0x1df
 80079e2:	492b      	ldr	r1, [pc, #172]	@ (8007a90 <pbuf_add_header_impl+0xc8>)
 80079e4:	482b      	ldr	r0, [pc, #172]	@ (8007a94 <pbuf_add_header_impl+0xcc>)
 80079e6:	f008 fbc3 	bl	8010170 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <pbuf_add_header_impl+0x30>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f6:	d301      	bcc.n	80079fc <pbuf_add_header_impl+0x34>
    return 1;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e043      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <pbuf_add_header_impl+0x3e>
    return 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	e03e      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	891a      	ldrh	r2, [r3, #8]
 8007a0e:	8a7b      	ldrh	r3, [r7, #18]
 8007a10:	4413      	add	r3, r2
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	8a7a      	ldrh	r2, [r7, #18]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d901      	bls.n	8007a1e <pbuf_add_header_impl+0x56>
    return 1;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e032      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	7b1b      	ldrb	r3, [r3, #12]
 8007a22:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007a24:	8a3b      	ldrh	r3, [r7, #16]
 8007a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	425b      	negs	r3, r3
 8007a36:	4413      	add	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	3310      	adds	r3, #16
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d20d      	bcs.n	8007a60 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e01d      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007a48:	79fb      	ldrb	r3, [r7, #7]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d006      	beq.n	8007a5c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	425b      	negs	r3, r3
 8007a56:	4413      	add	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e001      	b.n	8007a60 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e011      	b.n	8007a84 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	895a      	ldrh	r2, [r3, #10]
 8007a6a:	8a7b      	ldrh	r3, [r7, #18]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	891a      	ldrh	r2, [r3, #8]
 8007a78:	8a7b      	ldrh	r3, [r7, #18]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	811a      	strh	r2, [r3, #8]


  return 0;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3718      	adds	r7, #24
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	08011678 	.word	0x08011678
 8007a90:	080117dc 	.word	0x080117dc
 8007a94:	080116d8 	.word	0x080116d8

08007a98 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff ff8e 	bl	80079c8 <pbuf_add_header_impl>
 8007aac:	4603      	mov	r3, r0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
	...

08007ab8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d106      	bne.n	8007ad6 <pbuf_remove_header+0x1e>
 8007ac8:	4b20      	ldr	r3, [pc, #128]	@ (8007b4c <pbuf_remove_header+0x94>)
 8007aca:	f240 224b 	movw	r2, #587	@ 0x24b
 8007ace:	4920      	ldr	r1, [pc, #128]	@ (8007b50 <pbuf_remove_header+0x98>)
 8007ad0:	4820      	ldr	r0, [pc, #128]	@ (8007b54 <pbuf_remove_header+0x9c>)
 8007ad2:	f008 fb4d 	bl	8010170 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <pbuf_remove_header+0x2c>
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ae2:	d301      	bcc.n	8007ae8 <pbuf_remove_header+0x30>
    return 1;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e02c      	b.n	8007b42 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <pbuf_remove_header+0x3a>
    return 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e027      	b.n	8007b42 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	895b      	ldrh	r3, [r3, #10]
 8007afa:	89fa      	ldrh	r2, [r7, #14]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d908      	bls.n	8007b12 <pbuf_remove_header+0x5a>
 8007b00:	4b12      	ldr	r3, [pc, #72]	@ (8007b4c <pbuf_remove_header+0x94>)
 8007b02:	f240 2255 	movw	r2, #597	@ 0x255
 8007b06:	4914      	ldr	r1, [pc, #80]	@ (8007b58 <pbuf_remove_header+0xa0>)
 8007b08:	4812      	ldr	r0, [pc, #72]	@ (8007b54 <pbuf_remove_header+0x9c>)
 8007b0a:	f008 fb31 	bl	8010170 <iprintf>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e017      	b.n	8007b42 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	441a      	add	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	895a      	ldrh	r2, [r3, #10]
 8007b28:	89fb      	ldrh	r3, [r7, #14]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	891a      	ldrh	r2, [r3, #8]
 8007b36:	89fb      	ldrh	r3, [r7, #14]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	08011678 	.word	0x08011678
 8007b50:	080117dc 	.word	0x080117dc
 8007b54:	080116d8 	.word	0x080116d8
 8007b58:	080117e8 	.word	0x080117e8

08007b5c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	807b      	strh	r3, [r7, #2]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8007b6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da08      	bge.n	8007b86 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007b74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b78:	425b      	negs	r3, r3
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7ff ff9b 	bl	8007ab8 <pbuf_remove_header>
 8007b82:	4603      	mov	r3, r0
 8007b84:	e007      	b.n	8007b96 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b8a:	787a      	ldrb	r2, [r7, #1]
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7ff ff1a 	bl	80079c8 <pbuf_add_header_impl>
 8007b94:	4603      	mov	r3, r0
  }
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8007baa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff ffd2 	bl	8007b5c <pbuf_header_impl>
 8007bb8:	4603      	mov	r3, r0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
	...

08007bc4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10b      	bne.n	8007bea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <pbuf_free+0x22>
 8007bd8:	4b38      	ldr	r3, [pc, #224]	@ (8007cbc <pbuf_free+0xf8>)
 8007bda:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8007bde:	4938      	ldr	r1, [pc, #224]	@ (8007cc0 <pbuf_free+0xfc>)
 8007be0:	4838      	ldr	r0, [pc, #224]	@ (8007cc4 <pbuf_free+0x100>)
 8007be2:	f008 fac5 	bl	8010170 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e063      	b.n	8007cb2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8007bee:	e05c      	b.n	8007caa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	7b9b      	ldrb	r3, [r3, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d106      	bne.n	8007c06 <pbuf_free+0x42>
 8007bf8:	4b30      	ldr	r3, [pc, #192]	@ (8007cbc <pbuf_free+0xf8>)
 8007bfa:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8007bfe:	4932      	ldr	r1, [pc, #200]	@ (8007cc8 <pbuf_free+0x104>)
 8007c00:	4830      	ldr	r0, [pc, #192]	@ (8007cc4 <pbuf_free+0x100>)
 8007c02:	f008 fab5 	bl	8010170 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	7b9b      	ldrb	r3, [r3, #14]
 8007c0a:	3b01      	subs	r3, #1
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	739a      	strb	r2, [r3, #14]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	7b9b      	ldrb	r3, [r3, #14]
 8007c16:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8007c18:	7dbb      	ldrb	r3, [r7, #22]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d143      	bne.n	8007ca6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7b1b      	ldrb	r3, [r3, #12]
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7b5b      	ldrb	r3, [r3, #13]
 8007c32:	f003 0302 	and.w	r3, r3, #2
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d011      	beq.n	8007c5e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d106      	bne.n	8007c54 <pbuf_free+0x90>
 8007c46:	4b1d      	ldr	r3, [pc, #116]	@ (8007cbc <pbuf_free+0xf8>)
 8007c48:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8007c4c:	491f      	ldr	r1, [pc, #124]	@ (8007ccc <pbuf_free+0x108>)
 8007c4e:	481d      	ldr	r0, [pc, #116]	@ (8007cc4 <pbuf_free+0x100>)
 8007c50:	f008 fa8e 	bl	8010170 <iprintf>
        pc->custom_free_function(p);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	4798      	blx	r3
 8007c5c:	e01d      	b.n	8007c9a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d104      	bne.n	8007c6e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8007c64:	6879      	ldr	r1, [r7, #4]
 8007c66:	2008      	movs	r0, #8
 8007c68:	f7ff f936 	bl	8006ed8 <memp_free>
 8007c6c:	e015      	b.n	8007c9a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d104      	bne.n	8007c7e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8007c74:	6879      	ldr	r1, [r7, #4]
 8007c76:	2007      	movs	r0, #7
 8007c78:	f7ff f92e 	bl	8006ed8 <memp_free>
 8007c7c:	e00d      	b.n	8007c9a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <pbuf_free+0xc8>
          mem_free(p);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7fe fdc1 	bl	800680c <mem_free>
 8007c8a:	e006      	b.n	8007c9a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8007cbc <pbuf_free+0xf8>)
 8007c8e:	f240 320f 	movw	r2, #783	@ 0x30f
 8007c92:	490f      	ldr	r1, [pc, #60]	@ (8007cd0 <pbuf_free+0x10c>)
 8007c94:	480b      	ldr	r0, [pc, #44]	@ (8007cc4 <pbuf_free+0x100>)
 8007c96:	f008 fa6b 	bl	8010170 <iprintf>
        }
      }
      count++;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	e001      	b.n	8007caa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d19f      	bne.n	8007bf0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8007cb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	08011678 	.word	0x08011678
 8007cc0:	080117dc 	.word	0x080117dc
 8007cc4:	080116d8 	.word	0x080116d8
 8007cc8:	08011808 	.word	0x08011808
 8007ccc:	08011820 	.word	0x08011820
 8007cd0:	08011844 	.word	0x08011844

08007cd4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8007ce0:	e005      	b.n	8007cee <pbuf_clen+0x1a>
    ++len;
 8007ce2:	89fb      	ldrh	r3, [r7, #14]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f6      	bne.n	8007ce2 <pbuf_clen+0xe>
  }
  return len;
 8007cf4:	89fb      	ldrh	r3, [r7, #14]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
	...

08007d04 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d010      	beq.n	8007d34 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	7b9b      	ldrb	r3, [r3, #14]
 8007d16:	3301      	adds	r3, #1
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7b9b      	ldrb	r3, [r3, #14]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <pbuf_ref+0x30>
 8007d26:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <pbuf_ref+0x38>)
 8007d28:	f240 3242 	movw	r2, #834	@ 0x342
 8007d2c:	4904      	ldr	r1, [pc, #16]	@ (8007d40 <pbuf_ref+0x3c>)
 8007d2e:	4805      	ldr	r0, [pc, #20]	@ (8007d44 <pbuf_ref+0x40>)
 8007d30:	f008 fa1e 	bl	8010170 <iprintf>
  }
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	08011678 	.word	0x08011678
 8007d40:	08011858 	.word	0x08011858
 8007d44:	080116d8 	.word	0x080116d8

08007d48 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <pbuf_cat+0x16>
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d107      	bne.n	8007d6e <pbuf_cat+0x26>
 8007d5e:	4b20      	ldr	r3, [pc, #128]	@ (8007de0 <pbuf_cat+0x98>)
 8007d60:	f240 3259 	movw	r2, #857	@ 0x359
 8007d64:	491f      	ldr	r1, [pc, #124]	@ (8007de4 <pbuf_cat+0x9c>)
 8007d66:	4820      	ldr	r0, [pc, #128]	@ (8007de8 <pbuf_cat+0xa0>)
 8007d68:	f008 fa02 	bl	8010170 <iprintf>
 8007d6c:	e034      	b.n	8007dd8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e00a      	b.n	8007d8a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	891a      	ldrh	r2, [r3, #8]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	891b      	ldrh	r3, [r3, #8]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60fb      	str	r3, [r7, #12]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1f0      	bne.n	8007d74 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	891a      	ldrh	r2, [r3, #8]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	895b      	ldrh	r3, [r3, #10]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d006      	beq.n	8007dac <pbuf_cat+0x64>
 8007d9e:	4b10      	ldr	r3, [pc, #64]	@ (8007de0 <pbuf_cat+0x98>)
 8007da0:	f240 3262 	movw	r2, #866	@ 0x362
 8007da4:	4911      	ldr	r1, [pc, #68]	@ (8007dec <pbuf_cat+0xa4>)
 8007da6:	4810      	ldr	r0, [pc, #64]	@ (8007de8 <pbuf_cat+0xa0>)
 8007da8:	f008 f9e2 	bl	8010170 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d006      	beq.n	8007dc2 <pbuf_cat+0x7a>
 8007db4:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <pbuf_cat+0x98>)
 8007db6:	f240 3263 	movw	r2, #867	@ 0x363
 8007dba:	490d      	ldr	r1, [pc, #52]	@ (8007df0 <pbuf_cat+0xa8>)
 8007dbc:	480a      	ldr	r0, [pc, #40]	@ (8007de8 <pbuf_cat+0xa0>)
 8007dbe:	f008 f9d7 	bl	8010170 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	891a      	ldrh	r2, [r3, #8]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	891b      	ldrh	r3, [r3, #8]
 8007dca:	4413      	add	r3, r2
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	683a      	ldr	r2, [r7, #0]
 8007dd6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	08011678 	.word	0x08011678
 8007de4:	0801186c 	.word	0x0801186c
 8007de8:	080116d8 	.word	0x080116d8
 8007dec:	080118a4 	.word	0x080118a4
 8007df0:	080118d4 	.word	0x080118d4

08007df4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <pbuf_copy+0x2a>
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <pbuf_copy+0x2a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	891a      	ldrh	r2, [r3, #8]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	891b      	ldrh	r3, [r3, #8]
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d209      	bcs.n	8007e32 <pbuf_copy+0x3e>
 8007e1e:	4b57      	ldr	r3, [pc, #348]	@ (8007f7c <pbuf_copy+0x188>)
 8007e20:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8007e24:	4956      	ldr	r1, [pc, #344]	@ (8007f80 <pbuf_copy+0x18c>)
 8007e26:	4857      	ldr	r0, [pc, #348]	@ (8007f84 <pbuf_copy+0x190>)
 8007e28:	f008 f9a2 	bl	8010170 <iprintf>
 8007e2c:	f06f 030f 	mvn.w	r3, #15
 8007e30:	e09f      	b.n	8007f72 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	895b      	ldrh	r3, [r3, #10]
 8007e36:	461a      	mov	r2, r3
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	1ad2      	subs	r2, r2, r3
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	895b      	ldrh	r3, [r3, #10]
 8007e40:	4619      	mov	r1, r3
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1acb      	subs	r3, r1, r3
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d306      	bcc.n	8007e58 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	895b      	ldrh	r3, [r3, #10]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	e005      	b.n	8007e64 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	895b      	ldrh	r3, [r3, #10]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	18d0      	adds	r0, r2, r3
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	4413      	add	r3, r2
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4619      	mov	r1, r3
 8007e78:	f008 fb47 	bl	801050a <memcpy>
    offset_to += len;
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	895b      	ldrh	r3, [r3, #10]
 8007e90:	461a      	mov	r2, r3
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d906      	bls.n	8007ea6 <pbuf_copy+0xb2>
 8007e98:	4b38      	ldr	r3, [pc, #224]	@ (8007f7c <pbuf_copy+0x188>)
 8007e9a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8007e9e:	493a      	ldr	r1, [pc, #232]	@ (8007f88 <pbuf_copy+0x194>)
 8007ea0:	4838      	ldr	r0, [pc, #224]	@ (8007f84 <pbuf_copy+0x190>)
 8007ea2:	f008 f965 	bl	8010170 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	895b      	ldrh	r3, [r3, #10]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d906      	bls.n	8007ec0 <pbuf_copy+0xcc>
 8007eb2:	4b32      	ldr	r3, [pc, #200]	@ (8007f7c <pbuf_copy+0x188>)
 8007eb4:	f240 32da 	movw	r2, #986	@ 0x3da
 8007eb8:	4934      	ldr	r1, [pc, #208]	@ (8007f8c <pbuf_copy+0x198>)
 8007eba:	4832      	ldr	r0, [pc, #200]	@ (8007f84 <pbuf_copy+0x190>)
 8007ebc:	f008 f958 	bl	8010170 <iprintf>
    if (offset_from >= p_from->len) {
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	895b      	ldrh	r3, [r3, #10]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d304      	bcc.n	8007ed6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	895b      	ldrh	r3, [r3, #10]
 8007eda:	461a      	mov	r2, r3
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d114      	bne.n	8007f0c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10c      	bne.n	8007f0c <pbuf_copy+0x118>
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d009      	beq.n	8007f0c <pbuf_copy+0x118>
 8007ef8:	4b20      	ldr	r3, [pc, #128]	@ (8007f7c <pbuf_copy+0x188>)
 8007efa:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8007efe:	4924      	ldr	r1, [pc, #144]	@ (8007f90 <pbuf_copy+0x19c>)
 8007f00:	4820      	ldr	r0, [pc, #128]	@ (8007f84 <pbuf_copy+0x190>)
 8007f02:	f008 f935 	bl	8010170 <iprintf>
 8007f06:	f06f 030f 	mvn.w	r3, #15
 8007f0a:	e032      	b.n	8007f72 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d013      	beq.n	8007f3a <pbuf_copy+0x146>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	895a      	ldrh	r2, [r3, #10]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	891b      	ldrh	r3, [r3, #8]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d10d      	bne.n	8007f3a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <pbuf_copy+0x146>
 8007f26:	4b15      	ldr	r3, [pc, #84]	@ (8007f7c <pbuf_copy+0x188>)
 8007f28:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8007f2c:	4919      	ldr	r1, [pc, #100]	@ (8007f94 <pbuf_copy+0x1a0>)
 8007f2e:	4815      	ldr	r0, [pc, #84]	@ (8007f84 <pbuf_copy+0x190>)
 8007f30:	f008 f91e 	bl	8010170 <iprintf>
 8007f34:	f06f 0305 	mvn.w	r3, #5
 8007f38:	e01b      	b.n	8007f72 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d013      	beq.n	8007f68 <pbuf_copy+0x174>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	895a      	ldrh	r2, [r3, #10]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	891b      	ldrh	r3, [r3, #8]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d10d      	bne.n	8007f68 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <pbuf_copy+0x174>
 8007f54:	4b09      	ldr	r3, [pc, #36]	@ (8007f7c <pbuf_copy+0x188>)
 8007f56:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8007f5a:	490e      	ldr	r1, [pc, #56]	@ (8007f94 <pbuf_copy+0x1a0>)
 8007f5c:	4809      	ldr	r0, [pc, #36]	@ (8007f84 <pbuf_copy+0x190>)
 8007f5e:	f008 f907 	bl	8010170 <iprintf>
 8007f62:	f06f 0305 	mvn.w	r3, #5
 8007f66:	e004      	b.n	8007f72 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f47f af61 	bne.w	8007e32 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	08011678 	.word	0x08011678
 8007f80:	08011920 	.word	0x08011920
 8007f84:	080116d8 	.word	0x080116d8
 8007f88:	08011950 	.word	0x08011950
 8007f8c:	08011968 	.word	0x08011968
 8007f90:	08011984 	.word	0x08011984
 8007f94:	08011994 	.word	0x08011994

08007f98 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	4611      	mov	r1, r2
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	80fb      	strh	r3, [r7, #6]
 8007faa:	4613      	mov	r3, r2
 8007fac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d108      	bne.n	8007fce <pbuf_copy_partial+0x36>
 8007fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800806c <pbuf_copy_partial+0xd4>)
 8007fbe:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007fc2:	492b      	ldr	r1, [pc, #172]	@ (8008070 <pbuf_copy_partial+0xd8>)
 8007fc4:	482b      	ldr	r0, [pc, #172]	@ (8008074 <pbuf_copy_partial+0xdc>)
 8007fc6:	f008 f8d3 	bl	8010170 <iprintf>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	e04a      	b.n	8008064 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d108      	bne.n	8007fe6 <pbuf_copy_partial+0x4e>
 8007fd4:	4b25      	ldr	r3, [pc, #148]	@ (800806c <pbuf_copy_partial+0xd4>)
 8007fd6:	f240 420b 	movw	r2, #1035	@ 0x40b
 8007fda:	4927      	ldr	r1, [pc, #156]	@ (8008078 <pbuf_copy_partial+0xe0>)
 8007fdc:	4825      	ldr	r0, [pc, #148]	@ (8008074 <pbuf_copy_partial+0xdc>)
 8007fde:	f008 f8c7 	bl	8010170 <iprintf>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e03e      	b.n	8008064 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	61fb      	str	r3, [r7, #28]
 8007fea:	e034      	b.n	8008056 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8007fec:	88bb      	ldrh	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <pbuf_copy_partial+0x70>
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	895b      	ldrh	r3, [r3, #10]
 8007ff6:	88ba      	ldrh	r2, [r7, #4]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d305      	bcc.n	8008008 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	895b      	ldrh	r3, [r3, #10]
 8008000:	88ba      	ldrh	r2, [r7, #4]
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	80bb      	strh	r3, [r7, #4]
 8008006:	e023      	b.n	8008050 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	895a      	ldrh	r2, [r3, #10]
 800800c:	88bb      	ldrh	r3, [r7, #4]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008012:	8b3a      	ldrh	r2, [r7, #24]
 8008014:	88fb      	ldrh	r3, [r7, #6]
 8008016:	429a      	cmp	r2, r3
 8008018:	d901      	bls.n	800801e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800801a:	88fb      	ldrh	r3, [r7, #6]
 800801c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800801e:	8b7b      	ldrh	r3, [r7, #26]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	18d0      	adds	r0, r2, r3
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	88bb      	ldrh	r3, [r7, #4]
 800802a:	4413      	add	r3, r2
 800802c:	8b3a      	ldrh	r2, [r7, #24]
 800802e:	4619      	mov	r1, r3
 8008030:	f008 fa6b 	bl	801050a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008034:	8afa      	ldrh	r2, [r7, #22]
 8008036:	8b3b      	ldrh	r3, [r7, #24]
 8008038:	4413      	add	r3, r2
 800803a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800803c:	8b7a      	ldrh	r2, [r7, #26]
 800803e:	8b3b      	ldrh	r3, [r7, #24]
 8008040:	4413      	add	r3, r2
 8008042:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	8b3b      	ldrh	r3, [r7, #24]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	61fb      	str	r3, [r7, #28]
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <pbuf_copy_partial+0xca>
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1c4      	bne.n	8007fec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8008062:	8afb      	ldrh	r3, [r7, #22]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	08011678 	.word	0x08011678
 8008070:	080119c0 	.word	0x080119c0
 8008074:	080116d8 	.word	0x080116d8
 8008078:	080119e0 	.word	0x080119e0

0800807c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	603a      	str	r2, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
 8008088:	460b      	mov	r3, r1
 800808a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	8919      	ldrh	r1, [r3, #8]
 8008090:	88ba      	ldrh	r2, [r7, #4]
 8008092:	79fb      	ldrb	r3, [r7, #7]
 8008094:	4618      	mov	r0, r3
 8008096:	f7ff fab1 	bl	80075fc <pbuf_alloc>
 800809a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <pbuf_clone+0x2a>
    return NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	e011      	b.n	80080ca <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f7ff fea3 	bl	8007df4 <pbuf_copy>
 80080ae:	4603      	mov	r3, r0
 80080b0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80080b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d006      	beq.n	80080c8 <pbuf_clone+0x4c>
 80080ba:	4b06      	ldr	r3, [pc, #24]	@ (80080d4 <pbuf_clone+0x58>)
 80080bc:	f240 5224 	movw	r2, #1316	@ 0x524
 80080c0:	4905      	ldr	r1, [pc, #20]	@ (80080d8 <pbuf_clone+0x5c>)
 80080c2:	4806      	ldr	r0, [pc, #24]	@ (80080dc <pbuf_clone+0x60>)
 80080c4:	f008 f854 	bl	8010170 <iprintf>
  return q;
 80080c8:	68fb      	ldr	r3, [r7, #12]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	08011678 	.word	0x08011678
 80080d8:	08011aec 	.word	0x08011aec
 80080dc:	080116d8 	.word	0x080116d8

080080e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80080e4:	f007 ff44 	bl	800ff70 <rand>
 80080e8:	4603      	mov	r3, r0
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	4b01      	ldr	r3, [pc, #4]	@ (8008100 <tcp_init+0x20>)
 80080fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80080fc:	bf00      	nop
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	24000028 	.word	0x24000028

08008104 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	7d1b      	ldrb	r3, [r3, #20]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d105      	bne.n	8008120 <tcp_free+0x1c>
 8008114:	4b06      	ldr	r3, [pc, #24]	@ (8008130 <tcp_free+0x2c>)
 8008116:	22d4      	movs	r2, #212	@ 0xd4
 8008118:	4906      	ldr	r1, [pc, #24]	@ (8008134 <tcp_free+0x30>)
 800811a:	4807      	ldr	r0, [pc, #28]	@ (8008138 <tcp_free+0x34>)
 800811c:	f008 f828 	bl	8010170 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	2001      	movs	r0, #1
 8008124:	f7fe fed8 	bl	8006ed8 <memp_free>
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	08011b78 	.word	0x08011b78
 8008134:	08011ba8 	.word	0x08011ba8
 8008138:	08011bbc 	.word	0x08011bbc

0800813c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	7d1b      	ldrb	r3, [r3, #20]
 8008148:	2b01      	cmp	r3, #1
 800814a:	d105      	bne.n	8008158 <tcp_free_listen+0x1c>
 800814c:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <tcp_free_listen+0x2c>)
 800814e:	22df      	movs	r2, #223	@ 0xdf
 8008150:	4906      	ldr	r1, [pc, #24]	@ (800816c <tcp_free_listen+0x30>)
 8008152:	4807      	ldr	r0, [pc, #28]	@ (8008170 <tcp_free_listen+0x34>)
 8008154:	f008 f80c 	bl	8010170 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	2002      	movs	r0, #2
 800815c:	f7fe febc 	bl	8006ed8 <memp_free>
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	08011b78 	.word	0x08011b78
 800816c:	08011be4 	.word	0x08011be4
 8008170:	08011bbc 	.word	0x08011bbc

08008174 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008178:	f000 fea4 	bl	8008ec4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800817c:	4b07      	ldr	r3, [pc, #28]	@ (800819c <tcp_tmr+0x28>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	b2da      	uxtb	r2, r3
 8008184:	4b05      	ldr	r3, [pc, #20]	@ (800819c <tcp_tmr+0x28>)
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	4b04      	ldr	r3, [pc, #16]	@ (800819c <tcp_tmr+0x28>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008194:	f000 fb54 	bl	8008840 <tcp_slowtmr>
  }
}
 8008198:	bf00      	nop
 800819a:	bd80      	pop	{r7, pc}
 800819c:	240031ed 	.word	0x240031ed

080081a0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d105      	bne.n	80081bc <tcp_remove_listener+0x1c>
 80081b0:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <tcp_remove_listener+0x48>)
 80081b2:	22ff      	movs	r2, #255	@ 0xff
 80081b4:	490d      	ldr	r1, [pc, #52]	@ (80081ec <tcp_remove_listener+0x4c>)
 80081b6:	480e      	ldr	r0, [pc, #56]	@ (80081f0 <tcp_remove_listener+0x50>)
 80081b8:	f007 ffda 	bl	8010170 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60fb      	str	r3, [r7, #12]
 80081c0:	e00a      	b.n	80081d8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d102      	bne.n	80081d2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2200      	movs	r2, #0
 80081d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f1      	bne.n	80081c2 <tcp_remove_listener+0x22>
    }
  }
}
 80081de:	bf00      	nop
 80081e0:	bf00      	nop
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	08011b78 	.word	0x08011b78
 80081ec:	08011c00 	.word	0x08011c00
 80081f0:	08011bbc 	.word	0x08011bbc

080081f4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d106      	bne.n	8008210 <tcp_listen_closed+0x1c>
 8008202:	4b14      	ldr	r3, [pc, #80]	@ (8008254 <tcp_listen_closed+0x60>)
 8008204:	f240 1211 	movw	r2, #273	@ 0x111
 8008208:	4913      	ldr	r1, [pc, #76]	@ (8008258 <tcp_listen_closed+0x64>)
 800820a:	4814      	ldr	r0, [pc, #80]	@ (800825c <tcp_listen_closed+0x68>)
 800820c:	f007 ffb0 	bl	8010170 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7d1b      	ldrb	r3, [r3, #20]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d006      	beq.n	8008226 <tcp_listen_closed+0x32>
 8008218:	4b0e      	ldr	r3, [pc, #56]	@ (8008254 <tcp_listen_closed+0x60>)
 800821a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800821e:	4910      	ldr	r1, [pc, #64]	@ (8008260 <tcp_listen_closed+0x6c>)
 8008220:	480e      	ldr	r0, [pc, #56]	@ (800825c <tcp_listen_closed+0x68>)
 8008222:	f007 ffa5 	bl	8010170 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008226:	2301      	movs	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e00b      	b.n	8008244 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800822c:	4a0d      	ldr	r2, [pc, #52]	@ (8008264 <tcp_listen_closed+0x70>)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff ffb1 	bl	80081a0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2b03      	cmp	r3, #3
 8008248:	d9f0      	bls.n	800822c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	08011b78 	.word	0x08011b78
 8008258:	08011c28 	.word	0x08011c28
 800825c:	08011bbc 	.word	0x08011bbc
 8008260:	08011c34 	.word	0x08011c34
 8008264:	08013b68 	.word	0x08013b68

08008268 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008268:	b5b0      	push	{r4, r5, r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af04      	add	r7, sp, #16
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <tcp_close_shutdown+0x20>
 800827a:	4b63      	ldr	r3, [pc, #396]	@ (8008408 <tcp_close_shutdown+0x1a0>)
 800827c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008280:	4962      	ldr	r1, [pc, #392]	@ (800840c <tcp_close_shutdown+0x1a4>)
 8008282:	4863      	ldr	r0, [pc, #396]	@ (8008410 <tcp_close_shutdown+0x1a8>)
 8008284:	f007 ff74 	bl	8010170 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008288:	78fb      	ldrb	r3, [r7, #3]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d066      	beq.n	800835c <tcp_close_shutdown+0xf4>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	7d1b      	ldrb	r3, [r3, #20]
 8008292:	2b04      	cmp	r3, #4
 8008294:	d003      	beq.n	800829e <tcp_close_shutdown+0x36>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	7d1b      	ldrb	r3, [r3, #20]
 800829a:	2b07      	cmp	r3, #7
 800829c:	d15e      	bne.n	800835c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <tcp_close_shutdown+0x48>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082aa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80082ae:	d055      	beq.n	800835c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8b5b      	ldrh	r3, [r3, #26]
 80082b4:	f003 0310 	and.w	r3, r3, #16
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <tcp_close_shutdown+0x62>
 80082bc:	4b52      	ldr	r3, [pc, #328]	@ (8008408 <tcp_close_shutdown+0x1a0>)
 80082be:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80082c2:	4954      	ldr	r1, [pc, #336]	@ (8008414 <tcp_close_shutdown+0x1ac>)
 80082c4:	4852      	ldr	r0, [pc, #328]	@ (8008410 <tcp_close_shutdown+0x1a8>)
 80082c6:	f007 ff53 	bl	8010170 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80082d2:	687d      	ldr	r5, [r7, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	3304      	adds	r3, #4
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	8ad2      	ldrh	r2, [r2, #22]
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	8b09      	ldrh	r1, [r1, #24]
 80082e0:	9102      	str	r1, [sp, #8]
 80082e2:	9201      	str	r2, [sp, #4]
 80082e4:	9300      	str	r3, [sp, #0]
 80082e6:	462b      	mov	r3, r5
 80082e8:	4622      	mov	r2, r4
 80082ea:	4601      	mov	r1, r0
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f004 fe8d 	bl	800d00c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 f8c8 	bl	8009488 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80082f8:	4b47      	ldr	r3, [pc, #284]	@ (8008418 <tcp_close_shutdown+0x1b0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d105      	bne.n	800830e <tcp_close_shutdown+0xa6>
 8008302:	4b45      	ldr	r3, [pc, #276]	@ (8008418 <tcp_close_shutdown+0x1b0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4a43      	ldr	r2, [pc, #268]	@ (8008418 <tcp_close_shutdown+0x1b0>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	e013      	b.n	8008336 <tcp_close_shutdown+0xce>
 800830e:	4b42      	ldr	r3, [pc, #264]	@ (8008418 <tcp_close_shutdown+0x1b0>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e00c      	b.n	8008330 <tcp_close_shutdown+0xc8>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	429a      	cmp	r2, r3
 800831e:	d104      	bne.n	800832a <tcp_close_shutdown+0xc2>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	60da      	str	r2, [r3, #12]
 8008328:	e005      	b.n	8008336 <tcp_close_shutdown+0xce>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1ef      	bne.n	8008316 <tcp_close_shutdown+0xae>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	60da      	str	r2, [r3, #12]
 800833c:	4b37      	ldr	r3, [pc, #220]	@ (800841c <tcp_close_shutdown+0x1b4>)
 800833e:	2201      	movs	r2, #1
 8008340:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008342:	4b37      	ldr	r3, [pc, #220]	@ (8008420 <tcp_close_shutdown+0x1b8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	429a      	cmp	r2, r3
 800834a:	d102      	bne.n	8008352 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800834c:	f003 fd5c 	bl	800be08 <tcp_trigger_input_pcb_close>
 8008350:	e002      	b.n	8008358 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff fed6 	bl	8008104 <tcp_free>
      }
      return ERR_OK;
 8008358:	2300      	movs	r3, #0
 800835a:	e050      	b.n	80083fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7d1b      	ldrb	r3, [r3, #20]
 8008360:	2b02      	cmp	r3, #2
 8008362:	d03b      	beq.n	80083dc <tcp_close_shutdown+0x174>
 8008364:	2b02      	cmp	r3, #2
 8008366:	dc44      	bgt.n	80083f2 <tcp_close_shutdown+0x18a>
 8008368:	2b00      	cmp	r3, #0
 800836a:	d002      	beq.n	8008372 <tcp_close_shutdown+0x10a>
 800836c:	2b01      	cmp	r3, #1
 800836e:	d02a      	beq.n	80083c6 <tcp_close_shutdown+0x15e>
 8008370:	e03f      	b.n	80083f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	8adb      	ldrh	r3, [r3, #22]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d021      	beq.n	80083be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800837a:	4b2a      	ldr	r3, [pc, #168]	@ (8008424 <tcp_close_shutdown+0x1bc>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	429a      	cmp	r2, r3
 8008382:	d105      	bne.n	8008390 <tcp_close_shutdown+0x128>
 8008384:	4b27      	ldr	r3, [pc, #156]	@ (8008424 <tcp_close_shutdown+0x1bc>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	4a26      	ldr	r2, [pc, #152]	@ (8008424 <tcp_close_shutdown+0x1bc>)
 800838c:	6013      	str	r3, [r2, #0]
 800838e:	e013      	b.n	80083b8 <tcp_close_shutdown+0x150>
 8008390:	4b24      	ldr	r3, [pc, #144]	@ (8008424 <tcp_close_shutdown+0x1bc>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	e00c      	b.n	80083b2 <tcp_close_shutdown+0x14a>
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d104      	bne.n	80083ac <tcp_close_shutdown+0x144>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68da      	ldr	r2, [r3, #12]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	60da      	str	r2, [r3, #12]
 80083aa:	e005      	b.n	80083b8 <tcp_close_shutdown+0x150>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	60bb      	str	r3, [r7, #8]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1ef      	bne.n	8008398 <tcp_close_shutdown+0x130>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7ff fea0 	bl	8008104 <tcp_free>
      break;
 80083c4:	e01a      	b.n	80083fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7ff ff14 	bl	80081f4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4816      	ldr	r0, [pc, #88]	@ (8008428 <tcp_close_shutdown+0x1c0>)
 80083d0:	f001 f8aa 	bl	8009528 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7ff feb1 	bl	800813c <tcp_free_listen>
      break;
 80083da:	e00f      	b.n	80083fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80083dc:	6879      	ldr	r1, [r7, #4]
 80083de:	480e      	ldr	r0, [pc, #56]	@ (8008418 <tcp_close_shutdown+0x1b0>)
 80083e0:	f001 f8a2 	bl	8009528 <tcp_pcb_remove>
 80083e4:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <tcp_close_shutdown+0x1b4>)
 80083e6:	2201      	movs	r2, #1
 80083e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff fe8a 	bl	8008104 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80083f0:	e004      	b.n	80083fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 f81a 	bl	800842c <tcp_close_shutdown_fin>
 80083f8:	4603      	mov	r3, r0
 80083fa:	e000      	b.n	80083fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bdb0      	pop	{r4, r5, r7, pc}
 8008406:	bf00      	nop
 8008408:	08011b78 	.word	0x08011b78
 800840c:	08011c4c 	.word	0x08011c4c
 8008410:	08011bbc 	.word	0x08011bbc
 8008414:	08011c6c 	.word	0x08011c6c
 8008418:	240031e4 	.word	0x240031e4
 800841c:	240031ec 	.word	0x240031ec
 8008420:	24003224 	.word	0x24003224
 8008424:	240031dc 	.word	0x240031dc
 8008428:	240031e0 	.word	0x240031e0

0800842c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b084      	sub	sp, #16
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d106      	bne.n	8008448 <tcp_close_shutdown_fin+0x1c>
 800843a:	4b2e      	ldr	r3, [pc, #184]	@ (80084f4 <tcp_close_shutdown_fin+0xc8>)
 800843c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008440:	492d      	ldr	r1, [pc, #180]	@ (80084f8 <tcp_close_shutdown_fin+0xcc>)
 8008442:	482e      	ldr	r0, [pc, #184]	@ (80084fc <tcp_close_shutdown_fin+0xd0>)
 8008444:	f007 fe94 	bl	8010170 <iprintf>

  switch (pcb->state) {
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7d1b      	ldrb	r3, [r3, #20]
 800844c:	2b07      	cmp	r3, #7
 800844e:	d020      	beq.n	8008492 <tcp_close_shutdown_fin+0x66>
 8008450:	2b07      	cmp	r3, #7
 8008452:	dc2b      	bgt.n	80084ac <tcp_close_shutdown_fin+0x80>
 8008454:	2b03      	cmp	r3, #3
 8008456:	d002      	beq.n	800845e <tcp_close_shutdown_fin+0x32>
 8008458:	2b04      	cmp	r3, #4
 800845a:	d00d      	beq.n	8008478 <tcp_close_shutdown_fin+0x4c>
 800845c:	e026      	b.n	80084ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f003 fee2 	bl	800c228 <tcp_send_fin>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d11f      	bne.n	80084b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2205      	movs	r2, #5
 8008474:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008476:	e01b      	b.n	80084b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f003 fed5 	bl	800c228 <tcp_send_fin>
 800847e:	4603      	mov	r3, r0
 8008480:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d114      	bne.n	80084b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2205      	movs	r2, #5
 800848e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008490:	e010      	b.n	80084b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f003 fec8 	bl	800c228 <tcp_send_fin>
 8008498:	4603      	mov	r3, r0
 800849a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800849c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2209      	movs	r2, #9
 80084a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80084aa:	e005      	b.n	80084b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e01c      	b.n	80084ea <tcp_close_shutdown_fin+0xbe>
      break;
 80084b0:	bf00      	nop
 80084b2:	e002      	b.n	80084ba <tcp_close_shutdown_fin+0x8e>
      break;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <tcp_close_shutdown_fin+0x8e>
      break;
 80084b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80084ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d103      	bne.n	80084ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f003 ffee 	bl	800c4a4 <tcp_output>
 80084c8:	e00d      	b.n	80084e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80084ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d2:	d108      	bne.n	80084e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	8b5b      	ldrh	r3, [r3, #26]
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	b29a      	uxth	r2, r3
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e001      	b.n	80084ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80084e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	08011b78 	.word	0x08011b78
 80084f8:	08011c28 	.word	0x08011c28
 80084fc:	08011bbc 	.word	0x08011bbc

08008500 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <tcp_close+0x22>
 800850e:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <tcp_close+0x4c>)
 8008510:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8008514:	490e      	ldr	r1, [pc, #56]	@ (8008550 <tcp_close+0x50>)
 8008516:	480f      	ldr	r0, [pc, #60]	@ (8008554 <tcp_close+0x54>)
 8008518:	f007 fe2a 	bl	8010170 <iprintf>
 800851c:	f06f 030f 	mvn.w	r3, #15
 8008520:	e00f      	b.n	8008542 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	7d1b      	ldrb	r3, [r3, #20]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d006      	beq.n	8008538 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	8b5b      	ldrh	r3, [r3, #26]
 800852e:	f043 0310 	orr.w	r3, r3, #16
 8008532:	b29a      	uxth	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8008538:	2101      	movs	r1, #1
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff fe94 	bl	8008268 <tcp_close_shutdown>
 8008540:	4603      	mov	r3, r0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	08011b78 	.word	0x08011b78
 8008550:	08011c88 	.word	0x08011c88
 8008554:	08011bbc 	.word	0x08011bbc

08008558 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08e      	sub	sp, #56	@ 0x38
 800855c:	af04      	add	r7, sp, #16
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d107      	bne.n	8008578 <tcp_abandon+0x20>
 8008568:	4b52      	ldr	r3, [pc, #328]	@ (80086b4 <tcp_abandon+0x15c>)
 800856a:	f240 223d 	movw	r2, #573	@ 0x23d
 800856e:	4952      	ldr	r1, [pc, #328]	@ (80086b8 <tcp_abandon+0x160>)
 8008570:	4852      	ldr	r0, [pc, #328]	@ (80086bc <tcp_abandon+0x164>)
 8008572:	f007 fdfd 	bl	8010170 <iprintf>
 8008576:	e099      	b.n	80086ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	7d1b      	ldrb	r3, [r3, #20]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d106      	bne.n	800858e <tcp_abandon+0x36>
 8008580:	4b4c      	ldr	r3, [pc, #304]	@ (80086b4 <tcp_abandon+0x15c>)
 8008582:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8008586:	494e      	ldr	r1, [pc, #312]	@ (80086c0 <tcp_abandon+0x168>)
 8008588:	484c      	ldr	r0, [pc, #304]	@ (80086bc <tcp_abandon+0x164>)
 800858a:	f007 fdf1 	bl	8010170 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	7d1b      	ldrb	r3, [r3, #20]
 8008592:	2b0a      	cmp	r3, #10
 8008594:	d107      	bne.n	80085a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	484a      	ldr	r0, [pc, #296]	@ (80086c4 <tcp_abandon+0x16c>)
 800859a:	f000 ffc5 	bl	8009528 <tcp_pcb_remove>
    tcp_free(pcb);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7ff fdb0 	bl	8008104 <tcp_free>
 80085a4:	e082      	b.n	80086ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7d1b      	ldrb	r3, [r3, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d126      	bne.n	800861e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8adb      	ldrh	r3, [r3, #22]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d02e      	beq.n	8008636 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80085d8:	4b3b      	ldr	r3, [pc, #236]	@ (80086c8 <tcp_abandon+0x170>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d105      	bne.n	80085ee <tcp_abandon+0x96>
 80085e2:	4b39      	ldr	r3, [pc, #228]	@ (80086c8 <tcp_abandon+0x170>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	4a37      	ldr	r2, [pc, #220]	@ (80086c8 <tcp_abandon+0x170>)
 80085ea:	6013      	str	r3, [r2, #0]
 80085ec:	e013      	b.n	8008616 <tcp_abandon+0xbe>
 80085ee:	4b36      	ldr	r3, [pc, #216]	@ (80086c8 <tcp_abandon+0x170>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	e00c      	b.n	8008610 <tcp_abandon+0xb8>
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d104      	bne.n	800860a <tcp_abandon+0xb2>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	68da      	ldr	r2, [r3, #12]
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	60da      	str	r2, [r3, #12]
 8008608:	e005      	b.n	8008616 <tcp_abandon+0xbe>
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1ef      	bne.n	80085f6 <tcp_abandon+0x9e>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	60da      	str	r2, [r3, #12]
 800861c:	e00b      	b.n	8008636 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	8adb      	ldrh	r3, [r3, #22]
 8008626:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4828      	ldr	r0, [pc, #160]	@ (80086cc <tcp_abandon+0x174>)
 800862c:	f000 ff7c 	bl	8009528 <tcp_pcb_remove>
 8008630:	4b27      	ldr	r3, [pc, #156]	@ (80086d0 <tcp_abandon+0x178>)
 8008632:	2201      	movs	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008642:	4618      	mov	r0, r3
 8008644:	f000 fd1e 	bl	8009084 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d004      	beq.n	800865a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fd15 	bl	8009084 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fd0c 	bl	8009084 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00e      	beq.n	8008690 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	8b12      	ldrh	r2, [r2, #24]
 800867c:	9202      	str	r2, [sp, #8]
 800867e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008680:	9201      	str	r2, [sp, #4]
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	460b      	mov	r3, r1
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	69b9      	ldr	r1, [r7, #24]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f004 fcbe 	bl	800d00c <tcp_rst>
    }
    last_state = pcb->state;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	7d1b      	ldrb	r3, [r3, #20]
 8008694:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fd34 	bl	8008104 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <tcp_abandon+0x154>
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f06f 010c 	mvn.w	r1, #12
 80086a8:	68f8      	ldr	r0, [r7, #12]
 80086aa:	4798      	blx	r3
  }
}
 80086ac:	3728      	adds	r7, #40	@ 0x28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	08011b78 	.word	0x08011b78
 80086b8:	08011cbc 	.word	0x08011cbc
 80086bc:	08011bbc 	.word	0x08011bbc
 80086c0:	08011cd8 	.word	0x08011cd8
 80086c4:	240031e8 	.word	0x240031e8
 80086c8:	240031dc 	.word	0x240031dc
 80086cc:	240031e4 	.word	0x240031e4
 80086d0:	240031ec 	.word	0x240031ec

080086d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80086dc:	2101      	movs	r1, #1
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff ff3a 	bl	8008558 <tcp_abandon>
}
 80086e4:	bf00      	nop
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <tcp_update_rcv_ann_wnd+0x1c>
 80086fa:	4b25      	ldr	r3, [pc, #148]	@ (8008790 <tcp_update_rcv_ann_wnd+0xa4>)
 80086fc:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8008700:	4924      	ldr	r1, [pc, #144]	@ (8008794 <tcp_update_rcv_ann_wnd+0xa8>)
 8008702:	4825      	ldr	r0, [pc, #148]	@ (8008798 <tcp_update_rcv_ann_wnd+0xac>)
 8008704:	f007 fd34 	bl	8010170 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008710:	4413      	add	r3, r2
 8008712:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800871c:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8008720:	bf28      	it	cs
 8008722:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8008726:	b292      	uxth	r2, r2
 8008728:	4413      	add	r3, r2
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	db08      	blt.n	8008744 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	e020      	b.n	8008786 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	dd03      	ble.n	800875a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008758:	e014      	b.n	8008784 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800876c:	d306      	bcc.n	800877c <tcp_update_rcv_ann_wnd+0x90>
 800876e:	4b08      	ldr	r3, [pc, #32]	@ (8008790 <tcp_update_rcv_ann_wnd+0xa4>)
 8008770:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8008774:	4909      	ldr	r1, [pc, #36]	@ (800879c <tcp_update_rcv_ann_wnd+0xb0>)
 8008776:	4808      	ldr	r0, [pc, #32]	@ (8008798 <tcp_update_rcv_ann_wnd+0xac>)
 8008778:	f007 fcfa 	bl	8010170 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	b29a      	uxth	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8008784:	2300      	movs	r3, #0
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	08011b78 	.word	0x08011b78
 8008794:	08011dd4 	.word	0x08011dd4
 8008798:	08011bbc 	.word	0x08011bbc
 800879c:	08011df8 	.word	0x08011df8

080087a0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d107      	bne.n	80087c2 <tcp_recved+0x22>
 80087b2:	4b1f      	ldr	r3, [pc, #124]	@ (8008830 <tcp_recved+0x90>)
 80087b4:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80087b8:	491e      	ldr	r1, [pc, #120]	@ (8008834 <tcp_recved+0x94>)
 80087ba:	481f      	ldr	r0, [pc, #124]	@ (8008838 <tcp_recved+0x98>)
 80087bc:	f007 fcd8 	bl	8010170 <iprintf>
 80087c0:	e032      	b.n	8008828 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7d1b      	ldrb	r3, [r3, #20]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d106      	bne.n	80087d8 <tcp_recved+0x38>
 80087ca:	4b19      	ldr	r3, [pc, #100]	@ (8008830 <tcp_recved+0x90>)
 80087cc:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80087d0:	491a      	ldr	r1, [pc, #104]	@ (800883c <tcp_recved+0x9c>)
 80087d2:	4819      	ldr	r0, [pc, #100]	@ (8008838 <tcp_recved+0x98>)
 80087d4:	f007 fccc 	bl	8010170 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80087dc:	887b      	ldrh	r3, [r7, #2]
 80087de:	4413      	add	r3, r2
 80087e0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80087e2:	89fb      	ldrh	r3, [r7, #14]
 80087e4:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80087e8:	d804      	bhi.n	80087f4 <tcp_recved+0x54>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80087ee:	89fa      	ldrh	r2, [r7, #14]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d204      	bcs.n	80087fe <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80087fa:	851a      	strh	r2, [r3, #40]	@ 0x28
 80087fc:	e002      	b.n	8008804 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	89fa      	ldrh	r2, [r7, #14]
 8008802:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff ff71 	bl	80086ec <tcp_update_rcv_ann_wnd>
 800880a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8008812:	d309      	bcc.n	8008828 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	8b5b      	ldrh	r3, [r3, #26]
 8008818:	f043 0302 	orr.w	r3, r3, #2
 800881c:	b29a      	uxth	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f003 fe3e 	bl	800c4a4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	08011b78 	.word	0x08011b78
 8008834:	08011e14 	.word	0x08011e14
 8008838:	08011bbc 	.word	0x08011bbc
 800883c:	08011e2c 	.word	0x08011e2c

08008840 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8008840:	b5b0      	push	{r4, r5, r7, lr}
 8008842:	b090      	sub	sp, #64	@ 0x40
 8008844:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800884c:	4b95      	ldr	r3, [pc, #596]	@ (8008aa4 <tcp_slowtmr+0x264>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3301      	adds	r3, #1
 8008852:	4a94      	ldr	r2, [pc, #592]	@ (8008aa4 <tcp_slowtmr+0x264>)
 8008854:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8008856:	4b94      	ldr	r3, [pc, #592]	@ (8008aa8 <tcp_slowtmr+0x268>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	3301      	adds	r3, #1
 800885c:	b2da      	uxtb	r2, r3
 800885e:	4b92      	ldr	r3, [pc, #584]	@ (8008aa8 <tcp_slowtmr+0x268>)
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	e000      	b.n	8008866 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8008864:	bf00      	nop
  prev = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800886a:	4b90      	ldr	r3, [pc, #576]	@ (8008aac <tcp_slowtmr+0x26c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008870:	e29d      	b.n	8008dae <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008874:	7d1b      	ldrb	r3, [r3, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d106      	bne.n	8008888 <tcp_slowtmr+0x48>
 800887a:	4b8d      	ldr	r3, [pc, #564]	@ (8008ab0 <tcp_slowtmr+0x270>)
 800887c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8008880:	498c      	ldr	r1, [pc, #560]	@ (8008ab4 <tcp_slowtmr+0x274>)
 8008882:	488d      	ldr	r0, [pc, #564]	@ (8008ab8 <tcp_slowtmr+0x278>)
 8008884:	f007 fc74 	bl	8010170 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	7d1b      	ldrb	r3, [r3, #20]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d106      	bne.n	800889e <tcp_slowtmr+0x5e>
 8008890:	4b87      	ldr	r3, [pc, #540]	@ (8008ab0 <tcp_slowtmr+0x270>)
 8008892:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8008896:	4989      	ldr	r1, [pc, #548]	@ (8008abc <tcp_slowtmr+0x27c>)
 8008898:	4887      	ldr	r0, [pc, #540]	@ (8008ab8 <tcp_slowtmr+0x278>)
 800889a:	f007 fc69 	bl	8010170 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800889e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a0:	7d1b      	ldrb	r3, [r3, #20]
 80088a2:	2b0a      	cmp	r3, #10
 80088a4:	d106      	bne.n	80088b4 <tcp_slowtmr+0x74>
 80088a6:	4b82      	ldr	r3, [pc, #520]	@ (8008ab0 <tcp_slowtmr+0x270>)
 80088a8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 80088ac:	4984      	ldr	r1, [pc, #528]	@ (8008ac0 <tcp_slowtmr+0x280>)
 80088ae:	4882      	ldr	r0, [pc, #520]	@ (8008ab8 <tcp_slowtmr+0x278>)
 80088b0:	f007 fc5e 	bl	8010170 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80088b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088b6:	7f9a      	ldrb	r2, [r3, #30]
 80088b8:	4b7b      	ldr	r3, [pc, #492]	@ (8008aa8 <tcp_slowtmr+0x268>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d105      	bne.n	80088cc <tcp_slowtmr+0x8c>
      prev = pcb;
 80088c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80088c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 80088ca:	e270      	b.n	8008dae <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 80088cc:	4b76      	ldr	r3, [pc, #472]	@ (8008aa8 <tcp_slowtmr+0x268>)
 80088ce:	781a      	ldrb	r2, [r3, #0]
 80088d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80088e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e2:	7d1b      	ldrb	r3, [r3, #20]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d10a      	bne.n	80088fe <tcp_slowtmr+0xbe>
 80088e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088ee:	2b05      	cmp	r3, #5
 80088f0:	d905      	bls.n	80088fe <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80088f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088f6:	3301      	adds	r3, #1
 80088f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80088fc:	e11e      	b.n	8008b3c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008904:	2b0b      	cmp	r3, #11
 8008906:	d905      	bls.n	8008914 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8008908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800890c:	3301      	adds	r3, #1
 800890e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008912:	e113      	b.n	8008b3c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8008914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008916:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800891a:	2b00      	cmp	r3, #0
 800891c:	d075      	beq.n	8008a0a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800891e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008922:	2b00      	cmp	r3, #0
 8008924:	d006      	beq.n	8008934 <tcp_slowtmr+0xf4>
 8008926:	4b62      	ldr	r3, [pc, #392]	@ (8008ab0 <tcp_slowtmr+0x270>)
 8008928:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800892c:	4965      	ldr	r1, [pc, #404]	@ (8008ac4 <tcp_slowtmr+0x284>)
 800892e:	4862      	ldr	r0, [pc, #392]	@ (8008ab8 <tcp_slowtmr+0x278>)
 8008930:	f007 fc1e 	bl	8010170 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8008934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008938:	2b00      	cmp	r3, #0
 800893a:	d106      	bne.n	800894a <tcp_slowtmr+0x10a>
 800893c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ab0 <tcp_slowtmr+0x270>)
 800893e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8008942:	4961      	ldr	r1, [pc, #388]	@ (8008ac8 <tcp_slowtmr+0x288>)
 8008944:	485c      	ldr	r0, [pc, #368]	@ (8008ab8 <tcp_slowtmr+0x278>)
 8008946:	f007 fc13 	bl	8010170 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800894a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800894c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8008950:	2b0b      	cmp	r3, #11
 8008952:	d905      	bls.n	8008960 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8008954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008958:	3301      	adds	r3, #1
 800895a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800895e:	e0ed      	b.n	8008b3c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8008966:	3b01      	subs	r3, #1
 8008968:	4a58      	ldr	r2, [pc, #352]	@ (8008acc <tcp_slowtmr+0x28c>)
 800896a:	5cd3      	ldrb	r3, [r2, r3]
 800896c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800896e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008970:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008974:	7c7a      	ldrb	r2, [r7, #17]
 8008976:	429a      	cmp	r2, r3
 8008978:	d907      	bls.n	800898a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008980:	3301      	adds	r3, #1
 8008982:	b2da      	uxtb	r2, r3
 8008984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008986:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800898a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800898c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008990:	7c7a      	ldrb	r2, [r7, #17]
 8008992:	429a      	cmp	r2, r3
 8008994:	f200 80d2 	bhi.w	8008b3c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8008998:	2301      	movs	r3, #1
 800899a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800899c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d108      	bne.n	80089b8 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80089a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089a8:	f004 fc24 	bl	800d1f4 <tcp_zero_window_probe>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d014      	beq.n	80089dc <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 80089b2:	2300      	movs	r3, #0
 80089b4:	623b      	str	r3, [r7, #32]
 80089b6:	e011      	b.n	80089dc <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80089b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80089be:	4619      	mov	r1, r3
 80089c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089c2:	f003 fae9 	bl	800bf98 <tcp_split_unsent_seg>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d107      	bne.n	80089dc <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 80089cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80089ce:	f003 fd69 	bl	800c4a4 <tcp_output>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	f000 80ac 	beq.w	8008b3c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80089e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80089ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ee:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089f2:	2b06      	cmp	r3, #6
 80089f4:	f200 80a2 	bhi.w	8008b3c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80089f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80089fe:	3301      	adds	r3, #1
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a04:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8008a08:	e098      	b.n	8008b3c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8008a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a0c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	db0f      	blt.n	8008a34 <tcp_slowtmr+0x1f4>
 8008a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a16:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a1a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d008      	beq.n	8008a34 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8008a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	b21a      	sxth	r2, r3
 8008a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a32:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8008a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a36:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8008a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a3c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008a40:	429a      	cmp	r2, r3
 8008a42:	db7b      	blt.n	8008b3c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8008a44:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a46:	f004 f821 	bl	800ca8c <tcp_rexmit_rto_prepare>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <tcp_slowtmr+0x220>
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d171      	bne.n	8008b3c <tcp_slowtmr+0x2fc>
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d06d      	beq.n	8008b3c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8008a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a62:	7d1b      	ldrb	r3, [r3, #20]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d03a      	beq.n	8008ade <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8008a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a6e:	2b0c      	cmp	r3, #12
 8008a70:	bf28      	it	cs
 8008a72:	230c      	movcs	r3, #12
 8008a74:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8008a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8008a7c:	10db      	asrs	r3, r3, #3
 8008a7e:	b21b      	sxth	r3, r3
 8008a80:	461a      	mov	r2, r3
 8008a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8008a88:	4413      	add	r3, r2
 8008a8a:	7efa      	ldrb	r2, [r7, #27]
 8008a8c:	4910      	ldr	r1, [pc, #64]	@ (8008ad0 <tcp_slowtmr+0x290>)
 8008a8e:	5c8a      	ldrb	r2, [r1, r2]
 8008a90:	4093      	lsls	r3, r2
 8008a92:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	dc1a      	bgt.n	8008ad4 <tcp_slowtmr+0x294>
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	b21a      	sxth	r2, r3
 8008aa2:	e019      	b.n	8008ad8 <tcp_slowtmr+0x298>
 8008aa4:	240031d8 	.word	0x240031d8
 8008aa8:	240031ee 	.word	0x240031ee
 8008aac:	240031e4 	.word	0x240031e4
 8008ab0:	08011b78 	.word	0x08011b78
 8008ab4:	08011ebc 	.word	0x08011ebc
 8008ab8:	08011bbc 	.word	0x08011bbc
 8008abc:	08011ee8 	.word	0x08011ee8
 8008ac0:	08011f14 	.word	0x08011f14
 8008ac4:	08011f44 	.word	0x08011f44
 8008ac8:	08011f78 	.word	0x08011f78
 8008acc:	08013b60 	.word	0x08013b60
 8008ad0:	08013b50 	.word	0x08013b50
 8008ad4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8008ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8008ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8008ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ae6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8008aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8008af0:	4293      	cmp	r3, r2
 8008af2:	bf28      	it	cs
 8008af4:	4613      	movcs	r3, r2
 8008af6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8008af8:	8a7b      	ldrh	r3, [r7, #18]
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b00:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8008b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8008b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d206      	bcs.n	8008b24 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8008b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b20:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8008b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b26:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8008b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8008b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b30:	2200      	movs	r2, #0
 8008b32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8008b36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b38:	f004 f818 	bl	800cb6c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8008b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b3e:	7d1b      	ldrb	r3, [r3, #20]
 8008b40:	2b06      	cmp	r3, #6
 8008b42:	d111      	bne.n	8008b68 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8008b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b46:	8b5b      	ldrh	r3, [r3, #26]
 8008b48:	f003 0310 	and.w	r3, r3, #16
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b50:	4b9c      	ldr	r3, [pc, #624]	@ (8008dc4 <tcp_slowtmr+0x584>)
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b56:	6a1b      	ldr	r3, [r3, #32]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b28      	cmp	r3, #40	@ 0x28
 8008b5c:	d904      	bls.n	8008b68 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8008b5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b62:	3301      	adds	r3, #1
 8008b64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6a:	7a5b      	ldrb	r3, [r3, #9]
 8008b6c:	f003 0308 	and.w	r3, r3, #8
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d04a      	beq.n	8008c0a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8008b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b76:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008b78:	2b04      	cmp	r3, #4
 8008b7a:	d003      	beq.n	8008b84 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8008b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b7e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8008b80:	2b07      	cmp	r3, #7
 8008b82:	d142      	bne.n	8008c0a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008b84:	4b8f      	ldr	r3, [pc, #572]	@ (8008dc4 <tcp_slowtmr+0x584>)
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008b94:	4b8c      	ldr	r3, [pc, #560]	@ (8008dc8 <tcp_slowtmr+0x588>)
 8008b96:	440b      	add	r3, r1
 8008b98:	498c      	ldr	r1, [pc, #560]	@ (8008dcc <tcp_slowtmr+0x58c>)
 8008b9a:	fba1 1303 	umull	r1, r3, r1, r3
 8008b9e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d90a      	bls.n	8008bba <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8008ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ba8:	3301      	adds	r3, #1
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8008bae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008bb8:	e027      	b.n	8008c0a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008bba:	4b82      	ldr	r3, [pc, #520]	@ (8008dc4 <tcp_slowtmr+0x584>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8008bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bc6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8008bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bcc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8008dd0 <tcp_slowtmr+0x590>)
 8008bd4:	fb00 f303 	mul.w	r3, r0, r3
 8008bd8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8008bda:	497c      	ldr	r1, [pc, #496]	@ (8008dcc <tcp_slowtmr+0x58c>)
 8008bdc:	fba1 1303 	umull	r1, r3, r1, r3
 8008be0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d911      	bls.n	8008c0a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8008be6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008be8:	f004 fac4 	bl	800d174 <tcp_keepalive>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8008bf2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d107      	bne.n	8008c0a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8008bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8008c00:	3301      	adds	r3, #1
 8008c02:	b2da      	uxtb	r2, r3
 8008c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c06:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8008c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d011      	beq.n	8008c36 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8008c12:	4b6c      	ldr	r3, [pc, #432]	@ (8008dc4 <tcp_slowtmr+0x584>)
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	1ad2      	subs	r2, r2, r3
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8008c22:	4619      	mov	r1, r3
 8008c24:	460b      	mov	r3, r1
 8008c26:	005b      	lsls	r3, r3, #1
 8008c28:	440b      	add	r3, r1
 8008c2a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d302      	bcc.n	8008c36 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8008c30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c32:	f000 fddd 	bl	80097f0 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	7d1b      	ldrb	r3, [r3, #20]
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d10b      	bne.n	8008c56 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008c3e:	4b61      	ldr	r3, [pc, #388]	@ (8008dc4 <tcp_slowtmr+0x584>)
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	2b28      	cmp	r3, #40	@ 0x28
 8008c4a:	d904      	bls.n	8008c56 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8008c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c50:	3301      	adds	r3, #1
 8008c52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8008c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c58:	7d1b      	ldrb	r3, [r3, #20]
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d10b      	bne.n	8008c76 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008c5e:	4b59      	ldr	r3, [pc, #356]	@ (8008dc4 <tcp_slowtmr+0x584>)
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	1ad3      	subs	r3, r2, r3
 8008c68:	2bf0      	cmp	r3, #240	@ 0xf0
 8008c6a:	d904      	bls.n	8008c76 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8008c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c70:	3301      	adds	r3, #1
 8008c72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8008c76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d060      	beq.n	8008d40 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8008c7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c84:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8008c86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c88:	f000 fbfe 	bl	8009488 <tcp_pcb_purge>
      if (prev != NULL) {
 8008c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d010      	beq.n	8008cb4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008c92:	4b50      	ldr	r3, [pc, #320]	@ (8008dd4 <tcp_slowtmr+0x594>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d106      	bne.n	8008caa <tcp_slowtmr+0x46a>
 8008c9c:	4b4e      	ldr	r3, [pc, #312]	@ (8008dd8 <tcp_slowtmr+0x598>)
 8008c9e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8008ca2:	494e      	ldr	r1, [pc, #312]	@ (8008ddc <tcp_slowtmr+0x59c>)
 8008ca4:	484e      	ldr	r0, [pc, #312]	@ (8008de0 <tcp_slowtmr+0x5a0>)
 8008ca6:	f007 fa63 	bl	8010170 <iprintf>
        prev->next = pcb->next;
 8008caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cb0:	60da      	str	r2, [r3, #12]
 8008cb2:	e00f      	b.n	8008cd4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8008cb4:	4b47      	ldr	r3, [pc, #284]	@ (8008dd4 <tcp_slowtmr+0x594>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d006      	beq.n	8008ccc <tcp_slowtmr+0x48c>
 8008cbe:	4b46      	ldr	r3, [pc, #280]	@ (8008dd8 <tcp_slowtmr+0x598>)
 8008cc0:	f240 5271 	movw	r2, #1393	@ 0x571
 8008cc4:	4947      	ldr	r1, [pc, #284]	@ (8008de4 <tcp_slowtmr+0x5a4>)
 8008cc6:	4846      	ldr	r0, [pc, #280]	@ (8008de0 <tcp_slowtmr+0x5a0>)
 8008cc8:	f007 fa52 	bl	8010170 <iprintf>
        tcp_active_pcbs = pcb->next;
 8008ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	4a40      	ldr	r2, [pc, #256]	@ (8008dd4 <tcp_slowtmr+0x594>)
 8008cd2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8008cd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d013      	beq.n	8008d04 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cde:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008ce4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8008ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce8:	3304      	adds	r3, #4
 8008cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cec:	8ad2      	ldrh	r2, [r2, #22]
 8008cee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cf0:	8b09      	ldrh	r1, [r1, #24]
 8008cf2:	9102      	str	r1, [sp, #8]
 8008cf4:	9201      	str	r2, [sp, #4]
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4601      	mov	r1, r0
 8008cfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008d00:	f004 f984 	bl	800d00c <tcp_rst>
      err_arg = pcb->callback_arg;
 8008d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8008d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d0c:	7d1b      	ldrb	r3, [r3, #20]
 8008d0e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8008d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d12:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8008d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008d1a:	6838      	ldr	r0, [r7, #0]
 8008d1c:	f7ff f9f2 	bl	8008104 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8008d20:	4b31      	ldr	r3, [pc, #196]	@ (8008de8 <tcp_slowtmr+0x5a8>)
 8008d22:	2200      	movs	r2, #0
 8008d24:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <tcp_slowtmr+0x4f6>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f06f 010c 	mvn.w	r1, #12
 8008d32:	68b8      	ldr	r0, [r7, #8]
 8008d34:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8008d36:	4b2c      	ldr	r3, [pc, #176]	@ (8008de8 <tcp_slowtmr+0x5a8>)
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d037      	beq.n	8008dae <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8008d3e:	e592      	b.n	8008866 <tcp_slowtmr+0x26>
      prev = pcb;
 8008d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d42:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d46:	68db      	ldr	r3, [r3, #12]
 8008d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8008d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d4c:	7f1b      	ldrb	r3, [r3, #28]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d54:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8008d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d58:	7f1a      	ldrb	r2, [r3, #28]
 8008d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5c:	7f5b      	ldrb	r3, [r3, #29]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d325      	bcc.n	8008dae <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8008d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8008d68:	4b1f      	ldr	r3, [pc, #124]	@ (8008de8 <tcp_slowtmr+0x5a8>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8008d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d00b      	beq.n	8008d90 <tcp_slowtmr+0x550>
 8008d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d80:	6912      	ldr	r2, [r2, #16]
 8008d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8008d8e:	e002      	b.n	8008d96 <tcp_slowtmr+0x556>
 8008d90:	2300      	movs	r3, #0
 8008d92:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8008d96:	4b14      	ldr	r3, [pc, #80]	@ (8008de8 <tcp_slowtmr+0x5a8>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f47f ad62 	bne.w	8008864 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8008da0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8008da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008daa:	f003 fb7b 	bl	800c4a4 <tcp_output>
  while (pcb != NULL) {
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f47f ad5e 	bne.w	8008872 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8008dba:	4b0c      	ldr	r3, [pc, #48]	@ (8008dec <tcp_slowtmr+0x5ac>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008dc0:	e069      	b.n	8008e96 <tcp_slowtmr+0x656>
 8008dc2:	bf00      	nop
 8008dc4:	240031d8 	.word	0x240031d8
 8008dc8:	000a4cb8 	.word	0x000a4cb8
 8008dcc:	10624dd3 	.word	0x10624dd3
 8008dd0:	000124f8 	.word	0x000124f8
 8008dd4:	240031e4 	.word	0x240031e4
 8008dd8:	08011b78 	.word	0x08011b78
 8008ddc:	08011fb0 	.word	0x08011fb0
 8008de0:	08011bbc 	.word	0x08011bbc
 8008de4:	08011fdc 	.word	0x08011fdc
 8008de8:	240031ec 	.word	0x240031ec
 8008dec:	240031e8 	.word	0x240031e8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df2:	7d1b      	ldrb	r3, [r3, #20]
 8008df4:	2b0a      	cmp	r3, #10
 8008df6:	d006      	beq.n	8008e06 <tcp_slowtmr+0x5c6>
 8008df8:	4b2b      	ldr	r3, [pc, #172]	@ (8008ea8 <tcp_slowtmr+0x668>)
 8008dfa:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8008dfe:	492b      	ldr	r1, [pc, #172]	@ (8008eac <tcp_slowtmr+0x66c>)
 8008e00:	482b      	ldr	r0, [pc, #172]	@ (8008eb0 <tcp_slowtmr+0x670>)
 8008e02:	f007 f9b5 	bl	8010170 <iprintf>
    pcb_remove = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008e0c:	4b29      	ldr	r3, [pc, #164]	@ (8008eb4 <tcp_slowtmr+0x674>)
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	2bf0      	cmp	r3, #240	@ 0xf0
 8008e18:	d904      	bls.n	8008e24 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8008e1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e1e:	3301      	adds	r3, #1
 8008e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008e24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d02f      	beq.n	8008e8c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008e2c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008e2e:	f000 fb2b 	bl	8009488 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d010      	beq.n	8008e5a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8008e38:	4b1f      	ldr	r3, [pc, #124]	@ (8008eb8 <tcp_slowtmr+0x678>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d106      	bne.n	8008e50 <tcp_slowtmr+0x610>
 8008e42:	4b19      	ldr	r3, [pc, #100]	@ (8008ea8 <tcp_slowtmr+0x668>)
 8008e44:	f240 52af 	movw	r2, #1455	@ 0x5af
 8008e48:	491c      	ldr	r1, [pc, #112]	@ (8008ebc <tcp_slowtmr+0x67c>)
 8008e4a:	4819      	ldr	r0, [pc, #100]	@ (8008eb0 <tcp_slowtmr+0x670>)
 8008e4c:	f007 f990 	bl	8010170 <iprintf>
        prev->next = pcb->next;
 8008e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e56:	60da      	str	r2, [r3, #12]
 8008e58:	e00f      	b.n	8008e7a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8008e5a:	4b17      	ldr	r3, [pc, #92]	@ (8008eb8 <tcp_slowtmr+0x678>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d006      	beq.n	8008e72 <tcp_slowtmr+0x632>
 8008e64:	4b10      	ldr	r3, [pc, #64]	@ (8008ea8 <tcp_slowtmr+0x668>)
 8008e66:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8008e6a:	4915      	ldr	r1, [pc, #84]	@ (8008ec0 <tcp_slowtmr+0x680>)
 8008e6c:	4810      	ldr	r0, [pc, #64]	@ (8008eb0 <tcp_slowtmr+0x670>)
 8008e6e:	f007 f97f 	bl	8010170 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	4a10      	ldr	r2, [pc, #64]	@ (8008eb8 <tcp_slowtmr+0x678>)
 8008e78:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8008e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8008e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8008e84:	69f8      	ldr	r0, [r7, #28]
 8008e86:	f7ff f93d 	bl	8008104 <tcp_free>
 8008e8a:	e004      	b.n	8008e96 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8008e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8008e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8008e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1a9      	bne.n	8008df0 <tcp_slowtmr+0x5b0>
    }
  }
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	3730      	adds	r7, #48	@ 0x30
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	08011b78 	.word	0x08011b78
 8008eac:	08012008 	.word	0x08012008
 8008eb0:	08011bbc 	.word	0x08011bbc
 8008eb4:	240031d8 	.word	0x240031d8
 8008eb8:	240031e8 	.word	0x240031e8
 8008ebc:	08012038 	.word	0x08012038
 8008ec0:	08012060 	.word	0x08012060

08008ec4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8008eca:	4b2d      	ldr	r3, [pc, #180]	@ (8008f80 <tcp_fasttmr+0xbc>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8008f80 <tcp_fasttmr+0xbc>)
 8008ed4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8008f84 <tcp_fasttmr+0xc0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008edc:	e048      	b.n	8008f70 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	7f9a      	ldrb	r2, [r3, #30]
 8008ee2:	4b27      	ldr	r3, [pc, #156]	@ (8008f80 <tcp_fasttmr+0xbc>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d03f      	beq.n	8008f6a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8008eea:	4b25      	ldr	r3, [pc, #148]	@ (8008f80 <tcp_fasttmr+0xbc>)
 8008eec:	781a      	ldrb	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	8b5b      	ldrh	r3, [r3, #26]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d010      	beq.n	8008f20 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	8b5b      	ldrh	r3, [r3, #26]
 8008f02:	f043 0302 	orr.w	r3, r3, #2
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f003 fac9 	bl	800c4a4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	8b5b      	ldrh	r3, [r3, #26]
 8008f16:	f023 0303 	bic.w	r3, r3, #3
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	8b5b      	ldrh	r3, [r3, #26]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d009      	beq.n	8008f40 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	8b5b      	ldrh	r3, [r3, #26]
 8008f30:	f023 0308 	bic.w	r3, r3, #8
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff fa76 	bl	800842c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f88 <tcp_fasttmr+0xc4>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f819 	bl	8008f8c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f88 <tcp_fasttmr+0xc4>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d000      	beq.n	8008f64 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008f62:	e7b8      	b.n	8008ed6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	e002      	b.n	8008f70 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1b3      	bne.n	8008ede <tcp_fasttmr+0x1a>
    }
  }
}
 8008f76:	bf00      	nop
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	240031ee 	.word	0x240031ee
 8008f84:	240031e4 	.word	0x240031e4
 8008f88:	240031ec 	.word	0x240031ec

08008f8c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8008f8c:	b590      	push	{r4, r7, lr}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d109      	bne.n	8008fae <tcp_process_refused_data+0x22>
 8008f9a:	4b37      	ldr	r3, [pc, #220]	@ (8009078 <tcp_process_refused_data+0xec>)
 8008f9c:	f240 6209 	movw	r2, #1545	@ 0x609
 8008fa0:	4936      	ldr	r1, [pc, #216]	@ (800907c <tcp_process_refused_data+0xf0>)
 8008fa2:	4837      	ldr	r0, [pc, #220]	@ (8009080 <tcp_process_refused_data+0xf4>)
 8008fa4:	f007 f8e4 	bl	8010170 <iprintf>
 8008fa8:	f06f 030f 	mvn.w	r3, #15
 8008fac:	e060      	b.n	8009070 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fb2:	7b5b      	ldrb	r3, [r3, #13]
 8008fb4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008fba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <tcp_process_refused_data+0x58>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6918      	ldr	r0, [r3, #16]
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	47a0      	blx	r4
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73fb      	strb	r3, [r7, #15]
 8008fe2:	e007      	b.n	8008ff4 <tcp_process_refused_data+0x68>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	68ba      	ldr	r2, [r7, #8]
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	2000      	movs	r0, #0
 8008fec:	f000 f8a4 	bl	8009138 <tcp_recv_null>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d12a      	bne.n	8009052 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	d033      	beq.n	800906e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800900a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800900e:	d005      	beq.n	800901c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009014:	3301      	adds	r3, #1
 8009016:	b29a      	uxth	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009022:	2b00      	cmp	r3, #0
 8009024:	d00b      	beq.n	800903e <tcp_process_refused_data+0xb2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6918      	ldr	r0, [r3, #16]
 8009030:	2300      	movs	r3, #0
 8009032:	2200      	movs	r2, #0
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	47a0      	blx	r4
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]
 800903c:	e001      	b.n	8009042 <tcp_process_refused_data+0xb6>
 800903e:	2300      	movs	r3, #0
 8009040:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009046:	f113 0f0d 	cmn.w	r3, #13
 800904a:	d110      	bne.n	800906e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800904c:	f06f 030c 	mvn.w	r3, #12
 8009050:	e00e      	b.n	8009070 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009056:	f113 0f0d 	cmn.w	r3, #13
 800905a:	d102      	bne.n	8009062 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800905c:	f06f 030c 	mvn.w	r3, #12
 8009060:	e006      	b.n	8009070 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009068:	f06f 0304 	mvn.w	r3, #4
 800906c:	e000      	b.n	8009070 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800906e:	2300      	movs	r3, #0
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	bd90      	pop	{r4, r7, pc}
 8009078:	08011b78 	.word	0x08011b78
 800907c:	08012088 	.word	0x08012088
 8009080:	08011bbc 	.word	0x08011bbc

08009084 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800908c:	e007      	b.n	800909e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f80a 	bl	80090ae <tcp_seg_free>
    seg = next;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1f4      	bne.n	800908e <tcp_segs_free+0xa>
  }
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop
 80090a8:	3710      	adds	r7, #16
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00c      	beq.n	80090d6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d004      	beq.n	80090ce <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe fd7b 	bl	8007bc4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80090ce:	6879      	ldr	r1, [r7, #4]
 80090d0:	2003      	movs	r0, #3
 80090d2:	f7fd ff01 	bl	8006ed8 <memp_free>
  }
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <tcp_seg_copy+0x1c>
 80090ee:	4b0f      	ldr	r3, [pc, #60]	@ (800912c <tcp_seg_copy+0x4c>)
 80090f0:	f240 6282 	movw	r2, #1666	@ 0x682
 80090f4:	490e      	ldr	r1, [pc, #56]	@ (8009130 <tcp_seg_copy+0x50>)
 80090f6:	480f      	ldr	r0, [pc, #60]	@ (8009134 <tcp_seg_copy+0x54>)
 80090f8:	f007 f83a 	bl	8010170 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80090fc:	2003      	movs	r0, #3
 80090fe:	f7fd fe7b 	bl	8006df8 <memp_malloc>
 8009102:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <tcp_seg_copy+0x2e>
    return NULL;
 800910a:	2300      	movs	r3, #0
 800910c:	e00a      	b.n	8009124 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800910e:	2210      	movs	r2, #16
 8009110:	6879      	ldr	r1, [r7, #4]
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f007 f9f9 	bl	801050a <memcpy>
  pbuf_ref(cseg->p);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	4618      	mov	r0, r3
 800911e:	f7fe fdf1 	bl	8007d04 <pbuf_ref>
  return cseg;
 8009122:	68fb      	ldr	r3, [r7, #12]
}
 8009124:	4618      	mov	r0, r3
 8009126:	3710      	adds	r7, #16
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	08011b78 	.word	0x08011b78
 8009130:	080120cc 	.word	0x080120cc
 8009134:	08011bbc 	.word	0x08011bbc

08009138 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <tcp_recv_null+0x28>
 800914c:	4b12      	ldr	r3, [pc, #72]	@ (8009198 <tcp_recv_null+0x60>)
 800914e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8009152:	4912      	ldr	r1, [pc, #72]	@ (800919c <tcp_recv_null+0x64>)
 8009154:	4812      	ldr	r0, [pc, #72]	@ (80091a0 <tcp_recv_null+0x68>)
 8009156:	f007 f80b 	bl	8010170 <iprintf>
 800915a:	f06f 030f 	mvn.w	r3, #15
 800915e:	e016      	b.n	800918e <tcp_recv_null+0x56>

  if (p != NULL) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d009      	beq.n	800917a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	891b      	ldrh	r3, [r3, #8]
 800916a:	4619      	mov	r1, r3
 800916c:	68b8      	ldr	r0, [r7, #8]
 800916e:	f7ff fb17 	bl	80087a0 <tcp_recved>
    pbuf_free(p);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7fe fd26 	bl	8007bc4 <pbuf_free>
 8009178:	e008      	b.n	800918c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800917a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8009182:	68b8      	ldr	r0, [r7, #8]
 8009184:	f7ff f9bc 	bl	8008500 <tcp_close>
 8009188:	4603      	mov	r3, r0
 800918a:	e000      	b.n	800918e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	3710      	adds	r7, #16
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	08011b78 	.word	0x08011b78
 800919c:	080120e8 	.word	0x080120e8
 80091a0:	08011bbc 	.word	0x08011bbc

080091a4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80091ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	db01      	blt.n	80091ba <tcp_kill_prio+0x16>
 80091b6:	79fb      	ldrb	r3, [r7, #7]
 80091b8:	e000      	b.n	80091bc <tcp_kill_prio+0x18>
 80091ba:	237f      	movs	r3, #127	@ 0x7f
 80091bc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d034      	beq.n	800922e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	3b01      	subs	r3, #1
 80091c8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80091d2:	4b19      	ldr	r3, [pc, #100]	@ (8009238 <tcp_kill_prio+0x94>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	617b      	str	r3, [r7, #20]
 80091d8:	e01f      	b.n	800921a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	7d5b      	ldrb	r3, [r3, #21]
 80091de:	7afa      	ldrb	r2, [r7, #11]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d80c      	bhi.n	80091fe <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80091e8:	7afa      	ldrb	r2, [r7, #11]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d112      	bne.n	8009214 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80091ee:	4b13      	ldr	r3, [pc, #76]	@ (800923c <tcp_kill_prio+0x98>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d80a      	bhi.n	8009214 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80091fe:	4b0f      	ldr	r3, [pc, #60]	@ (800923c <tcp_kill_prio+0x98>)
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	7d5b      	ldrb	r3, [r3, #21]
 8009212:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	617b      	str	r3, [r7, #20]
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1dc      	bne.n	80091da <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d004      	beq.n	8009230 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f7ff fa54 	bl	80086d4 <tcp_abort>
 800922c:	e000      	b.n	8009230 <tcp_kill_prio+0x8c>
    return;
 800922e:	bf00      	nop
  }
}
 8009230:	3718      	adds	r7, #24
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	240031e4 	.word	0x240031e4
 800923c:	240031d8 	.word	0x240031d8

08009240 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	2b08      	cmp	r3, #8
 800924e:	d009      	beq.n	8009264 <tcp_kill_state+0x24>
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b09      	cmp	r3, #9
 8009254:	d006      	beq.n	8009264 <tcp_kill_state+0x24>
 8009256:	4b1a      	ldr	r3, [pc, #104]	@ (80092c0 <tcp_kill_state+0x80>)
 8009258:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800925c:	4919      	ldr	r1, [pc, #100]	@ (80092c4 <tcp_kill_state+0x84>)
 800925e:	481a      	ldr	r0, [pc, #104]	@ (80092c8 <tcp_kill_state+0x88>)
 8009260:	f006 ff86 	bl	8010170 <iprintf>

  inactivity = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8009268:	2300      	movs	r3, #0
 800926a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800926c:	4b17      	ldr	r3, [pc, #92]	@ (80092cc <tcp_kill_state+0x8c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	617b      	str	r3, [r7, #20]
 8009272:	e017      	b.n	80092a4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	7d1b      	ldrb	r3, [r3, #20]
 8009278:	79fa      	ldrb	r2, [r7, #7]
 800927a:	429a      	cmp	r2, r3
 800927c:	d10f      	bne.n	800929e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800927e:	4b14      	ldr	r3, [pc, #80]	@ (80092d0 <tcp_kill_state+0x90>)
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	429a      	cmp	r2, r3
 800928c:	d807      	bhi.n	800929e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800928e:	4b10      	ldr	r3, [pc, #64]	@ (80092d0 <tcp_kill_state+0x90>)
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	6a1b      	ldr	r3, [r3, #32]
 8009296:	1ad3      	subs	r3, r2, r3
 8009298:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	617b      	str	r3, [r7, #20]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e4      	bne.n	8009274 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d003      	beq.n	80092b8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80092b0:	2100      	movs	r1, #0
 80092b2:	6938      	ldr	r0, [r7, #16]
 80092b4:	f7ff f950 	bl	8008558 <tcp_abandon>
  }
}
 80092b8:	bf00      	nop
 80092ba:	3718      	adds	r7, #24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	08011b78 	.word	0x08011b78
 80092c4:	08012104 	.word	0x08012104
 80092c8:	08011bbc 	.word	0x08011bbc
 80092cc:	240031e4 	.word	0x240031e4
 80092d0:	240031d8 	.word	0x240031d8

080092d4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80092de:	2300      	movs	r3, #0
 80092e0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80092e2:	4b12      	ldr	r3, [pc, #72]	@ (800932c <tcp_kill_timewait+0x58>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e012      	b.n	8009310 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80092ea:	4b11      	ldr	r3, [pc, #68]	@ (8009330 <tcp_kill_timewait+0x5c>)
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a1b      	ldr	r3, [r3, #32]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d807      	bhi.n	800930a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80092fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009330 <tcp_kill_timewait+0x5c>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	1ad3      	subs	r3, r2, r3
 8009304:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1e9      	bne.n	80092ea <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800931c:	68b8      	ldr	r0, [r7, #8]
 800931e:	f7ff f9d9 	bl	80086d4 <tcp_abort>
  }
}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	240031e8 	.word	0x240031e8
 8009330:	240031d8 	.word	0x240031d8

08009334 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800933a:	4b10      	ldr	r3, [pc, #64]	@ (800937c <tcp_handle_closepend+0x48>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009340:	e014      	b.n	800936c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	8b5b      	ldrh	r3, [r3, #26]
 800934c:	f003 0308 	and.w	r3, r3, #8
 8009350:	2b00      	cmp	r3, #0
 8009352:	d009      	beq.n	8009368 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	8b5b      	ldrh	r3, [r3, #26]
 8009358:	f023 0308 	bic.w	r3, r3, #8
 800935c:	b29a      	uxth	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff f862 	bl	800842c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e7      	bne.n	8009342 <tcp_handle_closepend+0xe>
  }
}
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	240031e4 	.word	0x240031e4

08009380 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	4603      	mov	r3, r0
 8009388:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800938a:	2001      	movs	r0, #1
 800938c:	f7fd fd34 	bl	8006df8 <memp_malloc>
 8009390:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d126      	bne.n	80093e6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8009398:	f7ff ffcc 	bl	8009334 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800939c:	f7ff ff9a 	bl	80092d4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093a0:	2001      	movs	r0, #1
 80093a2:	f7fd fd29 	bl	8006df8 <memp_malloc>
 80093a6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d11b      	bne.n	80093e6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80093ae:	2009      	movs	r0, #9
 80093b0:	f7ff ff46 	bl	8009240 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093b4:	2001      	movs	r0, #1
 80093b6:	f7fd fd1f 	bl	8006df8 <memp_malloc>
 80093ba:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d111      	bne.n	80093e6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80093c2:	2008      	movs	r0, #8
 80093c4:	f7ff ff3c 	bl	8009240 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093c8:	2001      	movs	r0, #1
 80093ca:	f7fd fd15 	bl	8006df8 <memp_malloc>
 80093ce:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d107      	bne.n	80093e6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	4618      	mov	r0, r3
 80093da:	f7ff fee3 	bl	80091a4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093de:	2001      	movs	r0, #1
 80093e0:	f7fd fd0a 	bl	8006df8 <memp_malloc>
 80093e4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d03f      	beq.n	800946c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093ec:	229c      	movs	r2, #156	@ 0x9c
 80093ee:	2100      	movs	r1, #0
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f007 f815 	bl	8010420 <memset>
    pcb->prio = prio;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	79fa      	ldrb	r2, [r7, #7]
 80093fa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009402:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800940c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	22ff      	movs	r2, #255	@ 0xff
 800941a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009422:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2206      	movs	r2, #6
 8009428:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2206      	movs	r2, #6
 8009430:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009438:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2201      	movs	r2, #1
 800943e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8009442:	4b0d      	ldr	r3, [pc, #52]	@ (8009478 <tcp_alloc+0xf8>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800944a:	4b0c      	ldr	r3, [pc, #48]	@ (800947c <tcp_alloc+0xfc>)
 800944c:	781a      	ldrb	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8009458:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	4a08      	ldr	r2, [pc, #32]	@ (8009480 <tcp_alloc+0x100>)
 8009460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4a07      	ldr	r2, [pc, #28]	@ (8009484 <tcp_alloc+0x104>)
 8009468:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800946c:	68fb      	ldr	r3, [r7, #12]
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	240031d8 	.word	0x240031d8
 800947c:	240031ee 	.word	0x240031ee
 8009480:	08009139 	.word	0x08009139
 8009484:	006ddd00 	.word	0x006ddd00

08009488 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d107      	bne.n	80094a6 <tcp_pcb_purge+0x1e>
 8009496:	4b21      	ldr	r3, [pc, #132]	@ (800951c <tcp_pcb_purge+0x94>)
 8009498:	f640 0251 	movw	r2, #2129	@ 0x851
 800949c:	4920      	ldr	r1, [pc, #128]	@ (8009520 <tcp_pcb_purge+0x98>)
 800949e:	4821      	ldr	r0, [pc, #132]	@ (8009524 <tcp_pcb_purge+0x9c>)
 80094a0:	f006 fe66 	bl	8010170 <iprintf>
 80094a4:	e037      	b.n	8009516 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	7d1b      	ldrb	r3, [r3, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d033      	beq.n	8009516 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80094b2:	2b0a      	cmp	r3, #10
 80094b4:	d02f      	beq.n	8009516 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d02b      	beq.n	8009516 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d007      	beq.n	80094d6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fb7a 	bl	8007bc4 <pbuf_free>
      pcb->refused_data = NULL;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f986 	bl	80097f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80094ea:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7ff fdc7 	bl	8009084 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7ff fdc2 	bl	8009084 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2200      	movs	r2, #0
 8009504:	66da      	str	r2, [r3, #108]	@ 0x6c
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8009516:	3708      	adds	r7, #8
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	08011b78 	.word	0x08011b78
 8009520:	080121c4 	.word	0x080121c4
 8009524:	08011bbc 	.word	0x08011bbc

08009528 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <tcp_pcb_remove+0x1e>
 8009538:	4b3e      	ldr	r3, [pc, #248]	@ (8009634 <tcp_pcb_remove+0x10c>)
 800953a:	f640 0283 	movw	r2, #2179	@ 0x883
 800953e:	493e      	ldr	r1, [pc, #248]	@ (8009638 <tcp_pcb_remove+0x110>)
 8009540:	483e      	ldr	r0, [pc, #248]	@ (800963c <tcp_pcb_remove+0x114>)
 8009542:	f006 fe15 	bl	8010170 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <tcp_pcb_remove+0x32>
 800954c:	4b39      	ldr	r3, [pc, #228]	@ (8009634 <tcp_pcb_remove+0x10c>)
 800954e:	f640 0284 	movw	r2, #2180	@ 0x884
 8009552:	493b      	ldr	r1, [pc, #236]	@ (8009640 <tcp_pcb_remove+0x118>)
 8009554:	4839      	ldr	r0, [pc, #228]	@ (800963c <tcp_pcb_remove+0x114>)
 8009556:	f006 fe0b 	bl	8010170 <iprintf>

  TCP_RMV(pcblist, pcb);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d105      	bne.n	8009570 <tcp_pcb_remove+0x48>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	e013      	b.n	8009598 <tcp_pcb_remove+0x70>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	60fb      	str	r3, [r7, #12]
 8009576:	e00c      	b.n	8009592 <tcp_pcb_remove+0x6a>
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	683a      	ldr	r2, [r7, #0]
 800957e:	429a      	cmp	r2, r3
 8009580:	d104      	bne.n	800958c <tcp_pcb_remove+0x64>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	68da      	ldr	r2, [r3, #12]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	60da      	str	r2, [r3, #12]
 800958a:	e005      	b.n	8009598 <tcp_pcb_remove+0x70>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	60fb      	str	r3, [r7, #12]
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1ef      	bne.n	8009578 <tcp_pcb_remove+0x50>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800959e:	6838      	ldr	r0, [r7, #0]
 80095a0:	f7ff ff72 	bl	8009488 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	7d1b      	ldrb	r3, [r3, #20]
 80095a8:	2b0a      	cmp	r3, #10
 80095aa:	d013      	beq.n	80095d4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d00f      	beq.n	80095d4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	8b5b      	ldrh	r3, [r3, #26]
 80095b8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d009      	beq.n	80095d4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	8b5b      	ldrh	r3, [r3, #26]
 80095c4:	f043 0302 	orr.w	r3, r3, #2
 80095c8:	b29a      	uxth	r2, r3
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80095ce:	6838      	ldr	r0, [r7, #0]
 80095d0:	f002 ff68 	bl	800c4a4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	7d1b      	ldrb	r3, [r3, #20]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d020      	beq.n	800961e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d006      	beq.n	80095f2 <tcp_pcb_remove+0xca>
 80095e4:	4b13      	ldr	r3, [pc, #76]	@ (8009634 <tcp_pcb_remove+0x10c>)
 80095e6:	f640 0293 	movw	r2, #2195	@ 0x893
 80095ea:	4916      	ldr	r1, [pc, #88]	@ (8009644 <tcp_pcb_remove+0x11c>)
 80095ec:	4813      	ldr	r0, [pc, #76]	@ (800963c <tcp_pcb_remove+0x114>)
 80095ee:	f006 fdbf 	bl	8010170 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d006      	beq.n	8009608 <tcp_pcb_remove+0xe0>
 80095fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009634 <tcp_pcb_remove+0x10c>)
 80095fc:	f640 0294 	movw	r2, #2196	@ 0x894
 8009600:	4911      	ldr	r1, [pc, #68]	@ (8009648 <tcp_pcb_remove+0x120>)
 8009602:	480e      	ldr	r0, [pc, #56]	@ (800963c <tcp_pcb_remove+0x114>)
 8009604:	f006 fdb4 	bl	8010170 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800960c:	2b00      	cmp	r3, #0
 800960e:	d006      	beq.n	800961e <tcp_pcb_remove+0xf6>
 8009610:	4b08      	ldr	r3, [pc, #32]	@ (8009634 <tcp_pcb_remove+0x10c>)
 8009612:	f640 0296 	movw	r2, #2198	@ 0x896
 8009616:	490d      	ldr	r1, [pc, #52]	@ (800964c <tcp_pcb_remove+0x124>)
 8009618:	4808      	ldr	r0, [pc, #32]	@ (800963c <tcp_pcb_remove+0x114>)
 800961a:	f006 fda9 	bl	8010170 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2200      	movs	r2, #0
 8009622:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	2200      	movs	r2, #0
 8009628:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	08011b78 	.word	0x08011b78
 8009638:	080121e0 	.word	0x080121e0
 800963c:	08011bbc 	.word	0x08011bbc
 8009640:	080121fc 	.word	0x080121fc
 8009644:	0801221c 	.word	0x0801221c
 8009648:	08012234 	.word	0x08012234
 800964c:	08012250 	.word	0x08012250

08009650 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <tcp_next_iss+0x1c>
 800965e:	4b0a      	ldr	r3, [pc, #40]	@ (8009688 <tcp_next_iss+0x38>)
 8009660:	f640 02af 	movw	r2, #2223	@ 0x8af
 8009664:	4909      	ldr	r1, [pc, #36]	@ (800968c <tcp_next_iss+0x3c>)
 8009666:	480a      	ldr	r0, [pc, #40]	@ (8009690 <tcp_next_iss+0x40>)
 8009668:	f006 fd82 	bl	8010170 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800966c:	4b09      	ldr	r3, [pc, #36]	@ (8009694 <tcp_next_iss+0x44>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	4b09      	ldr	r3, [pc, #36]	@ (8009698 <tcp_next_iss+0x48>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4413      	add	r3, r2
 8009676:	4a07      	ldr	r2, [pc, #28]	@ (8009694 <tcp_next_iss+0x44>)
 8009678:	6013      	str	r3, [r2, #0]
  return iss;
 800967a:	4b06      	ldr	r3, [pc, #24]	@ (8009694 <tcp_next_iss+0x44>)
 800967c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	08011b78 	.word	0x08011b78
 800968c:	08012268 	.word	0x08012268
 8009690:	08011bbc 	.word	0x08011bbc
 8009694:	2400002c 	.word	0x2400002c
 8009698:	240031d8 	.word	0x240031d8

0800969c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b086      	sub	sp, #24
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
 80096a8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d106      	bne.n	80096be <tcp_eff_send_mss_netif+0x22>
 80096b0:	4b14      	ldr	r3, [pc, #80]	@ (8009704 <tcp_eff_send_mss_netif+0x68>)
 80096b2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80096b6:	4914      	ldr	r1, [pc, #80]	@ (8009708 <tcp_eff_send_mss_netif+0x6c>)
 80096b8:	4814      	ldr	r0, [pc, #80]	@ (800970c <tcp_eff_send_mss_netif+0x70>)
 80096ba:	f006 fd59 	bl	8010170 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80096c4:	89fb      	ldrh	r3, [r7, #14]
 80096c6:	e019      	b.n	80096fc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80096cc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80096ce:	8afb      	ldrh	r3, [r7, #22]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d012      	beq.n	80096fa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80096d4:	2328      	movs	r3, #40	@ 0x28
 80096d6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80096d8:	8afa      	ldrh	r2, [r7, #22]
 80096da:	8abb      	ldrh	r3, [r7, #20]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d904      	bls.n	80096ea <tcp_eff_send_mss_netif+0x4e>
 80096e0:	8afa      	ldrh	r2, [r7, #22]
 80096e2:	8abb      	ldrh	r3, [r7, #20]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	e000      	b.n	80096ec <tcp_eff_send_mss_netif+0x50>
 80096ea:	2300      	movs	r3, #0
 80096ec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80096ee:	8a7a      	ldrh	r2, [r7, #18]
 80096f0:	89fb      	ldrh	r3, [r7, #14]
 80096f2:	4293      	cmp	r3, r2
 80096f4:	bf28      	it	cs
 80096f6:	4613      	movcs	r3, r2
 80096f8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80096fa:	89fb      	ldrh	r3, [r7, #14]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	08011b78 	.word	0x08011b78
 8009708:	08012284 	.word	0x08012284
 800970c:	08011bbc 	.word	0x08011bbc

08009710 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d119      	bne.n	8009758 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8009724:	4b10      	ldr	r3, [pc, #64]	@ (8009768 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8009726:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800972a:	4910      	ldr	r1, [pc, #64]	@ (800976c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800972c:	4810      	ldr	r0, [pc, #64]	@ (8009770 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800972e:	f006 fd1f 	bl	8010170 <iprintf>

  while (pcb != NULL) {
 8009732:	e011      	b.n	8009758 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	429a      	cmp	r2, r3
 800973e:	d108      	bne.n	8009752 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f7fe ffc4 	bl	80086d4 <tcp_abort>
      pcb = next;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	60fb      	str	r3, [r7, #12]
 8009750:	e002      	b.n	8009758 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1ea      	bne.n	8009734 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800975e:	bf00      	nop
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	08011b78 	.word	0x08011b78
 800976c:	080122ac 	.word	0x080122ac
 8009770:	08011bbc 	.word	0x08011bbc

08009774 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d02a      	beq.n	80097da <tcp_netif_ip_addr_changed+0x66>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d026      	beq.n	80097da <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800978c:	4b15      	ldr	r3, [pc, #84]	@ (80097e4 <tcp_netif_ip_addr_changed+0x70>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff ffbc 	bl	8009710 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009798:	4b13      	ldr	r3, [pc, #76]	@ (80097e8 <tcp_netif_ip_addr_changed+0x74>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff ffb6 	bl	8009710 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d017      	beq.n	80097da <tcp_netif_ip_addr_changed+0x66>
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d013      	beq.n	80097da <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80097b2:	4b0e      	ldr	r3, [pc, #56]	@ (80097ec <tcp_netif_ip_addr_changed+0x78>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	e00c      	b.n	80097d4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d103      	bne.n	80097ce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1ef      	bne.n	80097ba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	240031e4 	.word	0x240031e4
 80097e8:	240031dc 	.word	0x240031dc
 80097ec:	240031e0 	.word	0x240031e0

080097f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b082      	sub	sp, #8
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d007      	beq.n	8009810 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff fc3d 	bl	8009084 <tcp_segs_free>
    pcb->ooseq = NULL;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2200      	movs	r2, #0
 800980e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009810:	bf00      	nop
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8009818:	b590      	push	{r4, r7, lr}
 800981a:	b08d      	sub	sp, #52	@ 0x34
 800981c:	af04      	add	r7, sp, #16
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d105      	bne.n	8009834 <tcp_input+0x1c>
 8009828:	4b9b      	ldr	r3, [pc, #620]	@ (8009a98 <tcp_input+0x280>)
 800982a:	2283      	movs	r2, #131	@ 0x83
 800982c:	499b      	ldr	r1, [pc, #620]	@ (8009a9c <tcp_input+0x284>)
 800982e:	489c      	ldr	r0, [pc, #624]	@ (8009aa0 <tcp_input+0x288>)
 8009830:	f006 fc9e 	bl	8010170 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	4a9a      	ldr	r2, [pc, #616]	@ (8009aa4 <tcp_input+0x28c>)
 800983a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	895b      	ldrh	r3, [r3, #10]
 8009840:	2b13      	cmp	r3, #19
 8009842:	f240 83d1 	bls.w	8009fe8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009846:	4b98      	ldr	r3, [pc, #608]	@ (8009aa8 <tcp_input+0x290>)
 8009848:	695b      	ldr	r3, [r3, #20]
 800984a:	4a97      	ldr	r2, [pc, #604]	@ (8009aa8 <tcp_input+0x290>)
 800984c:	6812      	ldr	r2, [r2, #0]
 800984e:	4611      	mov	r1, r2
 8009850:	4618      	mov	r0, r3
 8009852:	f005 fc37 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	f040 83c7 	bne.w	8009fec <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800985e:	4b92      	ldr	r3, [pc, #584]	@ (8009aa8 <tcp_input+0x290>)
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8009866:	2be0      	cmp	r3, #224	@ 0xe0
 8009868:	f000 83c0 	beq.w	8009fec <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800986c:	4b8d      	ldr	r3, [pc, #564]	@ (8009aa4 <tcp_input+0x28c>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	899b      	ldrh	r3, [r3, #12]
 8009872:	b29b      	uxth	r3, r3
 8009874:	4618      	mov	r0, r3
 8009876:	f7fc fd8f 	bl	8006398 <lwip_htons>
 800987a:	4603      	mov	r3, r0
 800987c:	0b1b      	lsrs	r3, r3, #12
 800987e:	b29b      	uxth	r3, r3
 8009880:	b2db      	uxtb	r3, r3
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8009886:	7cbb      	ldrb	r3, [r7, #18]
 8009888:	2b13      	cmp	r3, #19
 800988a:	f240 83b1 	bls.w	8009ff0 <tcp_input+0x7d8>
 800988e:	7cbb      	ldrb	r3, [r7, #18]
 8009890:	b29a      	uxth	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	891b      	ldrh	r3, [r3, #8]
 8009896:	429a      	cmp	r2, r3
 8009898:	f200 83aa 	bhi.w	8009ff0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800989c:	7cbb      	ldrb	r3, [r7, #18]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b14      	subs	r3, #20
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	4b81      	ldr	r3, [pc, #516]	@ (8009aac <tcp_input+0x294>)
 80098a6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80098a8:	4b81      	ldr	r3, [pc, #516]	@ (8009ab0 <tcp_input+0x298>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	895a      	ldrh	r2, [r3, #10]
 80098b2:	7cbb      	ldrb	r3, [r7, #18]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d309      	bcc.n	80098ce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80098ba:	4b7c      	ldr	r3, [pc, #496]	@ (8009aac <tcp_input+0x294>)
 80098bc:	881a      	ldrh	r2, [r3, #0]
 80098be:	4b7d      	ldr	r3, [pc, #500]	@ (8009ab4 <tcp_input+0x29c>)
 80098c0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80098c2:	7cbb      	ldrb	r3, [r7, #18]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fe f8f6 	bl	8007ab8 <pbuf_remove_header>
 80098cc:	e04e      	b.n	800996c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d105      	bne.n	80098e2 <tcp_input+0xca>
 80098d6:	4b70      	ldr	r3, [pc, #448]	@ (8009a98 <tcp_input+0x280>)
 80098d8:	22c2      	movs	r2, #194	@ 0xc2
 80098da:	4977      	ldr	r1, [pc, #476]	@ (8009ab8 <tcp_input+0x2a0>)
 80098dc:	4870      	ldr	r0, [pc, #448]	@ (8009aa0 <tcp_input+0x288>)
 80098de:	f006 fc47 	bl	8010170 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80098e2:	2114      	movs	r1, #20
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7fe f8e7 	bl	8007ab8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	895a      	ldrh	r2, [r3, #10]
 80098ee:	4b71      	ldr	r3, [pc, #452]	@ (8009ab4 <tcp_input+0x29c>)
 80098f0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80098f2:	4b6e      	ldr	r3, [pc, #440]	@ (8009aac <tcp_input+0x294>)
 80098f4:	881a      	ldrh	r2, [r3, #0]
 80098f6:	4b6f      	ldr	r3, [pc, #444]	@ (8009ab4 <tcp_input+0x29c>)
 80098f8:	881b      	ldrh	r3, [r3, #0]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80098fe:	4b6d      	ldr	r3, [pc, #436]	@ (8009ab4 <tcp_input+0x29c>)
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7fe f8d7 	bl	8007ab8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	895b      	ldrh	r3, [r3, #10]
 8009910:	8a3a      	ldrh	r2, [r7, #16]
 8009912:	429a      	cmp	r2, r3
 8009914:	f200 836e 	bhi.w	8009ff4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	4a64      	ldr	r2, [pc, #400]	@ (8009ab0 <tcp_input+0x298>)
 8009920:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	8a3a      	ldrh	r2, [r7, #16]
 8009928:	4611      	mov	r1, r2
 800992a:	4618      	mov	r0, r3
 800992c:	f7fe f8c4 	bl	8007ab8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	891a      	ldrh	r2, [r3, #8]
 8009934:	8a3b      	ldrh	r3, [r7, #16]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	b29a      	uxth	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	895b      	ldrh	r3, [r3, #10]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <tcp_input+0x13a>
 8009946:	4b54      	ldr	r3, [pc, #336]	@ (8009a98 <tcp_input+0x280>)
 8009948:	22df      	movs	r2, #223	@ 0xdf
 800994a:	495c      	ldr	r1, [pc, #368]	@ (8009abc <tcp_input+0x2a4>)
 800994c:	4854      	ldr	r0, [pc, #336]	@ (8009aa0 <tcp_input+0x288>)
 800994e:	f006 fc0f 	bl	8010170 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	891a      	ldrh	r2, [r3, #8]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	891b      	ldrh	r3, [r3, #8]
 800995c:	429a      	cmp	r2, r3
 800995e:	d005      	beq.n	800996c <tcp_input+0x154>
 8009960:	4b4d      	ldr	r3, [pc, #308]	@ (8009a98 <tcp_input+0x280>)
 8009962:	22e0      	movs	r2, #224	@ 0xe0
 8009964:	4956      	ldr	r1, [pc, #344]	@ (8009ac0 <tcp_input+0x2a8>)
 8009966:	484e      	ldr	r0, [pc, #312]	@ (8009aa0 <tcp_input+0x288>)
 8009968:	f006 fc02 	bl	8010170 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800996c:	4b4d      	ldr	r3, [pc, #308]	@ (8009aa4 <tcp_input+0x28c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	881b      	ldrh	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	4a4b      	ldr	r2, [pc, #300]	@ (8009aa4 <tcp_input+0x28c>)
 8009976:	6814      	ldr	r4, [r2, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f7fc fd0d 	bl	8006398 <lwip_htons>
 800997e:	4603      	mov	r3, r0
 8009980:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8009982:	4b48      	ldr	r3, [pc, #288]	@ (8009aa4 <tcp_input+0x28c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	885b      	ldrh	r3, [r3, #2]
 8009988:	b29b      	uxth	r3, r3
 800998a:	4a46      	ldr	r2, [pc, #280]	@ (8009aa4 <tcp_input+0x28c>)
 800998c:	6814      	ldr	r4, [r2, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f7fc fd02 	bl	8006398 <lwip_htons>
 8009994:	4603      	mov	r3, r0
 8009996:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8009998:	4b42      	ldr	r3, [pc, #264]	@ (8009aa4 <tcp_input+0x28c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	4a41      	ldr	r2, [pc, #260]	@ (8009aa4 <tcp_input+0x28c>)
 80099a0:	6814      	ldr	r4, [r2, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fc fd0d 	bl	80063c2 <lwip_htonl>
 80099a8:	4603      	mov	r3, r0
 80099aa:	6063      	str	r3, [r4, #4]
 80099ac:	6863      	ldr	r3, [r4, #4]
 80099ae:	4a45      	ldr	r2, [pc, #276]	@ (8009ac4 <tcp_input+0x2ac>)
 80099b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80099b2:	4b3c      	ldr	r3, [pc, #240]	@ (8009aa4 <tcp_input+0x28c>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	4a3a      	ldr	r2, [pc, #232]	@ (8009aa4 <tcp_input+0x28c>)
 80099ba:	6814      	ldr	r4, [r2, #0]
 80099bc:	4618      	mov	r0, r3
 80099be:	f7fc fd00 	bl	80063c2 <lwip_htonl>
 80099c2:	4603      	mov	r3, r0
 80099c4:	60a3      	str	r3, [r4, #8]
 80099c6:	68a3      	ldr	r3, [r4, #8]
 80099c8:	4a3f      	ldr	r2, [pc, #252]	@ (8009ac8 <tcp_input+0x2b0>)
 80099ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80099cc:	4b35      	ldr	r3, [pc, #212]	@ (8009aa4 <tcp_input+0x28c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	89db      	ldrh	r3, [r3, #14]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	4a33      	ldr	r2, [pc, #204]	@ (8009aa4 <tcp_input+0x28c>)
 80099d6:	6814      	ldr	r4, [r2, #0]
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fc fcdd 	bl	8006398 <lwip_htons>
 80099de:	4603      	mov	r3, r0
 80099e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80099e2:	4b30      	ldr	r3, [pc, #192]	@ (8009aa4 <tcp_input+0x28c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	899b      	ldrh	r3, [r3, #12]
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fc fcd4 	bl	8006398 <lwip_htons>
 80099f0:	4603      	mov	r3, r0
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	4b34      	ldr	r3, [pc, #208]	@ (8009acc <tcp_input+0x2b4>)
 80099fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	891a      	ldrh	r2, [r3, #8]
 8009a02:	4b33      	ldr	r3, [pc, #204]	@ (8009ad0 <tcp_input+0x2b8>)
 8009a04:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8009a06:	4b31      	ldr	r3, [pc, #196]	@ (8009acc <tcp_input+0x2b4>)
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d00c      	beq.n	8009a2c <tcp_input+0x214>
    tcplen++;
 8009a12:	4b2f      	ldr	r3, [pc, #188]	@ (8009ad0 <tcp_input+0x2b8>)
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	3301      	adds	r3, #1
 8009a18:	b29a      	uxth	r2, r3
 8009a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8009ad0 <tcp_input+0x2b8>)
 8009a1c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	891a      	ldrh	r2, [r3, #8]
 8009a22:	4b2b      	ldr	r3, [pc, #172]	@ (8009ad0 <tcp_input+0x2b8>)
 8009a24:	881b      	ldrh	r3, [r3, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	f200 82e6 	bhi.w	8009ff8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009a30:	4b28      	ldr	r3, [pc, #160]	@ (8009ad4 <tcp_input+0x2bc>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	61fb      	str	r3, [r7, #28]
 8009a36:	e09d      	b.n	8009b74 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	7d1b      	ldrb	r3, [r3, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <tcp_input+0x234>
 8009a40:	4b15      	ldr	r3, [pc, #84]	@ (8009a98 <tcp_input+0x280>)
 8009a42:	22fb      	movs	r2, #251	@ 0xfb
 8009a44:	4924      	ldr	r1, [pc, #144]	@ (8009ad8 <tcp_input+0x2c0>)
 8009a46:	4816      	ldr	r0, [pc, #88]	@ (8009aa0 <tcp_input+0x288>)
 8009a48:	f006 fb92 	bl	8010170 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	7d1b      	ldrb	r3, [r3, #20]
 8009a50:	2b0a      	cmp	r3, #10
 8009a52:	d105      	bne.n	8009a60 <tcp_input+0x248>
 8009a54:	4b10      	ldr	r3, [pc, #64]	@ (8009a98 <tcp_input+0x280>)
 8009a56:	22fc      	movs	r2, #252	@ 0xfc
 8009a58:	4920      	ldr	r1, [pc, #128]	@ (8009adc <tcp_input+0x2c4>)
 8009a5a:	4811      	ldr	r0, [pc, #68]	@ (8009aa0 <tcp_input+0x288>)
 8009a5c:	f006 fb88 	bl	8010170 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	7d1b      	ldrb	r3, [r3, #20]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d105      	bne.n	8009a74 <tcp_input+0x25c>
 8009a68:	4b0b      	ldr	r3, [pc, #44]	@ (8009a98 <tcp_input+0x280>)
 8009a6a:	22fd      	movs	r2, #253	@ 0xfd
 8009a6c:	491c      	ldr	r1, [pc, #112]	@ (8009ae0 <tcp_input+0x2c8>)
 8009a6e:	480c      	ldr	r0, [pc, #48]	@ (8009aa0 <tcp_input+0x288>)
 8009a70:	f006 fb7e 	bl	8010170 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	7a1b      	ldrb	r3, [r3, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d033      	beq.n	8009ae4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	7a1a      	ldrb	r2, [r3, #8]
 8009a80:	4b09      	ldr	r3, [pc, #36]	@ (8009aa8 <tcp_input+0x290>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a88:	3301      	adds	r3, #1
 8009a8a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	d029      	beq.n	8009ae4 <tcp_input+0x2cc>
      prev = pcb;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	61bb      	str	r3, [r7, #24]
      continue;
 8009a94:	e06b      	b.n	8009b6e <tcp_input+0x356>
 8009a96:	bf00      	nop
 8009a98:	080122e0 	.word	0x080122e0
 8009a9c:	08012314 	.word	0x08012314
 8009aa0:	0801232c 	.word	0x0801232c
 8009aa4:	24003200 	.word	0x24003200
 8009aa8:	240002bc 	.word	0x240002bc
 8009aac:	24003204 	.word	0x24003204
 8009ab0:	24003208 	.word	0x24003208
 8009ab4:	24003206 	.word	0x24003206
 8009ab8:	08012354 	.word	0x08012354
 8009abc:	08012364 	.word	0x08012364
 8009ac0:	08012370 	.word	0x08012370
 8009ac4:	24003210 	.word	0x24003210
 8009ac8:	24003214 	.word	0x24003214
 8009acc:	2400321c 	.word	0x2400321c
 8009ad0:	2400321a 	.word	0x2400321a
 8009ad4:	240031e4 	.word	0x240031e4
 8009ad8:	08012390 	.word	0x08012390
 8009adc:	080123b8 	.word	0x080123b8
 8009ae0:	080123e4 	.word	0x080123e4
    }

    if (pcb->remote_port == tcphdr->src &&
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	8b1a      	ldrh	r2, [r3, #24]
 8009ae8:	4b72      	ldr	r3, [pc, #456]	@ (8009cb4 <tcp_input+0x49c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	881b      	ldrh	r3, [r3, #0]
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d13a      	bne.n	8009b6a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	8ada      	ldrh	r2, [r3, #22]
 8009af8:	4b6e      	ldr	r3, [pc, #440]	@ (8009cb4 <tcp_input+0x49c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	885b      	ldrh	r3, [r3, #2]
 8009afe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d132      	bne.n	8009b6a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	685a      	ldr	r2, [r3, #4]
 8009b08:	4b6b      	ldr	r3, [pc, #428]	@ (8009cb8 <tcp_input+0x4a0>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8009b0c:	429a      	cmp	r2, r3
 8009b0e:	d12c      	bne.n	8009b6a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	4b68      	ldr	r3, [pc, #416]	@ (8009cb8 <tcp_input+0x4a0>)
 8009b16:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d126      	bne.n	8009b6a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d106      	bne.n	8009b34 <tcp_input+0x31c>
 8009b26:	4b65      	ldr	r3, [pc, #404]	@ (8009cbc <tcp_input+0x4a4>)
 8009b28:	f240 120d 	movw	r2, #269	@ 0x10d
 8009b2c:	4964      	ldr	r1, [pc, #400]	@ (8009cc0 <tcp_input+0x4a8>)
 8009b2e:	4865      	ldr	r0, [pc, #404]	@ (8009cc4 <tcp_input+0x4ac>)
 8009b30:	f006 fb1e 	bl	8010170 <iprintf>
      if (prev != NULL) {
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00a      	beq.n	8009b50 <tcp_input+0x338>
        prev->next = pcb->next;
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	68da      	ldr	r2, [r3, #12]
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8009b42:	4b61      	ldr	r3, [pc, #388]	@ (8009cc8 <tcp_input+0x4b0>)
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8009b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8009cc8 <tcp_input+0x4b0>)
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	69fa      	ldr	r2, [r7, #28]
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d111      	bne.n	8009b7e <tcp_input+0x366>
 8009b5a:	4b58      	ldr	r3, [pc, #352]	@ (8009cbc <tcp_input+0x4a4>)
 8009b5c:	f240 1215 	movw	r2, #277	@ 0x115
 8009b60:	495a      	ldr	r1, [pc, #360]	@ (8009ccc <tcp_input+0x4b4>)
 8009b62:	4858      	ldr	r0, [pc, #352]	@ (8009cc4 <tcp_input+0x4ac>)
 8009b64:	f006 fb04 	bl	8010170 <iprintf>
      break;
 8009b68:	e009      	b.n	8009b7e <tcp_input+0x366>
    }
    prev = pcb;
 8009b6a:	69fb      	ldr	r3, [r7, #28]
 8009b6c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	61fb      	str	r3, [r7, #28]
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	f47f af5e 	bne.w	8009a38 <tcp_input+0x220>
 8009b7c:	e000      	b.n	8009b80 <tcp_input+0x368>
      break;
 8009b7e:	bf00      	nop
  }

  if (pcb == NULL) {
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	f040 80aa 	bne.w	8009cdc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b88:	4b51      	ldr	r3, [pc, #324]	@ (8009cd0 <tcp_input+0x4b8>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	61fb      	str	r3, [r7, #28]
 8009b8e:	e03f      	b.n	8009c10 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	7d1b      	ldrb	r3, [r3, #20]
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	d006      	beq.n	8009ba6 <tcp_input+0x38e>
 8009b98:	4b48      	ldr	r3, [pc, #288]	@ (8009cbc <tcp_input+0x4a4>)
 8009b9a:	f240 121f 	movw	r2, #287	@ 0x11f
 8009b9e:	494d      	ldr	r1, [pc, #308]	@ (8009cd4 <tcp_input+0x4bc>)
 8009ba0:	4848      	ldr	r0, [pc, #288]	@ (8009cc4 <tcp_input+0x4ac>)
 8009ba2:	f006 fae5 	bl	8010170 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	7a1b      	ldrb	r3, [r3, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d009      	beq.n	8009bc2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	7a1a      	ldrb	r2, [r3, #8]
 8009bb2:	4b41      	ldr	r3, [pc, #260]	@ (8009cb8 <tcp_input+0x4a0>)
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009bba:	3301      	adds	r3, #1
 8009bbc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d122      	bne.n	8009c08 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	8b1a      	ldrh	r2, [r3, #24]
 8009bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8009cb4 <tcp_input+0x49c>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d11b      	bne.n	8009c0a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	8ada      	ldrh	r2, [r3, #22]
 8009bd6:	4b37      	ldr	r3, [pc, #220]	@ (8009cb4 <tcp_input+0x49c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	885b      	ldrh	r3, [r3, #2]
 8009bdc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d113      	bne.n	8009c0a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	685a      	ldr	r2, [r3, #4]
 8009be6:	4b34      	ldr	r3, [pc, #208]	@ (8009cb8 <tcp_input+0x4a0>)
 8009be8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d10d      	bne.n	8009c0a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	4b31      	ldr	r3, [pc, #196]	@ (8009cb8 <tcp_input+0x4a0>)
 8009bf4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d107      	bne.n	8009c0a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8009bfa:	69f8      	ldr	r0, [r7, #28]
 8009bfc:	f000 fb56 	bl	800a2ac <tcp_timewait_input>
        }
        pbuf_free(p);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7fd ffdf 	bl	8007bc4 <pbuf_free>
        return;
 8009c06:	e1fd      	b.n	800a004 <tcp_input+0x7ec>
        continue;
 8009c08:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	68db      	ldr	r3, [r3, #12]
 8009c0e:	61fb      	str	r3, [r7, #28]
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1bc      	bne.n	8009b90 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd8 <tcp_input+0x4c0>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	617b      	str	r3, [r7, #20]
 8009c20:	e02a      	b.n	8009c78 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	7a1b      	ldrb	r3, [r3, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00c      	beq.n	8009c44 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	7a1a      	ldrb	r2, [r3, #8]
 8009c2e:	4b22      	ldr	r3, [pc, #136]	@ (8009cb8 <tcp_input+0x4a0>)
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009c36:	3301      	adds	r3, #1
 8009c38:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d002      	beq.n	8009c44 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	61bb      	str	r3, [r7, #24]
        continue;
 8009c42:	e016      	b.n	8009c72 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	8ada      	ldrh	r2, [r3, #22]
 8009c48:	4b1a      	ldr	r3, [pc, #104]	@ (8009cb4 <tcp_input+0x49c>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	885b      	ldrh	r3, [r3, #2]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d10c      	bne.n	8009c6e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	4b17      	ldr	r3, [pc, #92]	@ (8009cb8 <tcp_input+0x4a0>)
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d00f      	beq.n	8009c80 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00d      	beq.n	8009c82 <tcp_input+0x46a>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d009      	beq.n	8009c82 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1d1      	bne.n	8009c22 <tcp_input+0x40a>
 8009c7e:	e000      	b.n	8009c82 <tcp_input+0x46a>
            break;
 8009c80:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d029      	beq.n	8009cdc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	68da      	ldr	r2, [r3, #12]
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009c96:	4b10      	ldr	r3, [pc, #64]	@ (8009cd8 <tcp_input+0x4c0>)
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009c9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009cd8 <tcp_input+0x4c0>)
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8009ca4:	6978      	ldr	r0, [r7, #20]
 8009ca6:	f000 fa03 	bl	800a0b0 <tcp_listen_input>
      }
      pbuf_free(p);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7fd ff8a 	bl	8007bc4 <pbuf_free>
      return;
 8009cb0:	e1a8      	b.n	800a004 <tcp_input+0x7ec>
 8009cb2:	bf00      	nop
 8009cb4:	24003200 	.word	0x24003200
 8009cb8:	240002bc 	.word	0x240002bc
 8009cbc:	080122e0 	.word	0x080122e0
 8009cc0:	0801240c 	.word	0x0801240c
 8009cc4:	0801232c 	.word	0x0801232c
 8009cc8:	240031e4 	.word	0x240031e4
 8009ccc:	08012438 	.word	0x08012438
 8009cd0:	240031e8 	.word	0x240031e8
 8009cd4:	08012464 	.word	0x08012464
 8009cd8:	240031e0 	.word	0x240031e0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f000 8158 	beq.w	8009f94 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009ce4:	4b95      	ldr	r3, [pc, #596]	@ (8009f3c <tcp_input+0x724>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	891a      	ldrh	r2, [r3, #8]
 8009cee:	4b93      	ldr	r3, [pc, #588]	@ (8009f3c <tcp_input+0x724>)
 8009cf0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009cf2:	4a92      	ldr	r2, [pc, #584]	@ (8009f3c <tcp_input+0x724>)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009cf8:	4b91      	ldr	r3, [pc, #580]	@ (8009f40 <tcp_input+0x728>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a8f      	ldr	r2, [pc, #572]	@ (8009f3c <tcp_input+0x724>)
 8009cfe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009d00:	4b90      	ldr	r3, [pc, #576]	@ (8009f44 <tcp_input+0x72c>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009d06:	4b90      	ldr	r3, [pc, #576]	@ (8009f48 <tcp_input+0x730>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8009d0c:	4b8f      	ldr	r3, [pc, #572]	@ (8009f4c <tcp_input+0x734>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009d12:	4b8f      	ldr	r3, [pc, #572]	@ (8009f50 <tcp_input+0x738>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f003 0308 	and.w	r3, r3, #8
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d006      	beq.n	8009d2c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	7b5b      	ldrb	r3, [r3, #13]
 8009d22:	f043 0301 	orr.w	r3, r3, #1
 8009d26:	b2da      	uxtb	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d017      	beq.n	8009d64 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d34:	69f8      	ldr	r0, [r7, #28]
 8009d36:	f7ff f929 	bl	8008f8c <tcp_process_refused_data>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f113 0f0d 	cmn.w	r3, #13
 8009d40:	d007      	beq.n	8009d52 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00c      	beq.n	8009d64 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009d4a:	4b82      	ldr	r3, [pc, #520]	@ (8009f54 <tcp_input+0x73c>)
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d008      	beq.n	8009d64 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f040 80e3 	bne.w	8009f22 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8009d5c:	69f8      	ldr	r0, [r7, #28]
 8009d5e:	f003 f9a7 	bl	800d0b0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8009d62:	e0de      	b.n	8009f22 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8009d64:	4a7c      	ldr	r2, [pc, #496]	@ (8009f58 <tcp_input+0x740>)
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8009d6a:	69f8      	ldr	r0, [r7, #28]
 8009d6c:	f000 fb18 	bl	800a3a0 <tcp_process>
 8009d70:	4603      	mov	r3, r0
 8009d72:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8009d74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009d78:	f113 0f0d 	cmn.w	r3, #13
 8009d7c:	f000 80d3 	beq.w	8009f26 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8009d80:	4b71      	ldr	r3, [pc, #452]	@ (8009f48 <tcp_input+0x730>)
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d015      	beq.n	8009db8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d008      	beq.n	8009da8 <tcp_input+0x590>
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	6912      	ldr	r2, [r2, #16]
 8009da0:	f06f 010d 	mvn.w	r1, #13
 8009da4:	4610      	mov	r0, r2
 8009da6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009da8:	69f9      	ldr	r1, [r7, #28]
 8009daa:	486c      	ldr	r0, [pc, #432]	@ (8009f5c <tcp_input+0x744>)
 8009dac:	f7ff fbbc 	bl	8009528 <tcp_pcb_remove>
        tcp_free(pcb);
 8009db0:	69f8      	ldr	r0, [r7, #28]
 8009db2:	f7fe f9a7 	bl	8008104 <tcp_free>
 8009db6:	e0da      	b.n	8009f6e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8009dbc:	4b63      	ldr	r3, [pc, #396]	@ (8009f4c <tcp_input+0x734>)
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d01d      	beq.n	8009e00 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009dc4:	4b61      	ldr	r3, [pc, #388]	@ (8009f4c <tcp_input+0x734>)
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00a      	beq.n	8009dea <tcp_input+0x5d2>
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dda:	69fa      	ldr	r2, [r7, #28]
 8009ddc:	6910      	ldr	r0, [r2, #16]
 8009dde:	89fa      	ldrh	r2, [r7, #14]
 8009de0:	69f9      	ldr	r1, [r7, #28]
 8009de2:	4798      	blx	r3
 8009de4:	4603      	mov	r3, r0
 8009de6:	74fb      	strb	r3, [r7, #19]
 8009de8:	e001      	b.n	8009dee <tcp_input+0x5d6>
 8009dea:	2300      	movs	r3, #0
 8009dec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009dee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009df2:	f113 0f0d 	cmn.w	r3, #13
 8009df6:	f000 8098 	beq.w	8009f2a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8009dfa:	4b54      	ldr	r3, [pc, #336]	@ (8009f4c <tcp_input+0x734>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009e00:	69f8      	ldr	r0, [r7, #28]
 8009e02:	f000 f915 	bl	800a030 <tcp_input_delayed_close>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f040 8090 	bne.w	8009f2e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8009e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8009f44 <tcp_input+0x72c>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d041      	beq.n	8009e9a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d006      	beq.n	8009e2c <tcp_input+0x614>
 8009e1e:	4b50      	ldr	r3, [pc, #320]	@ (8009f60 <tcp_input+0x748>)
 8009e20:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009e24:	494f      	ldr	r1, [pc, #316]	@ (8009f64 <tcp_input+0x74c>)
 8009e26:	4850      	ldr	r0, [pc, #320]	@ (8009f68 <tcp_input+0x750>)
 8009e28:	f006 f9a2 	bl	8010170 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	8b5b      	ldrh	r3, [r3, #26]
 8009e30:	f003 0310 	and.w	r3, r3, #16
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d008      	beq.n	8009e4a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009e38:	4b42      	ldr	r3, [pc, #264]	@ (8009f44 <tcp_input+0x72c>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fd fec1 	bl	8007bc4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009e42:	69f8      	ldr	r0, [r7, #28]
 8009e44:	f7fe fc46 	bl	80086d4 <tcp_abort>
            goto aborted;
 8009e48:	e091      	b.n	8009f6e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d00c      	beq.n	8009e6e <tcp_input+0x656>
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	6918      	ldr	r0, [r3, #16]
 8009e5e:	4b39      	ldr	r3, [pc, #228]	@ (8009f44 <tcp_input+0x72c>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	2300      	movs	r3, #0
 8009e64:	69f9      	ldr	r1, [r7, #28]
 8009e66:	47a0      	blx	r4
 8009e68:	4603      	mov	r3, r0
 8009e6a:	74fb      	strb	r3, [r7, #19]
 8009e6c:	e008      	b.n	8009e80 <tcp_input+0x668>
 8009e6e:	4b35      	ldr	r3, [pc, #212]	@ (8009f44 <tcp_input+0x72c>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	2300      	movs	r3, #0
 8009e74:	69f9      	ldr	r1, [r7, #28]
 8009e76:	2000      	movs	r0, #0
 8009e78:	f7ff f95e 	bl	8009138 <tcp_recv_null>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009e80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e84:	f113 0f0d 	cmn.w	r3, #13
 8009e88:	d053      	beq.n	8009f32 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8009e8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009e92:	4b2c      	ldr	r3, [pc, #176]	@ (8009f44 <tcp_input+0x72c>)
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8009e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8009f48 <tcp_input+0x730>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	f003 0320 	and.w	r3, r3, #32
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d030      	beq.n	8009f08 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d009      	beq.n	8009ec2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eb2:	7b5a      	ldrb	r2, [r3, #13]
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009eb8:	f042 0220 	orr.w	r2, r2, #32
 8009ebc:	b2d2      	uxtb	r2, r2
 8009ebe:	735a      	strb	r2, [r3, #13]
 8009ec0:	e022      	b.n	8009f08 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ec6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009eca:	d005      	beq.n	8009ed8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00b      	beq.n	8009efa <tcp_input+0x6e2>
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	6918      	ldr	r0, [r3, #16]
 8009eec:	2300      	movs	r3, #0
 8009eee:	2200      	movs	r2, #0
 8009ef0:	69f9      	ldr	r1, [r7, #28]
 8009ef2:	47a0      	blx	r4
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	74fb      	strb	r3, [r7, #19]
 8009ef8:	e001      	b.n	8009efe <tcp_input+0x6e6>
 8009efa:	2300      	movs	r3, #0
 8009efc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8009efe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009f02:	f113 0f0d 	cmn.w	r3, #13
 8009f06:	d016      	beq.n	8009f36 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009f08:	4b13      	ldr	r3, [pc, #76]	@ (8009f58 <tcp_input+0x740>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009f0e:	69f8      	ldr	r0, [r7, #28]
 8009f10:	f000 f88e 	bl	800a030 <tcp_input_delayed_close>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d128      	bne.n	8009f6c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8009f1a:	69f8      	ldr	r0, [r7, #28]
 8009f1c:	f002 fac2 	bl	800c4a4 <tcp_output>
 8009f20:	e025      	b.n	8009f6e <tcp_input+0x756>
        goto aborted;
 8009f22:	bf00      	nop
 8009f24:	e023      	b.n	8009f6e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009f26:	bf00      	nop
 8009f28:	e021      	b.n	8009f6e <tcp_input+0x756>
              goto aborted;
 8009f2a:	bf00      	nop
 8009f2c:	e01f      	b.n	8009f6e <tcp_input+0x756>
          goto aborted;
 8009f2e:	bf00      	nop
 8009f30:	e01d      	b.n	8009f6e <tcp_input+0x756>
            goto aborted;
 8009f32:	bf00      	nop
 8009f34:	e01b      	b.n	8009f6e <tcp_input+0x756>
              goto aborted;
 8009f36:	bf00      	nop
 8009f38:	e019      	b.n	8009f6e <tcp_input+0x756>
 8009f3a:	bf00      	nop
 8009f3c:	240031f0 	.word	0x240031f0
 8009f40:	24003200 	.word	0x24003200
 8009f44:	24003220 	.word	0x24003220
 8009f48:	2400321d 	.word	0x2400321d
 8009f4c:	24003218 	.word	0x24003218
 8009f50:	2400321c 	.word	0x2400321c
 8009f54:	2400321a 	.word	0x2400321a
 8009f58:	24003224 	.word	0x24003224
 8009f5c:	240031e4 	.word	0x240031e4
 8009f60:	080122e0 	.word	0x080122e0
 8009f64:	08012494 	.word	0x08012494
 8009f68:	0801232c 	.word	0x0801232c
          goto aborted;
 8009f6c:	bf00      	nop
    tcp_input_pcb = NULL;
 8009f6e:	4b27      	ldr	r3, [pc, #156]	@ (800a00c <tcp_input+0x7f4>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009f74:	4b26      	ldr	r3, [pc, #152]	@ (800a010 <tcp_input+0x7f8>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8009f7a:	4b26      	ldr	r3, [pc, #152]	@ (800a014 <tcp_input+0x7fc>)
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d03f      	beq.n	800a002 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009f82:	4b24      	ldr	r3, [pc, #144]	@ (800a014 <tcp_input+0x7fc>)
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7fd fe1c 	bl	8007bc4 <pbuf_free>
      inseg.p = NULL;
 8009f8c:	4b21      	ldr	r3, [pc, #132]	@ (800a014 <tcp_input+0x7fc>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009f92:	e036      	b.n	800a002 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009f94:	4b20      	ldr	r3, [pc, #128]	@ (800a018 <tcp_input+0x800>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	899b      	ldrh	r3, [r3, #12]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7fc f9fb 	bl	8006398 <lwip_htons>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d118      	bne.n	8009fe0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fae:	4b1b      	ldr	r3, [pc, #108]	@ (800a01c <tcp_input+0x804>)
 8009fb0:	6819      	ldr	r1, [r3, #0]
 8009fb2:	4b1b      	ldr	r3, [pc, #108]	@ (800a020 <tcp_input+0x808>)
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	4b1a      	ldr	r3, [pc, #104]	@ (800a024 <tcp_input+0x80c>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fbe:	4b16      	ldr	r3, [pc, #88]	@ (800a018 <tcp_input+0x800>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fc2:	885b      	ldrh	r3, [r3, #2]
 8009fc4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009fc6:	4a14      	ldr	r2, [pc, #80]	@ (800a018 <tcp_input+0x800>)
 8009fc8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009fca:	8812      	ldrh	r2, [r2, #0]
 8009fcc:	b292      	uxth	r2, r2
 8009fce:	9202      	str	r2, [sp, #8]
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	4b15      	ldr	r3, [pc, #84]	@ (800a028 <tcp_input+0x810>)
 8009fd4:	9300      	str	r3, [sp, #0]
 8009fd6:	4b15      	ldr	r3, [pc, #84]	@ (800a02c <tcp_input+0x814>)
 8009fd8:	4602      	mov	r2, r0
 8009fda:	2000      	movs	r0, #0
 8009fdc:	f003 f816 	bl	800d00c <tcp_rst>
    pbuf_free(p);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f7fd fdef 	bl	8007bc4 <pbuf_free>
  return;
 8009fe6:	e00c      	b.n	800a002 <tcp_input+0x7ea>
    goto dropped;
 8009fe8:	bf00      	nop
 8009fea:	e006      	b.n	8009ffa <tcp_input+0x7e2>
    goto dropped;
 8009fec:	bf00      	nop
 8009fee:	e004      	b.n	8009ffa <tcp_input+0x7e2>
    goto dropped;
 8009ff0:	bf00      	nop
 8009ff2:	e002      	b.n	8009ffa <tcp_input+0x7e2>
      goto dropped;
 8009ff4:	bf00      	nop
 8009ff6:	e000      	b.n	8009ffa <tcp_input+0x7e2>
      goto dropped;
 8009ff8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7fd fde2 	bl	8007bc4 <pbuf_free>
 800a000:	e000      	b.n	800a004 <tcp_input+0x7ec>
  return;
 800a002:	bf00      	nop
}
 800a004:	3724      	adds	r7, #36	@ 0x24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd90      	pop	{r4, r7, pc}
 800a00a:	bf00      	nop
 800a00c:	24003224 	.word	0x24003224
 800a010:	24003220 	.word	0x24003220
 800a014:	240031f0 	.word	0x240031f0
 800a018:	24003200 	.word	0x24003200
 800a01c:	24003214 	.word	0x24003214
 800a020:	2400321a 	.word	0x2400321a
 800a024:	24003210 	.word	0x24003210
 800a028:	240002cc 	.word	0x240002cc
 800a02c:	240002d0 	.word	0x240002d0

0800a030 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d106      	bne.n	800a04c <tcp_input_delayed_close+0x1c>
 800a03e:	4b17      	ldr	r3, [pc, #92]	@ (800a09c <tcp_input_delayed_close+0x6c>)
 800a040:	f240 225a 	movw	r2, #602	@ 0x25a
 800a044:	4916      	ldr	r1, [pc, #88]	@ (800a0a0 <tcp_input_delayed_close+0x70>)
 800a046:	4817      	ldr	r0, [pc, #92]	@ (800a0a4 <tcp_input_delayed_close+0x74>)
 800a048:	f006 f892 	bl	8010170 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800a04c:	4b16      	ldr	r3, [pc, #88]	@ (800a0a8 <tcp_input_delayed_close+0x78>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	f003 0310 	and.w	r3, r3, #16
 800a054:	2b00      	cmp	r3, #0
 800a056:	d01c      	beq.n	800a092 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8b5b      	ldrh	r3, [r3, #26]
 800a05c:	f003 0310 	and.w	r3, r3, #16
 800a060:	2b00      	cmp	r3, #0
 800a062:	d10d      	bne.n	800a080 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d008      	beq.n	800a080 <tcp_input_delayed_close+0x50>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6912      	ldr	r2, [r2, #16]
 800a078:	f06f 010e 	mvn.w	r1, #14
 800a07c:	4610      	mov	r0, r2
 800a07e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	480a      	ldr	r0, [pc, #40]	@ (800a0ac <tcp_input_delayed_close+0x7c>)
 800a084:	f7ff fa50 	bl	8009528 <tcp_pcb_remove>
    tcp_free(pcb);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7fe f83b 	bl	8008104 <tcp_free>
    return 1;
 800a08e:	2301      	movs	r3, #1
 800a090:	e000      	b.n	800a094 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	080122e0 	.word	0x080122e0
 800a0a0:	080124b0 	.word	0x080124b0
 800a0a4:	0801232c 	.word	0x0801232c
 800a0a8:	2400321d 	.word	0x2400321d
 800a0ac:	240031e4 	.word	0x240031e4

0800a0b0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800a0b0:	b590      	push	{r4, r7, lr}
 800a0b2:	b08b      	sub	sp, #44	@ 0x2c
 800a0b4:	af04      	add	r7, sp, #16
 800a0b6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800a0b8:	4b6f      	ldr	r3, [pc, #444]	@ (800a278 <tcp_listen_input+0x1c8>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f003 0304 	and.w	r3, r3, #4
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	f040 80d2 	bne.w	800a26a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d106      	bne.n	800a0da <tcp_listen_input+0x2a>
 800a0cc:	4b6b      	ldr	r3, [pc, #428]	@ (800a27c <tcp_listen_input+0x1cc>)
 800a0ce:	f240 2281 	movw	r2, #641	@ 0x281
 800a0d2:	496b      	ldr	r1, [pc, #428]	@ (800a280 <tcp_listen_input+0x1d0>)
 800a0d4:	486b      	ldr	r0, [pc, #428]	@ (800a284 <tcp_listen_input+0x1d4>)
 800a0d6:	f006 f84b 	bl	8010170 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800a0da:	4b67      	ldr	r3, [pc, #412]	@ (800a278 <tcp_listen_input+0x1c8>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	f003 0310 	and.w	r3, r3, #16
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d019      	beq.n	800a11a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0e6:	4b68      	ldr	r3, [pc, #416]	@ (800a288 <tcp_listen_input+0x1d8>)
 800a0e8:	6819      	ldr	r1, [r3, #0]
 800a0ea:	4b68      	ldr	r3, [pc, #416]	@ (800a28c <tcp_listen_input+0x1dc>)
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	4b67      	ldr	r3, [pc, #412]	@ (800a290 <tcp_listen_input+0x1e0>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0f6:	4b67      	ldr	r3, [pc, #412]	@ (800a294 <tcp_listen_input+0x1e4>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a0fa:	885b      	ldrh	r3, [r3, #2]
 800a0fc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a0fe:	4a65      	ldr	r2, [pc, #404]	@ (800a294 <tcp_listen_input+0x1e4>)
 800a100:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a102:	8812      	ldrh	r2, [r2, #0]
 800a104:	b292      	uxth	r2, r2
 800a106:	9202      	str	r2, [sp, #8]
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	4b63      	ldr	r3, [pc, #396]	@ (800a298 <tcp_listen_input+0x1e8>)
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4b63      	ldr	r3, [pc, #396]	@ (800a29c <tcp_listen_input+0x1ec>)
 800a110:	4602      	mov	r2, r0
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f002 ff7a 	bl	800d00c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800a118:	e0a9      	b.n	800a26e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800a11a:	4b57      	ldr	r3, [pc, #348]	@ (800a278 <tcp_listen_input+0x1c8>)
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	f003 0302 	and.w	r3, r3, #2
 800a122:	2b00      	cmp	r3, #0
 800a124:	f000 80a3 	beq.w	800a26e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	7d5b      	ldrb	r3, [r3, #21]
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7ff f927 	bl	8009380 <tcp_alloc>
 800a132:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d111      	bne.n	800a15e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	699b      	ldr	r3, [r3, #24]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00a      	beq.n	800a158 <tcp_listen_input+0xa8>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	6910      	ldr	r0, [r2, #16]
 800a14a:	f04f 32ff 	mov.w	r2, #4294967295
 800a14e:	2100      	movs	r1, #0
 800a150:	4798      	blx	r3
 800a152:	4603      	mov	r3, r0
 800a154:	73bb      	strb	r3, [r7, #14]
      return;
 800a156:	e08b      	b.n	800a270 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a158:	23f0      	movs	r3, #240	@ 0xf0
 800a15a:	73bb      	strb	r3, [r7, #14]
      return;
 800a15c:	e088      	b.n	800a270 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a15e:	4b50      	ldr	r3, [pc, #320]	@ (800a2a0 <tcp_listen_input+0x1f0>)
 800a160:	695a      	ldr	r2, [r3, #20]
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a166:	4b4e      	ldr	r3, [pc, #312]	@ (800a2a0 <tcp_listen_input+0x1f0>)
 800a168:	691a      	ldr	r2, [r3, #16]
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	8ada      	ldrh	r2, [r3, #22]
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800a176:	4b47      	ldr	r3, [pc, #284]	@ (800a294 <tcp_listen_input+0x1e4>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	2203      	movs	r2, #3
 800a186:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800a188:	4b41      	ldr	r3, [pc, #260]	@ (800a290 <tcp_listen_input+0x1e0>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	1c5a      	adds	r2, r3, #1
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800a19a:	6978      	ldr	r0, [r7, #20]
 800a19c:	f7ff fa58 	bl	8009650 <tcp_next_iss>
 800a1a0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	693a      	ldr	r2, [r7, #16]
 800a1ac:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	693a      	ldr	r2, [r7, #16]
 800a1b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a1ba:	4b35      	ldr	r3, [pc, #212]	@ (800a290 <tcp_listen_input+0x1e0>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	1e5a      	subs	r2, r3, #1
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691a      	ldr	r2, [r3, #16]
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	7a5b      	ldrb	r3, [r3, #9]
 800a1d6:	f003 030c 	and.w	r3, r3, #12
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7a1a      	ldrb	r2, [r3, #8]
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800a1e8:	4b2e      	ldr	r3, [pc, #184]	@ (800a2a4 <tcp_listen_input+0x1f4>)
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	60da      	str	r2, [r3, #12]
 800a1f0:	4a2c      	ldr	r2, [pc, #176]	@ (800a2a4 <tcp_listen_input+0x1f4>)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	f003 f8cb 	bl	800d390 <tcp_timer_needed>
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	@ (800a2a8 <tcp_listen_input+0x1f8>)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a200:	6978      	ldr	r0, [r7, #20]
 800a202:	f001 fd8b 	bl	800bd1c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a206:	4b23      	ldr	r3, [pc, #140]	@ (800a294 <tcp_listen_input+0x1e4>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	89db      	ldrh	r3, [r3, #14]
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	3304      	adds	r3, #4
 800a228:	4618      	mov	r0, r3
 800a22a:	f004 fcb5 	bl	800eb98 <ip4_route>
 800a22e:	4601      	mov	r1, r0
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	3304      	adds	r3, #4
 800a234:	461a      	mov	r2, r3
 800a236:	4620      	mov	r0, r4
 800a238:	f7ff fa30 	bl	800969c <tcp_eff_send_mss_netif>
 800a23c:	4603      	mov	r3, r0
 800a23e:	461a      	mov	r2, r3
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a244:	2112      	movs	r1, #18
 800a246:	6978      	ldr	r0, [r7, #20]
 800a248:	f002 f83e 	bl	800c2c8 <tcp_enqueue_flags>
 800a24c:	4603      	mov	r3, r0
 800a24e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800a250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d004      	beq.n	800a262 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800a258:	2100      	movs	r1, #0
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	f7fe f97c 	bl	8008558 <tcp_abandon>
      return;
 800a260:	e006      	b.n	800a270 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800a262:	6978      	ldr	r0, [r7, #20]
 800a264:	f002 f91e 	bl	800c4a4 <tcp_output>
  return;
 800a268:	e001      	b.n	800a26e <tcp_listen_input+0x1be>
    return;
 800a26a:	bf00      	nop
 800a26c:	e000      	b.n	800a270 <tcp_listen_input+0x1c0>
  return;
 800a26e:	bf00      	nop
}
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	bd90      	pop	{r4, r7, pc}
 800a276:	bf00      	nop
 800a278:	2400321c 	.word	0x2400321c
 800a27c:	080122e0 	.word	0x080122e0
 800a280:	080124d8 	.word	0x080124d8
 800a284:	0801232c 	.word	0x0801232c
 800a288:	24003214 	.word	0x24003214
 800a28c:	2400321a 	.word	0x2400321a
 800a290:	24003210 	.word	0x24003210
 800a294:	24003200 	.word	0x24003200
 800a298:	240002cc 	.word	0x240002cc
 800a29c:	240002d0 	.word	0x240002d0
 800a2a0:	240002bc 	.word	0x240002bc
 800a2a4:	240031e4 	.word	0x240031e4
 800a2a8:	240031ec 	.word	0x240031ec

0800a2ac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af04      	add	r7, sp, #16
 800a2b2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800a2b4:	4b2f      	ldr	r3, [pc, #188]	@ (800a374 <tcp_timewait_input+0xc8>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d153      	bne.n	800a368 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d106      	bne.n	800a2d4 <tcp_timewait_input+0x28>
 800a2c6:	4b2c      	ldr	r3, [pc, #176]	@ (800a378 <tcp_timewait_input+0xcc>)
 800a2c8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800a2cc:	492b      	ldr	r1, [pc, #172]	@ (800a37c <tcp_timewait_input+0xd0>)
 800a2ce:	482c      	ldr	r0, [pc, #176]	@ (800a380 <tcp_timewait_input+0xd4>)
 800a2d0:	f005 ff4e 	bl	8010170 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800a2d4:	4b27      	ldr	r3, [pc, #156]	@ (800a374 <tcp_timewait_input+0xc8>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	f003 0302 	and.w	r3, r3, #2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d02a      	beq.n	800a336 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a2e0:	4b28      	ldr	r3, [pc, #160]	@ (800a384 <tcp_timewait_input+0xd8>)
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	db2d      	blt.n	800a34a <tcp_timewait_input+0x9e>
 800a2ee:	4b25      	ldr	r3, [pc, #148]	@ (800a384 <tcp_timewait_input+0xd8>)
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a2fa:	440b      	add	r3, r1
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	dc23      	bgt.n	800a34a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a302:	4b21      	ldr	r3, [pc, #132]	@ (800a388 <tcp_timewait_input+0xdc>)
 800a304:	6819      	ldr	r1, [r3, #0]
 800a306:	4b21      	ldr	r3, [pc, #132]	@ (800a38c <tcp_timewait_input+0xe0>)
 800a308:	881b      	ldrh	r3, [r3, #0]
 800a30a:	461a      	mov	r2, r3
 800a30c:	4b1d      	ldr	r3, [pc, #116]	@ (800a384 <tcp_timewait_input+0xd8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a312:	4b1f      	ldr	r3, [pc, #124]	@ (800a390 <tcp_timewait_input+0xe4>)
 800a314:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a316:	885b      	ldrh	r3, [r3, #2]
 800a318:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a31a:	4a1d      	ldr	r2, [pc, #116]	@ (800a390 <tcp_timewait_input+0xe4>)
 800a31c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a31e:	8812      	ldrh	r2, [r2, #0]
 800a320:	b292      	uxth	r2, r2
 800a322:	9202      	str	r2, [sp, #8]
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	4b1b      	ldr	r3, [pc, #108]	@ (800a394 <tcp_timewait_input+0xe8>)
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	4b1b      	ldr	r3, [pc, #108]	@ (800a398 <tcp_timewait_input+0xec>)
 800a32c:	4602      	mov	r2, r0
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f002 fe6c 	bl	800d00c <tcp_rst>
      return;
 800a334:	e01b      	b.n	800a36e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800a336:	4b0f      	ldr	r3, [pc, #60]	@ (800a374 <tcp_timewait_input+0xc8>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800a342:	4b16      	ldr	r3, [pc, #88]	@ (800a39c <tcp_timewait_input+0xf0>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800a34a:	4b10      	ldr	r3, [pc, #64]	@ (800a38c <tcp_timewait_input+0xe0>)
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d00c      	beq.n	800a36c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	8b5b      	ldrh	r3, [r3, #26]
 800a356:	f043 0302 	orr.w	r3, r3, #2
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f002 f89f 	bl	800c4a4 <tcp_output>
  }
  return;
 800a366:	e001      	b.n	800a36c <tcp_timewait_input+0xc0>
    return;
 800a368:	bf00      	nop
 800a36a:	e000      	b.n	800a36e <tcp_timewait_input+0xc2>
  return;
 800a36c:	bf00      	nop
}
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	2400321c 	.word	0x2400321c
 800a378:	080122e0 	.word	0x080122e0
 800a37c:	080124f8 	.word	0x080124f8
 800a380:	0801232c 	.word	0x0801232c
 800a384:	24003210 	.word	0x24003210
 800a388:	24003214 	.word	0x24003214
 800a38c:	2400321a 	.word	0x2400321a
 800a390:	24003200 	.word	0x24003200
 800a394:	240002cc 	.word	0x240002cc
 800a398:	240002d0 	.word	0x240002d0
 800a39c:	240031d8 	.word	0x240031d8

0800a3a0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b08d      	sub	sp, #52	@ 0x34
 800a3a4:	af04      	add	r7, sp, #16
 800a3a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d106      	bne.n	800a3c4 <tcp_process+0x24>
 800a3b6:	4b9d      	ldr	r3, [pc, #628]	@ (800a62c <tcp_process+0x28c>)
 800a3b8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a3bc:	499c      	ldr	r1, [pc, #624]	@ (800a630 <tcp_process+0x290>)
 800a3be:	489d      	ldr	r0, [pc, #628]	@ (800a634 <tcp_process+0x294>)
 800a3c0:	f005 fed6 	bl	8010170 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800a3c4:	4b9c      	ldr	r3, [pc, #624]	@ (800a638 <tcp_process+0x298>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d04e      	beq.n	800a46e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	7d1b      	ldrb	r3, [r3, #20]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d108      	bne.n	800a3ea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3dc:	4b97      	ldr	r3, [pc, #604]	@ (800a63c <tcp_process+0x29c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d123      	bne.n	800a42c <tcp_process+0x8c>
        acceptable = 1;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	76fb      	strb	r3, [r7, #27]
 800a3e8:	e020      	b.n	800a42c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3ee:	4b94      	ldr	r3, [pc, #592]	@ (800a640 <tcp_process+0x2a0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d102      	bne.n	800a3fc <tcp_process+0x5c>
        acceptable = 1;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	76fb      	strb	r3, [r7, #27]
 800a3fa:	e017      	b.n	800a42c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3fc:	4b90      	ldr	r3, [pc, #576]	@ (800a640 <tcp_process+0x2a0>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	db10      	blt.n	800a42c <tcp_process+0x8c>
 800a40a:	4b8d      	ldr	r3, [pc, #564]	@ (800a640 <tcp_process+0x2a0>)
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a412:	6879      	ldr	r1, [r7, #4]
 800a414:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800a416:	440b      	add	r3, r1
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	dc06      	bgt.n	800a42c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	8b5b      	ldrh	r3, [r3, #26]
 800a422:	f043 0302 	orr.w	r3, r3, #2
 800a426:	b29a      	uxth	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800a42c:	7efb      	ldrb	r3, [r7, #27]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d01b      	beq.n	800a46a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	7d1b      	ldrb	r3, [r3, #20]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <tcp_process+0xa8>
 800a43a:	4b7c      	ldr	r3, [pc, #496]	@ (800a62c <tcp_process+0x28c>)
 800a43c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800a440:	4980      	ldr	r1, [pc, #512]	@ (800a644 <tcp_process+0x2a4>)
 800a442:	487c      	ldr	r0, [pc, #496]	@ (800a634 <tcp_process+0x294>)
 800a444:	f005 fe94 	bl	8010170 <iprintf>
      recv_flags |= TF_RESET;
 800a448:	4b7f      	ldr	r3, [pc, #508]	@ (800a648 <tcp_process+0x2a8>)
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f043 0308 	orr.w	r3, r3, #8
 800a450:	b2da      	uxtb	r2, r3
 800a452:	4b7d      	ldr	r3, [pc, #500]	@ (800a648 <tcp_process+0x2a8>)
 800a454:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	8b5b      	ldrh	r3, [r3, #26]
 800a45a:	f023 0301 	bic.w	r3, r3, #1
 800a45e:	b29a      	uxth	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800a464:	f06f 030d 	mvn.w	r3, #13
 800a468:	e37a      	b.n	800ab60 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800a46a:	2300      	movs	r3, #0
 800a46c:	e378      	b.n	800ab60 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a46e:	4b72      	ldr	r3, [pc, #456]	@ (800a638 <tcp_process+0x298>)
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	2b00      	cmp	r3, #0
 800a478:	d010      	beq.n	800a49c <tcp_process+0xfc>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	7d1b      	ldrb	r3, [r3, #20]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d00c      	beq.n	800a49c <tcp_process+0xfc>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	7d1b      	ldrb	r3, [r3, #20]
 800a486:	2b03      	cmp	r3, #3
 800a488:	d008      	beq.n	800a49c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	8b5b      	ldrh	r3, [r3, #26]
 800a48e:	f043 0302 	orr.w	r3, r3, #2
 800a492:	b29a      	uxth	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	e361      	b.n	800ab60 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	8b5b      	ldrh	r3, [r3, #26]
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d103      	bne.n	800a4b0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800a4a8:	4b68      	ldr	r3, [pc, #416]	@ (800a64c <tcp_process+0x2ac>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f001 fc2b 	bl	800bd1c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ca:	3b02      	subs	r3, #2
 800a4cc:	2b07      	cmp	r3, #7
 800a4ce:	f200 8337 	bhi.w	800ab40 <tcp_process+0x7a0>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <tcp_process+0x138>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4f9 	.word	0x0800a4f9
 800a4dc:	0800a729 	.word	0x0800a729
 800a4e0:	0800a8a1 	.word	0x0800a8a1
 800a4e4:	0800a8cb 	.word	0x0800a8cb
 800a4e8:	0800a9ef 	.word	0x0800a9ef
 800a4ec:	0800a8a1 	.word	0x0800a8a1
 800a4f0:	0800aa7b 	.word	0x0800aa7b
 800a4f4:	0800ab0b 	.word	0x0800ab0b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a4f8:	4b4f      	ldr	r3, [pc, #316]	@ (800a638 <tcp_process+0x298>)
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	f003 0310 	and.w	r3, r3, #16
 800a500:	2b00      	cmp	r3, #0
 800a502:	f000 80e4 	beq.w	800a6ce <tcp_process+0x32e>
 800a506:	4b4c      	ldr	r3, [pc, #304]	@ (800a638 <tcp_process+0x298>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	f003 0302 	and.w	r3, r3, #2
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 80dd 	beq.w	800a6ce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a518:	1c5a      	adds	r2, r3, #1
 800a51a:	4b48      	ldr	r3, [pc, #288]	@ (800a63c <tcp_process+0x29c>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	429a      	cmp	r2, r3
 800a520:	f040 80d5 	bne.w	800a6ce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800a524:	4b46      	ldr	r3, [pc, #280]	@ (800a640 <tcp_process+0x2a0>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	1c5a      	adds	r2, r3, #1
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800a536:	4b41      	ldr	r3, [pc, #260]	@ (800a63c <tcp_process+0x29c>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a53e:	4b44      	ldr	r3, [pc, #272]	@ (800a650 <tcp_process+0x2b0>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	89db      	ldrh	r3, [r3, #14]
 800a544:	b29a      	uxth	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a558:	4b39      	ldr	r3, [pc, #228]	@ (800a640 <tcp_process+0x2a0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	1e5a      	subs	r2, r3, #1
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2204      	movs	r2, #4
 800a566:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	3304      	adds	r3, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f004 fb11 	bl	800eb98 <ip4_route>
 800a576:	4601      	mov	r1, r0
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3304      	adds	r3, #4
 800a57c:	461a      	mov	r2, r3
 800a57e:	4620      	mov	r0, r4
 800a580:	f7ff f88c 	bl	800969c <tcp_eff_send_mss_netif>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a590:	009a      	lsls	r2, r3, #2
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a59c:	428b      	cmp	r3, r1
 800a59e:	bf38      	it	cc
 800a5a0:	460b      	movcc	r3, r1
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d204      	bcs.n	800a5b0 <tcp_process+0x210>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	e00d      	b.n	800a5cc <tcp_process+0x22c>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d904      	bls.n	800a5c8 <tcp_process+0x228>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	e001      	b.n	800a5cc <tcp_process+0x22c>
 800a5c8:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d106      	bne.n	800a5ea <tcp_process+0x24a>
 800a5dc:	4b13      	ldr	r3, [pc, #76]	@ (800a62c <tcp_process+0x28c>)
 800a5de:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800a5e2:	491c      	ldr	r1, [pc, #112]	@ (800a654 <tcp_process+0x2b4>)
 800a5e4:	4813      	ldr	r0, [pc, #76]	@ (800a634 <tcp_process+0x294>)
 800a5e6:	f005 fdc3 	bl	8010170 <iprintf>
        --pcb->snd_queuelen;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a5fe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800a600:	69fb      	ldr	r3, [r7, #28]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d12a      	bne.n	800a65c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a60a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <tcp_process+0x280>
 800a612:	4b06      	ldr	r3, [pc, #24]	@ (800a62c <tcp_process+0x28c>)
 800a614:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800a618:	490f      	ldr	r1, [pc, #60]	@ (800a658 <tcp_process+0x2b8>)
 800a61a:	4806      	ldr	r0, [pc, #24]	@ (800a634 <tcp_process+0x294>)
 800a61c:	f005 fda8 	bl	8010170 <iprintf>
          pcb->unsent = rseg->next;
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a628:	e01c      	b.n	800a664 <tcp_process+0x2c4>
 800a62a:	bf00      	nop
 800a62c:	080122e0 	.word	0x080122e0
 800a630:	08012518 	.word	0x08012518
 800a634:	0801232c 	.word	0x0801232c
 800a638:	2400321c 	.word	0x2400321c
 800a63c:	24003214 	.word	0x24003214
 800a640:	24003210 	.word	0x24003210
 800a644:	08012534 	.word	0x08012534
 800a648:	2400321d 	.word	0x2400321d
 800a64c:	240031d8 	.word	0x240031d8
 800a650:	24003200 	.word	0x24003200
 800a654:	08012554 	.word	0x08012554
 800a658:	0801256c 	.word	0x0801256c
        } else {
          pcb->unacked = rseg->next;
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800a664:	69f8      	ldr	r0, [r7, #28]
 800a666:	f7fe fd22 	bl	80090ae <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a678:	861a      	strh	r2, [r3, #48]	@ 0x30
 800a67a:	e006      	b.n	800a68a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a690:	2b00      	cmp	r3, #0
 800a692:	d00a      	beq.n	800a6aa <tcp_process+0x30a>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	6910      	ldr	r0, [r2, #16]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	6879      	ldr	r1, [r7, #4]
 800a6a2:	4798      	blx	r3
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	76bb      	strb	r3, [r7, #26]
 800a6a8:	e001      	b.n	800a6ae <tcp_process+0x30e>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800a6ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a6b2:	f113 0f0d 	cmn.w	r3, #13
 800a6b6:	d102      	bne.n	800a6be <tcp_process+0x31e>
          return ERR_ABRT;
 800a6b8:	f06f 030c 	mvn.w	r3, #12
 800a6bc:	e250      	b.n	800ab60 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	8b5b      	ldrh	r3, [r3, #26]
 800a6c2:	f043 0302 	orr.w	r3, r3, #2
 800a6c6:	b29a      	uxth	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800a6cc:	e23a      	b.n	800ab44 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800a6ce:	4b98      	ldr	r3, [pc, #608]	@ (800a930 <tcp_process+0x590>)
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 8234 	beq.w	800ab44 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6dc:	4b95      	ldr	r3, [pc, #596]	@ (800a934 <tcp_process+0x594>)
 800a6de:	6819      	ldr	r1, [r3, #0]
 800a6e0:	4b95      	ldr	r3, [pc, #596]	@ (800a938 <tcp_process+0x598>)
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4b95      	ldr	r3, [pc, #596]	@ (800a93c <tcp_process+0x59c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6ec:	4b94      	ldr	r3, [pc, #592]	@ (800a940 <tcp_process+0x5a0>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6f0:	885b      	ldrh	r3, [r3, #2]
 800a6f2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a6f4:	4a92      	ldr	r2, [pc, #584]	@ (800a940 <tcp_process+0x5a0>)
 800a6f6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a6f8:	8812      	ldrh	r2, [r2, #0]
 800a6fa:	b292      	uxth	r2, r2
 800a6fc:	9202      	str	r2, [sp, #8]
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	4b90      	ldr	r3, [pc, #576]	@ (800a944 <tcp_process+0x5a4>)
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	4b90      	ldr	r3, [pc, #576]	@ (800a948 <tcp_process+0x5a8>)
 800a706:	4602      	mov	r2, r0
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f002 fc7f 	bl	800d00c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a714:	2b05      	cmp	r3, #5
 800a716:	f200 8215 	bhi.w	800ab44 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f002 fa4b 	bl	800cbbc <tcp_rexmit_rto>
      break;
 800a726:	e20d      	b.n	800ab44 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800a728:	4b81      	ldr	r3, [pc, #516]	@ (800a930 <tcp_process+0x590>)
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	f003 0310 	and.w	r3, r3, #16
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 80a1 	beq.w	800a878 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a736:	4b7f      	ldr	r3, [pc, #508]	@ (800a934 <tcp_process+0x594>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	3b01      	subs	r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	db7e      	blt.n	800a844 <tcp_process+0x4a4>
 800a746:	4b7b      	ldr	r3, [pc, #492]	@ (800a934 <tcp_process+0x594>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	dc77      	bgt.n	800a844 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2204      	movs	r2, #4
 800a758:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800a762:	23fa      	movs	r3, #250	@ 0xfa
 800a764:	76bb      	strb	r3, [r7, #26]
 800a766:	e01d      	b.n	800a7a4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d106      	bne.n	800a780 <tcp_process+0x3e0>
 800a772:	4b76      	ldr	r3, [pc, #472]	@ (800a94c <tcp_process+0x5ac>)
 800a774:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800a778:	4975      	ldr	r1, [pc, #468]	@ (800a950 <tcp_process+0x5b0>)
 800a77a:	4876      	ldr	r0, [pc, #472]	@ (800a954 <tcp_process+0x5b4>)
 800a77c:	f005 fcf8 	bl	8010170 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00a      	beq.n	800a7a0 <tcp_process+0x400>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a78e:	699b      	ldr	r3, [r3, #24]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	6910      	ldr	r0, [r2, #16]
 800a794:	2200      	movs	r2, #0
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	4798      	blx	r3
 800a79a:	4603      	mov	r3, r0
 800a79c:	76bb      	strb	r3, [r7, #26]
 800a79e:	e001      	b.n	800a7a4 <tcp_process+0x404>
 800a7a0:	23f0      	movs	r3, #240	@ 0xf0
 800a7a2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800a7a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00a      	beq.n	800a7c2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800a7ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800a7b0:	f113 0f0d 	cmn.w	r3, #13
 800a7b4:	d002      	beq.n	800a7bc <tcp_process+0x41c>
              tcp_abort(pcb);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7fd ff8c 	bl	80086d4 <tcp_abort>
            }
            return ERR_ABRT;
 800a7bc:	f06f 030c 	mvn.w	r3, #12
 800a7c0:	e1ce      	b.n	800ab60 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 fae0 	bl	800ad88 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800a7c8:	4b63      	ldr	r3, [pc, #396]	@ (800a958 <tcp_process+0x5b8>)
 800a7ca:	881b      	ldrh	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <tcp_process+0x43c>
            recv_acked--;
 800a7d0:	4b61      	ldr	r3, [pc, #388]	@ (800a958 <tcp_process+0x5b8>)
 800a7d2:	881b      	ldrh	r3, [r3, #0]
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	4b5f      	ldr	r3, [pc, #380]	@ (800a958 <tcp_process+0x5b8>)
 800a7da:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7e0:	009a      	lsls	r2, r3, #2
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7e6:	005b      	lsls	r3, r3, #1
 800a7e8:	f241 111c 	movw	r1, #4380	@ 0x111c
 800a7ec:	428b      	cmp	r3, r1
 800a7ee:	bf38      	it	cc
 800a7f0:	460b      	movcc	r3, r1
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d204      	bcs.n	800a800 <tcp_process+0x460>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	e00d      	b.n	800a81c <tcp_process+0x47c>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a804:	005b      	lsls	r3, r3, #1
 800a806:	f241 121c 	movw	r2, #4380	@ 0x111c
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d904      	bls.n	800a818 <tcp_process+0x478>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	b29b      	uxth	r3, r3
 800a816:	e001      	b.n	800a81c <tcp_process+0x47c>
 800a818:	f241 131c 	movw	r3, #4380	@ 0x111c
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800a822:	4b4e      	ldr	r3, [pc, #312]	@ (800a95c <tcp_process+0x5bc>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	f003 0320 	and.w	r3, r3, #32
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d037      	beq.n	800a89e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	8b5b      	ldrh	r3, [r3, #26]
 800a832:	f043 0302 	orr.w	r3, r3, #2
 800a836:	b29a      	uxth	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2207      	movs	r2, #7
 800a840:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800a842:	e02c      	b.n	800a89e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a844:	4b3b      	ldr	r3, [pc, #236]	@ (800a934 <tcp_process+0x594>)
 800a846:	6819      	ldr	r1, [r3, #0]
 800a848:	4b3b      	ldr	r3, [pc, #236]	@ (800a938 <tcp_process+0x598>)
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	4b3b      	ldr	r3, [pc, #236]	@ (800a93c <tcp_process+0x59c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a854:	4b3a      	ldr	r3, [pc, #232]	@ (800a940 <tcp_process+0x5a0>)
 800a856:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a858:	885b      	ldrh	r3, [r3, #2]
 800a85a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a85c:	4a38      	ldr	r2, [pc, #224]	@ (800a940 <tcp_process+0x5a0>)
 800a85e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a860:	8812      	ldrh	r2, [r2, #0]
 800a862:	b292      	uxth	r2, r2
 800a864:	9202      	str	r2, [sp, #8]
 800a866:	9301      	str	r3, [sp, #4]
 800a868:	4b36      	ldr	r3, [pc, #216]	@ (800a944 <tcp_process+0x5a4>)
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	4b36      	ldr	r3, [pc, #216]	@ (800a948 <tcp_process+0x5a8>)
 800a86e:	4602      	mov	r2, r0
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f002 fbcb 	bl	800d00c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800a876:	e167      	b.n	800ab48 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a878:	4b2d      	ldr	r3, [pc, #180]	@ (800a930 <tcp_process+0x590>)
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	f003 0302 	and.w	r3, r3, #2
 800a880:	2b00      	cmp	r3, #0
 800a882:	f000 8161 	beq.w	800ab48 <tcp_process+0x7a8>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88a:	1e5a      	subs	r2, r3, #1
 800a88c:	4b2b      	ldr	r3, [pc, #172]	@ (800a93c <tcp_process+0x59c>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	429a      	cmp	r2, r3
 800a892:	f040 8159 	bne.w	800ab48 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f002 f9b2 	bl	800cc00 <tcp_rexmit>
      break;
 800a89c:	e154      	b.n	800ab48 <tcp_process+0x7a8>
 800a89e:	e153      	b.n	800ab48 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fa71 	bl	800ad88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a8a6:	4b2d      	ldr	r3, [pc, #180]	@ (800a95c <tcp_process+0x5bc>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	f003 0320 	and.w	r3, r3, #32
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f000 814c 	beq.w	800ab4c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	8b5b      	ldrh	r3, [r3, #26]
 800a8b8:	f043 0302 	orr.w	r3, r3, #2
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2207      	movs	r2, #7
 800a8c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a8c8:	e140      	b.n	800ab4c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa5c 	bl	800ad88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a8d0:	4b22      	ldr	r3, [pc, #136]	@ (800a95c <tcp_process+0x5bc>)
 800a8d2:	781b      	ldrb	r3, [r3, #0]
 800a8d4:	f003 0320 	and.w	r3, r3, #32
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d071      	beq.n	800a9c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8dc:	4b14      	ldr	r3, [pc, #80]	@ (800a930 <tcp_process+0x590>)
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	f003 0310 	and.w	r3, r3, #16
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d060      	beq.n	800a9aa <tcp_process+0x60a>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a8ec:	4b11      	ldr	r3, [pc, #68]	@ (800a934 <tcp_process+0x594>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d15a      	bne.n	800a9aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d156      	bne.n	800a9aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	8b5b      	ldrh	r3, [r3, #26]
 800a900:	f043 0302 	orr.w	r3, r3, #2
 800a904:	b29a      	uxth	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7fe fdbc 	bl	8009488 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a910:	4b13      	ldr	r3, [pc, #76]	@ (800a960 <tcp_process+0x5c0>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	429a      	cmp	r2, r3
 800a918:	d105      	bne.n	800a926 <tcp_process+0x586>
 800a91a:	4b11      	ldr	r3, [pc, #68]	@ (800a960 <tcp_process+0x5c0>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	4a0f      	ldr	r2, [pc, #60]	@ (800a960 <tcp_process+0x5c0>)
 800a922:	6013      	str	r3, [r2, #0]
 800a924:	e02e      	b.n	800a984 <tcp_process+0x5e4>
 800a926:	4b0e      	ldr	r3, [pc, #56]	@ (800a960 <tcp_process+0x5c0>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	617b      	str	r3, [r7, #20]
 800a92c:	e027      	b.n	800a97e <tcp_process+0x5de>
 800a92e:	bf00      	nop
 800a930:	2400321c 	.word	0x2400321c
 800a934:	24003214 	.word	0x24003214
 800a938:	2400321a 	.word	0x2400321a
 800a93c:	24003210 	.word	0x24003210
 800a940:	24003200 	.word	0x24003200
 800a944:	240002cc 	.word	0x240002cc
 800a948:	240002d0 	.word	0x240002d0
 800a94c:	080122e0 	.word	0x080122e0
 800a950:	08012580 	.word	0x08012580
 800a954:	0801232c 	.word	0x0801232c
 800a958:	24003218 	.word	0x24003218
 800a95c:	2400321d 	.word	0x2400321d
 800a960:	240031e4 	.word	0x240031e4
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	68db      	ldr	r3, [r3, #12]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d104      	bne.n	800a978 <tcp_process+0x5d8>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68da      	ldr	r2, [r3, #12]
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	60da      	str	r2, [r3, #12]
 800a976:	e005      	b.n	800a984 <tcp_process+0x5e4>
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	617b      	str	r3, [r7, #20]
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1ef      	bne.n	800a964 <tcp_process+0x5c4>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	60da      	str	r2, [r3, #12]
 800a98a:	4b77      	ldr	r3, [pc, #476]	@ (800ab68 <tcp_process+0x7c8>)
 800a98c:	2201      	movs	r2, #1
 800a98e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	220a      	movs	r2, #10
 800a994:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800a996:	4b75      	ldr	r3, [pc, #468]	@ (800ab6c <tcp_process+0x7cc>)
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	60da      	str	r2, [r3, #12]
 800a99e:	4a73      	ldr	r2, [pc, #460]	@ (800ab6c <tcp_process+0x7cc>)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	f002 fcf4 	bl	800d390 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800a9a8:	e0d2      	b.n	800ab50 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	8b5b      	ldrh	r3, [r3, #26]
 800a9ae:	f043 0302 	orr.w	r3, r3, #2
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	751a      	strb	r2, [r3, #20]
      break;
 800a9be:	e0c7      	b.n	800ab50 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9c0:	4b6b      	ldr	r3, [pc, #428]	@ (800ab70 <tcp_process+0x7d0>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	f003 0310 	and.w	r3, r3, #16
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	f000 80c1 	beq.w	800ab50 <tcp_process+0x7b0>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9d2:	4b68      	ldr	r3, [pc, #416]	@ (800ab74 <tcp_process+0x7d4>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	f040 80ba 	bne.w	800ab50 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f040 80b5 	bne.w	800ab50 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2206      	movs	r2, #6
 800a9ea:	751a      	strb	r2, [r3, #20]
      break;
 800a9ec:	e0b0      	b.n	800ab50 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f9ca 	bl	800ad88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9f4:	4b60      	ldr	r3, [pc, #384]	@ (800ab78 <tcp_process+0x7d8>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 80a9 	beq.w	800ab54 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	8b5b      	ldrh	r3, [r3, #26]
 800aa06:	f043 0302 	orr.w	r3, r3, #2
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7fe fd39 	bl	8009488 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aa16:	4b59      	ldr	r3, [pc, #356]	@ (800ab7c <tcp_process+0x7dc>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d105      	bne.n	800aa2c <tcp_process+0x68c>
 800aa20:	4b56      	ldr	r3, [pc, #344]	@ (800ab7c <tcp_process+0x7dc>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	4a55      	ldr	r2, [pc, #340]	@ (800ab7c <tcp_process+0x7dc>)
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	e013      	b.n	800aa54 <tcp_process+0x6b4>
 800aa2c:	4b53      	ldr	r3, [pc, #332]	@ (800ab7c <tcp_process+0x7dc>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	613b      	str	r3, [r7, #16]
 800aa32:	e00c      	b.n	800aa4e <tcp_process+0x6ae>
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d104      	bne.n	800aa48 <tcp_process+0x6a8>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68da      	ldr	r2, [r3, #12]
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	60da      	str	r2, [r3, #12]
 800aa46:	e005      	b.n	800aa54 <tcp_process+0x6b4>
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	613b      	str	r3, [r7, #16]
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d1ef      	bne.n	800aa34 <tcp_process+0x694>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	60da      	str	r2, [r3, #12]
 800aa5a:	4b43      	ldr	r3, [pc, #268]	@ (800ab68 <tcp_process+0x7c8>)
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	220a      	movs	r2, #10
 800aa64:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aa66:	4b41      	ldr	r3, [pc, #260]	@ (800ab6c <tcp_process+0x7cc>)
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	60da      	str	r2, [r3, #12]
 800aa6e:	4a3f      	ldr	r2, [pc, #252]	@ (800ab6c <tcp_process+0x7cc>)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	f002 fc8c 	bl	800d390 <tcp_timer_needed>
      }
      break;
 800aa78:	e06c      	b.n	800ab54 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f984 	bl	800ad88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800aa80:	4b3b      	ldr	r3, [pc, #236]	@ (800ab70 <tcp_process+0x7d0>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	f003 0310 	and.w	r3, r3, #16
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d065      	beq.n	800ab58 <tcp_process+0x7b8>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa90:	4b38      	ldr	r3, [pc, #224]	@ (800ab74 <tcp_process+0x7d4>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d15f      	bne.n	800ab58 <tcp_process+0x7b8>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d15b      	bne.n	800ab58 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7fe fcf1 	bl	8009488 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aaa6:	4b35      	ldr	r3, [pc, #212]	@ (800ab7c <tcp_process+0x7dc>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d105      	bne.n	800aabc <tcp_process+0x71c>
 800aab0:	4b32      	ldr	r3, [pc, #200]	@ (800ab7c <tcp_process+0x7dc>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68db      	ldr	r3, [r3, #12]
 800aab6:	4a31      	ldr	r2, [pc, #196]	@ (800ab7c <tcp_process+0x7dc>)
 800aab8:	6013      	str	r3, [r2, #0]
 800aaba:	e013      	b.n	800aae4 <tcp_process+0x744>
 800aabc:	4b2f      	ldr	r3, [pc, #188]	@ (800ab7c <tcp_process+0x7dc>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	60fb      	str	r3, [r7, #12]
 800aac2:	e00c      	b.n	800aade <tcp_process+0x73e>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d104      	bne.n	800aad8 <tcp_process+0x738>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	60da      	str	r2, [r3, #12]
 800aad6:	e005      	b.n	800aae4 <tcp_process+0x744>
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d1ef      	bne.n	800aac4 <tcp_process+0x724>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	60da      	str	r2, [r3, #12]
 800aaea:	4b1f      	ldr	r3, [pc, #124]	@ (800ab68 <tcp_process+0x7c8>)
 800aaec:	2201      	movs	r2, #1
 800aaee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	220a      	movs	r2, #10
 800aaf4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aaf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ab6c <tcp_process+0x7cc>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	60da      	str	r2, [r3, #12]
 800aafe:	4a1b      	ldr	r2, [pc, #108]	@ (800ab6c <tcp_process+0x7cc>)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	f002 fc44 	bl	800d390 <tcp_timer_needed>
      }
      break;
 800ab08:	e026      	b.n	800ab58 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f000 f93c 	bl	800ad88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab10:	4b17      	ldr	r3, [pc, #92]	@ (800ab70 <tcp_process+0x7d0>)
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	f003 0310 	and.w	r3, r3, #16
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d01f      	beq.n	800ab5c <tcp_process+0x7bc>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab20:	4b14      	ldr	r3, [pc, #80]	@ (800ab74 <tcp_process+0x7d4>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d119      	bne.n	800ab5c <tcp_process+0x7bc>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d115      	bne.n	800ab5c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ab30:	4b11      	ldr	r3, [pc, #68]	@ (800ab78 <tcp_process+0x7d8>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	f043 0310 	orr.w	r3, r3, #16
 800ab38:	b2da      	uxtb	r2, r3
 800ab3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab78 <tcp_process+0x7d8>)
 800ab3c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ab3e:	e00d      	b.n	800ab5c <tcp_process+0x7bc>
    default:
      break;
 800ab40:	bf00      	nop
 800ab42:	e00c      	b.n	800ab5e <tcp_process+0x7be>
      break;
 800ab44:	bf00      	nop
 800ab46:	e00a      	b.n	800ab5e <tcp_process+0x7be>
      break;
 800ab48:	bf00      	nop
 800ab4a:	e008      	b.n	800ab5e <tcp_process+0x7be>
      break;
 800ab4c:	bf00      	nop
 800ab4e:	e006      	b.n	800ab5e <tcp_process+0x7be>
      break;
 800ab50:	bf00      	nop
 800ab52:	e004      	b.n	800ab5e <tcp_process+0x7be>
      break;
 800ab54:	bf00      	nop
 800ab56:	e002      	b.n	800ab5e <tcp_process+0x7be>
      break;
 800ab58:	bf00      	nop
 800ab5a:	e000      	b.n	800ab5e <tcp_process+0x7be>
      break;
 800ab5c:	bf00      	nop
  }
  return ERR_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3724      	adds	r7, #36	@ 0x24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd90      	pop	{r4, r7, pc}
 800ab68:	240031ec 	.word	0x240031ec
 800ab6c:	240031e8 	.word	0x240031e8
 800ab70:	2400321c 	.word	0x2400321c
 800ab74:	24003214 	.word	0x24003214
 800ab78:	2400321d 	.word	0x2400321d
 800ab7c:	240031e4 	.word	0x240031e4

0800ab80 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ab80:	b590      	push	{r4, r7, lr}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d106      	bne.n	800ab9e <tcp_oos_insert_segment+0x1e>
 800ab90:	4b3b      	ldr	r3, [pc, #236]	@ (800ac80 <tcp_oos_insert_segment+0x100>)
 800ab92:	f240 421f 	movw	r2, #1055	@ 0x41f
 800ab96:	493b      	ldr	r1, [pc, #236]	@ (800ac84 <tcp_oos_insert_segment+0x104>)
 800ab98:	483b      	ldr	r0, [pc, #236]	@ (800ac88 <tcp_oos_insert_segment+0x108>)
 800ab9a:	f005 fae9 	bl	8010170 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	899b      	ldrh	r3, [r3, #12]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	4618      	mov	r0, r3
 800aba8:	f7fb fbf6 	bl	8006398 <lwip_htons>
 800abac:	4603      	mov	r3, r0
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 0301 	and.w	r3, r3, #1
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d028      	beq.n	800ac0a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800abb8:	6838      	ldr	r0, [r7, #0]
 800abba:	f7fe fa63 	bl	8009084 <tcp_segs_free>
    next = NULL;
 800abbe:	2300      	movs	r3, #0
 800abc0:	603b      	str	r3, [r7, #0]
 800abc2:	e056      	b.n	800ac72 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	899b      	ldrh	r3, [r3, #12]
 800abca:	b29b      	uxth	r3, r3
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fb fbe3 	bl	8006398 <lwip_htons>
 800abd2:	4603      	mov	r3, r0
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00d      	beq.n	800abfa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	899b      	ldrh	r3, [r3, #12]
 800abe4:	b29c      	uxth	r4, r3
 800abe6:	2001      	movs	r0, #1
 800abe8:	f7fb fbd6 	bl	8006398 <lwip_htons>
 800abec:	4603      	mov	r3, r0
 800abee:	461a      	mov	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	4322      	orrs	r2, r4
 800abf6:	b292      	uxth	r2, r2
 800abf8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f7fe fa52 	bl	80090ae <tcp_seg_free>
    while (next &&
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00e      	beq.n	800ac2e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	891b      	ldrh	r3, [r3, #8]
 800ac14:	461a      	mov	r2, r3
 800ac16:	4b1d      	ldr	r3, [pc, #116]	@ (800ac8c <tcp_oos_insert_segment+0x10c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	441a      	add	r2, r3
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	8909      	ldrh	r1, [r1, #8]
 800ac26:	440b      	add	r3, r1
 800ac28:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	daca      	bge.n	800abc4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01e      	beq.n	800ac72 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	891b      	ldrh	r3, [r3, #8]
 800ac38:	461a      	mov	r2, r3
 800ac3a:	4b14      	ldr	r3, [pc, #80]	@ (800ac8c <tcp_oos_insert_segment+0x10c>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	441a      	add	r2, r3
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dd12      	ble.n	800ac72 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	4b0d      	ldr	r3, [pc, #52]	@ (800ac8c <tcp_oos_insert_segment+0x10c>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	1ad3      	subs	r3, r2, r3
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685a      	ldr	r2, [r3, #4]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	891b      	ldrh	r3, [r3, #8]
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	f7fc fe23 	bl	80078b8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	601a      	str	r2, [r3, #0]
}
 800ac78:	bf00      	nop
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd90      	pop	{r4, r7, pc}
 800ac80:	080122e0 	.word	0x080122e0
 800ac84:	080125a0 	.word	0x080125a0
 800ac88:	0801232c 	.word	0x0801232c
 800ac8c:	24003210 	.word	0x24003210

0800ac90 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ac90:	b5b0      	push	{r4, r5, r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	60b9      	str	r1, [r7, #8]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ac9e:	e03e      	b.n	800ad1e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fd f810 	bl	8007cd4 <pbuf_clen>
 800acb4:	4603      	mov	r3, r0
 800acb6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800acbe:	8a7a      	ldrh	r2, [r7, #18]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d906      	bls.n	800acd2 <tcp_free_acked_segments+0x42>
 800acc4:	4b2a      	ldr	r3, [pc, #168]	@ (800ad70 <tcp_free_acked_segments+0xe0>)
 800acc6:	f240 4257 	movw	r2, #1111	@ 0x457
 800acca:	492a      	ldr	r1, [pc, #168]	@ (800ad74 <tcp_free_acked_segments+0xe4>)
 800accc:	482a      	ldr	r0, [pc, #168]	@ (800ad78 <tcp_free_acked_segments+0xe8>)
 800acce:	f005 fa4f 	bl	8010170 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800acd8:	8a7b      	ldrh	r3, [r7, #18]
 800acda:	1ad3      	subs	r3, r2, r3
 800acdc:	b29a      	uxth	r2, r3
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	891a      	ldrh	r2, [r3, #8]
 800ace8:	4b24      	ldr	r3, [pc, #144]	@ (800ad7c <tcp_free_acked_segments+0xec>)
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	4413      	add	r3, r2
 800acee:	b29a      	uxth	r2, r3
 800acf0:	4b22      	ldr	r3, [pc, #136]	@ (800ad7c <tcp_free_acked_segments+0xec>)
 800acf2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800acf4:	6978      	ldr	r0, [r7, #20]
 800acf6:	f7fe f9da 	bl	80090ae <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00c      	beq.n	800ad1e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d109      	bne.n	800ad1e <tcp_free_acked_segments+0x8e>
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d106      	bne.n	800ad1e <tcp_free_acked_segments+0x8e>
 800ad10:	4b17      	ldr	r3, [pc, #92]	@ (800ad70 <tcp_free_acked_segments+0xe0>)
 800ad12:	f240 4261 	movw	r2, #1121	@ 0x461
 800ad16:	491a      	ldr	r1, [pc, #104]	@ (800ad80 <tcp_free_acked_segments+0xf0>)
 800ad18:	4817      	ldr	r0, [pc, #92]	@ (800ad78 <tcp_free_acked_segments+0xe8>)
 800ad1a:	f005 fa29 	bl	8010170 <iprintf>
  while (seg_list != NULL &&
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d020      	beq.n	800ad66 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fb fb49 	bl	80063c2 <lwip_htonl>
 800ad30:	4604      	mov	r4, r0
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	891b      	ldrh	r3, [r3, #8]
 800ad36:	461d      	mov	r5, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	899b      	ldrh	r3, [r3, #12]
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fb fb29 	bl	8006398 <lwip_htons>
 800ad46:	4603      	mov	r3, r0
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	f003 0303 	and.w	r3, r3, #3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d001      	beq.n	800ad56 <tcp_free_acked_segments+0xc6>
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <tcp_free_acked_segments+0xc8>
 800ad56:	2300      	movs	r3, #0
 800ad58:	442b      	add	r3, r5
 800ad5a:	18e2      	adds	r2, r4, r3
 800ad5c:	4b09      	ldr	r3, [pc, #36]	@ (800ad84 <tcp_free_acked_segments+0xf4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	dd9c      	ble.n	800aca0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ad66:	68bb      	ldr	r3, [r7, #8]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad70:	080122e0 	.word	0x080122e0
 800ad74:	080125c8 	.word	0x080125c8
 800ad78:	0801232c 	.word	0x0801232c
 800ad7c:	24003218 	.word	0x24003218
 800ad80:	080125f0 	.word	0x080125f0
 800ad84:	24003214 	.word	0x24003214

0800ad88 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ad88:	b5b0      	push	{r4, r5, r7, lr}
 800ad8a:	b094      	sub	sp, #80	@ 0x50
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d106      	bne.n	800ada8 <tcp_receive+0x20>
 800ad9a:	4b91      	ldr	r3, [pc, #580]	@ (800afe0 <tcp_receive+0x258>)
 800ad9c:	f240 427b 	movw	r2, #1147	@ 0x47b
 800ada0:	4990      	ldr	r1, [pc, #576]	@ (800afe4 <tcp_receive+0x25c>)
 800ada2:	4891      	ldr	r0, [pc, #580]	@ (800afe8 <tcp_receive+0x260>)
 800ada4:	f005 f9e4 	bl	8010170 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7d1b      	ldrb	r3, [r3, #20]
 800adac:	2b03      	cmp	r3, #3
 800adae:	d806      	bhi.n	800adbe <tcp_receive+0x36>
 800adb0:	4b8b      	ldr	r3, [pc, #556]	@ (800afe0 <tcp_receive+0x258>)
 800adb2:	f240 427c 	movw	r2, #1148	@ 0x47c
 800adb6:	498d      	ldr	r1, [pc, #564]	@ (800afec <tcp_receive+0x264>)
 800adb8:	488b      	ldr	r0, [pc, #556]	@ (800afe8 <tcp_receive+0x260>)
 800adba:	f005 f9d9 	bl	8010170 <iprintf>

  if (flags & TCP_ACK) {
 800adbe:	4b8c      	ldr	r3, [pc, #560]	@ (800aff0 <tcp_receive+0x268>)
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	f003 0310 	and.w	r3, r3, #16
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8264 	beq.w	800b294 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800add2:	461a      	mov	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800add8:	4413      	add	r3, r2
 800adda:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ade0:	4b84      	ldr	r3, [pc, #528]	@ (800aff4 <tcp_receive+0x26c>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	db1b      	blt.n	800ae22 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800adee:	4b81      	ldr	r3, [pc, #516]	@ (800aff4 <tcp_receive+0x26c>)
 800adf0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d106      	bne.n	800ae04 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800adfa:	4b7f      	ldr	r3, [pc, #508]	@ (800aff8 <tcp_receive+0x270>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	db0e      	blt.n	800ae22 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae08:	4b7b      	ldr	r3, [pc, #492]	@ (800aff8 <tcp_receive+0x270>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d125      	bne.n	800ae5c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ae10:	4b7a      	ldr	r3, [pc, #488]	@ (800affc <tcp_receive+0x274>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	89db      	ldrh	r3, [r3, #14]
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d91c      	bls.n	800ae5c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ae22:	4b76      	ldr	r3, [pc, #472]	@ (800affc <tcp_receive+0x274>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	89db      	ldrh	r3, [r3, #14]
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d205      	bcs.n	800ae4c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800ae4c:	4b69      	ldr	r3, [pc, #420]	@ (800aff4 <tcp_receive+0x26c>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800ae54:	4b68      	ldr	r3, [pc, #416]	@ (800aff8 <tcp_receive+0x270>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ae5c:	4b66      	ldr	r3, [pc, #408]	@ (800aff8 <tcp_receive+0x270>)
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae64:	1ad3      	subs	r3, r2, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	dc58      	bgt.n	800af1c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ae6a:	4b65      	ldr	r3, [pc, #404]	@ (800b000 <tcp_receive+0x278>)
 800ae6c:	881b      	ldrh	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d14b      	bne.n	800af0a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800ae7c:	4413      	add	r3, r2
 800ae7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d142      	bne.n	800af0a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	db3d      	blt.n	800af0a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae92:	4b59      	ldr	r3, [pc, #356]	@ (800aff8 <tcp_receive+0x270>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	429a      	cmp	r2, r3
 800ae98:	d137      	bne.n	800af0a <tcp_receive+0x182>
              found_dupack = 1;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aea4:	2bff      	cmp	r3, #255	@ 0xff
 800aea6:	d007      	beq.n	800aeb8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aeae:	3301      	adds	r3, #1
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d91b      	bls.n	800aefa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aecc:	4413      	add	r3, r2
 800aece:	b29a      	uxth	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d30a      	bcc.n	800aef0 <tcp_receive+0x168>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800aee4:	4413      	add	r3, r2
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800aeee:	e004      	b.n	800aefa <tcp_receive+0x172>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aef6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800af00:	2b02      	cmp	r3, #2
 800af02:	d902      	bls.n	800af0a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f001 fee7 	bl	800ccd8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800af0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f040 8161 	bne.w	800b1d4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af1a:	e15b      	b.n	800b1d4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800af1c:	4b36      	ldr	r3, [pc, #216]	@ (800aff8 <tcp_receive+0x270>)
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	3b01      	subs	r3, #1
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f2c0 814e 	blt.w	800b1ca <tcp_receive+0x442>
 800af2e:	4b32      	ldr	r3, [pc, #200]	@ (800aff8 <tcp_receive+0x270>)
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f300 8146 	bgt.w	800b1ca <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	8b5b      	ldrh	r3, [r3, #26]
 800af42:	f003 0304 	and.w	r3, r3, #4
 800af46:	2b00      	cmp	r3, #0
 800af48:	d010      	beq.n	800af6c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	8b5b      	ldrh	r3, [r3, #26]
 800af4e:	f023 0304 	bic.w	r3, r3, #4
 800af52:	b29a      	uxth	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800af7a:	10db      	asrs	r3, r3, #3
 800af7c:	b21b      	sxth	r3, r3
 800af7e:	b29a      	uxth	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800af86:	b29b      	uxth	r3, r3
 800af88:	4413      	add	r3, r2
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	b21a      	sxth	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800af94:	4b18      	ldr	r3, [pc, #96]	@ (800aff8 <tcp_receive+0x270>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	b29a      	uxth	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800afac:	4b12      	ldr	r3, [pc, #72]	@ (800aff8 <tcp_receive+0x270>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	7d1b      	ldrb	r3, [r3, #20]
 800afb8:	2b03      	cmp	r3, #3
 800afba:	f240 8097 	bls.w	800b0ec <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800afca:	429a      	cmp	r2, r3
 800afcc:	d245      	bcs.n	800b05a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	8b5b      	ldrh	r3, [r3, #26]
 800afd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d014      	beq.n	800b004 <tcp_receive+0x27c>
 800afda:	2301      	movs	r3, #1
 800afdc:	e013      	b.n	800b006 <tcp_receive+0x27e>
 800afde:	bf00      	nop
 800afe0:	080122e0 	.word	0x080122e0
 800afe4:	08012610 	.word	0x08012610
 800afe8:	0801232c 	.word	0x0801232c
 800afec:	0801262c 	.word	0x0801262c
 800aff0:	2400321c 	.word	0x2400321c
 800aff4:	24003210 	.word	0x24003210
 800aff8:	24003214 	.word	0x24003214
 800affc:	24003200 	.word	0x24003200
 800b000:	2400321a 	.word	0x2400321a
 800b004:	2302      	movs	r3, #2
 800b006:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800b00a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800b00e:	b29a      	uxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b014:	fb12 f303 	smulbb	r3, r2, r3
 800b018:	b29b      	uxth	r3, r3
 800b01a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b01c:	4293      	cmp	r3, r2
 800b01e:	bf28      	it	cs
 800b020:	4613      	movcs	r3, r2
 800b022:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b02a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b02c:	4413      	add	r3, r2
 800b02e:	b29a      	uxth	r2, r3
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b036:	429a      	cmp	r2, r3
 800b038:	d309      	bcc.n	800b04e <tcp_receive+0x2c6>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b040:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b042:	4413      	add	r3, r2
 800b044:	b29a      	uxth	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b04c:	e04e      	b.n	800b0ec <tcp_receive+0x364>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b054:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b058:	e048      	b.n	800b0ec <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b060:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b062:	4413      	add	r3, r2
 800b064:	b29a      	uxth	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d309      	bcc.n	800b084 <tcp_receive+0x2fc>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b076:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b078:	4413      	add	r3, r2
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b082:	e004      	b.n	800b08e <tcp_receive+0x306>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b08a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d326      	bcc.n	800b0ec <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0be:	4413      	add	r3, r2
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d30a      	bcc.n	800b0e2 <tcp_receive+0x35a>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b0d6:	4413      	add	r3, r2
 800b0d8:	b29a      	uxth	r2, r3
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800b0e0:	e004      	b.n	800b0ec <tcp_receive+0x364>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0f4:	4a98      	ldr	r2, [pc, #608]	@ (800b358 <tcp_receive+0x5d0>)
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fdca 	bl	800ac90 <tcp_free_acked_segments>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b10a:	4a94      	ldr	r2, [pc, #592]	@ (800b35c <tcp_receive+0x5d4>)
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7ff fdbf 	bl	800ac90 <tcp_free_acked_segments>
 800b112:	4602      	mov	r2, r0
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d104      	bne.n	800b12a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b126:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b128:	e002      	b.n	800b130 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d103      	bne.n	800b146 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800b14c:	4b84      	ldr	r3, [pc, #528]	@ (800b360 <tcp_receive+0x5d8>)
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	4413      	add	r3, r2
 800b152:	b29a      	uxth	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	8b5b      	ldrh	r3, [r3, #26]
 800b15e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b162:	2b00      	cmp	r3, #0
 800b164:	d035      	beq.n	800b1d2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d118      	bne.n	800b1a0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00c      	beq.n	800b190 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	f7fb f91d 	bl	80063c2 <lwip_htonl>
 800b188:	4603      	mov	r3, r0
 800b18a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	dc20      	bgt.n	800b1d2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	8b5b      	ldrh	r3, [r3, #26]
 800b194:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b198:	b29a      	uxth	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b19e:	e018      	b.n	800b1d2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7fb f908 	bl	80063c2 <lwip_htonl>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	1ae3      	subs	r3, r4, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	dc0b      	bgt.n	800b1d2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	8b5b      	ldrh	r3, [r3, #26]
 800b1be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1c8:	e003      	b.n	800b1d2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 ff70 	bl	800d0b0 <tcp_send_empty_ack>
 800b1d0:	e000      	b.n	800b1d4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1d2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d05b      	beq.n	800b294 <tcp_receive+0x50c>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1e0:	4b60      	ldr	r3, [pc, #384]	@ (800b364 <tcp_receive+0x5dc>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	da54      	bge.n	800b294 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b1ea:	4b5f      	ldr	r3, [pc, #380]	@ (800b368 <tcp_receive+0x5e0>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	1ad3      	subs	r3, r2, r3
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800b1fe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b208:	10db      	asrs	r3, r3, #3
 800b20a:	b21b      	sxth	r3, r3
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	b29b      	uxth	r3, r3
 800b212:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b222:	4413      	add	r3, r2
 800b224:	b29b      	uxth	r3, r3
 800b226:	b21a      	sxth	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800b22c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800b230:	2b00      	cmp	r3, #0
 800b232:	da05      	bge.n	800b240 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800b234:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b238:	425b      	negs	r3, r3
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800b240:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b24a:	109b      	asrs	r3, r3, #2
 800b24c:	b21b      	sxth	r3, r3
 800b24e:	b29b      	uxth	r3, r3
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	b29b      	uxth	r3, r3
 800b254:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b25e:	b29a      	uxth	r2, r3
 800b260:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b264:	4413      	add	r3, r2
 800b266:	b29b      	uxth	r3, r3
 800b268:	b21a      	sxth	r2, r3
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800b274:	10db      	asrs	r3, r3, #3
 800b276:	b21b      	sxth	r3, r3
 800b278:	b29a      	uxth	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800b280:	b29b      	uxth	r3, r3
 800b282:	4413      	add	r3, r2
 800b284:	b29b      	uxth	r3, r3
 800b286:	b21a      	sxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b294:	4b35      	ldr	r3, [pc, #212]	@ (800b36c <tcp_receive+0x5e4>)
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 84df 	beq.w	800bc5c <tcp_receive+0xed4>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7d1b      	ldrb	r3, [r3, #20]
 800b2a2:	2b06      	cmp	r3, #6
 800b2a4:	f200 84da 	bhi.w	800bc5c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2ac:	4b30      	ldr	r3, [pc, #192]	@ (800b370 <tcp_receive+0x5e8>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f2c0 808f 	blt.w	800b3d8 <tcp_receive+0x650>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2be:	4b2b      	ldr	r3, [pc, #172]	@ (800b36c <tcp_receive+0x5e4>)
 800b2c0:	881b      	ldrh	r3, [r3, #0]
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	4b2a      	ldr	r3, [pc, #168]	@ (800b370 <tcp_receive+0x5e8>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	440b      	add	r3, r1
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f300 8082 	bgt.w	800b3d8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b2d4:	4b27      	ldr	r3, [pc, #156]	@ (800b374 <tcp_receive+0x5ec>)
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b2de:	4b24      	ldr	r3, [pc, #144]	@ (800b370 <tcp_receive+0x5e8>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b2e6:	4b23      	ldr	r3, [pc, #140]	@ (800b374 <tcp_receive+0x5ec>)
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d106      	bne.n	800b2fc <tcp_receive+0x574>
 800b2ee:	4b22      	ldr	r3, [pc, #136]	@ (800b378 <tcp_receive+0x5f0>)
 800b2f0:	f240 5294 	movw	r2, #1428	@ 0x594
 800b2f4:	4921      	ldr	r1, [pc, #132]	@ (800b37c <tcp_receive+0x5f4>)
 800b2f6:	4822      	ldr	r0, [pc, #136]	@ (800b380 <tcp_receive+0x5f8>)
 800b2f8:	f004 ff3a 	bl	8010170 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800b302:	4293      	cmp	r3, r2
 800b304:	d906      	bls.n	800b314 <tcp_receive+0x58c>
 800b306:	4b1c      	ldr	r3, [pc, #112]	@ (800b378 <tcp_receive+0x5f0>)
 800b308:	f240 5295 	movw	r2, #1429	@ 0x595
 800b30c:	491d      	ldr	r1, [pc, #116]	@ (800b384 <tcp_receive+0x5fc>)
 800b30e:	481c      	ldr	r0, [pc, #112]	@ (800b380 <tcp_receive+0x5f8>)
 800b310:	f004 ff2e 	bl	8010170 <iprintf>
      off = (u16_t)off32;
 800b314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b316:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b31a:	4b16      	ldr	r3, [pc, #88]	@ (800b374 <tcp_receive+0x5ec>)
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	891b      	ldrh	r3, [r3, #8]
 800b320:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b324:	429a      	cmp	r2, r3
 800b326:	d906      	bls.n	800b336 <tcp_receive+0x5ae>
 800b328:	4b13      	ldr	r3, [pc, #76]	@ (800b378 <tcp_receive+0x5f0>)
 800b32a:	f240 5297 	movw	r2, #1431	@ 0x597
 800b32e:	4916      	ldr	r1, [pc, #88]	@ (800b388 <tcp_receive+0x600>)
 800b330:	4813      	ldr	r0, [pc, #76]	@ (800b380 <tcp_receive+0x5f8>)
 800b332:	f004 ff1d 	bl	8010170 <iprintf>
      inseg.len -= off;
 800b336:	4b0f      	ldr	r3, [pc, #60]	@ (800b374 <tcp_receive+0x5ec>)
 800b338:	891a      	ldrh	r2, [r3, #8]
 800b33a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	b29a      	uxth	r2, r3
 800b342:	4b0c      	ldr	r3, [pc, #48]	@ (800b374 <tcp_receive+0x5ec>)
 800b344:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b346:	4b0b      	ldr	r3, [pc, #44]	@ (800b374 <tcp_receive+0x5ec>)
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	891a      	ldrh	r2, [r3, #8]
 800b34c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b350:	1ad3      	subs	r3, r2, r3
 800b352:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800b354:	e02a      	b.n	800b3ac <tcp_receive+0x624>
 800b356:	bf00      	nop
 800b358:	08012648 	.word	0x08012648
 800b35c:	08012650 	.word	0x08012650
 800b360:	24003218 	.word	0x24003218
 800b364:	24003214 	.word	0x24003214
 800b368:	240031d8 	.word	0x240031d8
 800b36c:	2400321a 	.word	0x2400321a
 800b370:	24003210 	.word	0x24003210
 800b374:	240031f0 	.word	0x240031f0
 800b378:	080122e0 	.word	0x080122e0
 800b37c:	08012658 	.word	0x08012658
 800b380:	0801232c 	.word	0x0801232c
 800b384:	08012668 	.word	0x08012668
 800b388:	08012678 	.word	0x08012678
        off -= p->len;
 800b38c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b38e:	895b      	ldrh	r3, [r3, #10]
 800b390:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800b39a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b39c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800b39e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800b3a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800b3a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800b3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ae:	895b      	ldrh	r3, [r3, #10]
 800b3b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d8e9      	bhi.n	800b38c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800b3b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800b3c0:	f7fc fb7a 	bl	8007ab8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c8:	4a90      	ldr	r2, [pc, #576]	@ (800b60c <tcp_receive+0x884>)
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	4b90      	ldr	r3, [pc, #576]	@ (800b610 <tcp_receive+0x888>)
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	4a8e      	ldr	r2, [pc, #568]	@ (800b60c <tcp_receive+0x884>)
 800b3d2:	6812      	ldr	r2, [r2, #0]
 800b3d4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b3d6:	e00d      	b.n	800b3f4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b3d8:	4b8c      	ldr	r3, [pc, #560]	@ (800b60c <tcp_receive+0x884>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	da06      	bge.n	800b3f4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8b5b      	ldrh	r3, [r3, #26]
 800b3ea:	f043 0302 	orr.w	r3, r3, #2
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b3f4:	4b85      	ldr	r3, [pc, #532]	@ (800b60c <tcp_receive+0x884>)
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f2c0 8427 	blt.w	800bc52 <tcp_receive+0xeca>
 800b404:	4b81      	ldr	r3, [pc, #516]	@ (800b60c <tcp_receive+0x884>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b40c:	6879      	ldr	r1, [r7, #4]
 800b40e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b410:	440b      	add	r3, r1
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	3301      	adds	r3, #1
 800b416:	2b00      	cmp	r3, #0
 800b418:	f300 841b 	bgt.w	800bc52 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b420:	4b7a      	ldr	r3, [pc, #488]	@ (800b60c <tcp_receive+0x884>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	429a      	cmp	r2, r3
 800b426:	f040 8298 	bne.w	800b95a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b42a:	4b79      	ldr	r3, [pc, #484]	@ (800b610 <tcp_receive+0x888>)
 800b42c:	891c      	ldrh	r4, [r3, #8]
 800b42e:	4b78      	ldr	r3, [pc, #480]	@ (800b610 <tcp_receive+0x888>)
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	899b      	ldrh	r3, [r3, #12]
 800b434:	b29b      	uxth	r3, r3
 800b436:	4618      	mov	r0, r3
 800b438:	f7fa ffae 	bl	8006398 <lwip_htons>
 800b43c:	4603      	mov	r3, r0
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	f003 0303 	and.w	r3, r3, #3
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <tcp_receive+0x6c4>
 800b448:	2301      	movs	r3, #1
 800b44a:	e000      	b.n	800b44e <tcp_receive+0x6c6>
 800b44c:	2300      	movs	r3, #0
 800b44e:	4423      	add	r3, r4
 800b450:	b29a      	uxth	r2, r3
 800b452:	4b70      	ldr	r3, [pc, #448]	@ (800b614 <tcp_receive+0x88c>)
 800b454:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b45a:	4b6e      	ldr	r3, [pc, #440]	@ (800b614 <tcp_receive+0x88c>)
 800b45c:	881b      	ldrh	r3, [r3, #0]
 800b45e:	429a      	cmp	r2, r3
 800b460:	d274      	bcs.n	800b54c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b462:	4b6b      	ldr	r3, [pc, #428]	@ (800b610 <tcp_receive+0x888>)
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	899b      	ldrh	r3, [r3, #12]
 800b468:	b29b      	uxth	r3, r3
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fa ff94 	bl	8006398 <lwip_htons>
 800b470:	4603      	mov	r3, r0
 800b472:	b2db      	uxtb	r3, r3
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01e      	beq.n	800b4ba <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b47c:	4b64      	ldr	r3, [pc, #400]	@ (800b610 <tcp_receive+0x888>)
 800b47e:	68db      	ldr	r3, [r3, #12]
 800b480:	899b      	ldrh	r3, [r3, #12]
 800b482:	b29b      	uxth	r3, r3
 800b484:	b21b      	sxth	r3, r3
 800b486:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b48a:	b21c      	sxth	r4, r3
 800b48c:	4b60      	ldr	r3, [pc, #384]	@ (800b610 <tcp_receive+0x888>)
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	899b      	ldrh	r3, [r3, #12]
 800b492:	b29b      	uxth	r3, r3
 800b494:	4618      	mov	r0, r3
 800b496:	f7fa ff7f 	bl	8006398 <lwip_htons>
 800b49a:	4603      	mov	r3, r0
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7fa ff77 	bl	8006398 <lwip_htons>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	b21b      	sxth	r3, r3
 800b4ae:	4323      	orrs	r3, r4
 800b4b0:	b21a      	sxth	r2, r3
 800b4b2:	4b57      	ldr	r3, [pc, #348]	@ (800b610 <tcp_receive+0x888>)
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	b292      	uxth	r2, r2
 800b4b8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b4be:	4b54      	ldr	r3, [pc, #336]	@ (800b610 <tcp_receive+0x888>)
 800b4c0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b4c2:	4b53      	ldr	r3, [pc, #332]	@ (800b610 <tcp_receive+0x888>)
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	899b      	ldrh	r3, [r3, #12]
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fa ff64 	bl	8006398 <lwip_htons>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d005      	beq.n	800b4e8 <tcp_receive+0x760>
            inseg.len -= 1;
 800b4dc:	4b4c      	ldr	r3, [pc, #304]	@ (800b610 <tcp_receive+0x888>)
 800b4de:	891b      	ldrh	r3, [r3, #8]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	4b4a      	ldr	r3, [pc, #296]	@ (800b610 <tcp_receive+0x888>)
 800b4e6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b4e8:	4b49      	ldr	r3, [pc, #292]	@ (800b610 <tcp_receive+0x888>)
 800b4ea:	685b      	ldr	r3, [r3, #4]
 800b4ec:	4a48      	ldr	r2, [pc, #288]	@ (800b610 <tcp_receive+0x888>)
 800b4ee:	8912      	ldrh	r2, [r2, #8]
 800b4f0:	4611      	mov	r1, r2
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7fc f9e0 	bl	80078b8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b4f8:	4b45      	ldr	r3, [pc, #276]	@ (800b610 <tcp_receive+0x888>)
 800b4fa:	891c      	ldrh	r4, [r3, #8]
 800b4fc:	4b44      	ldr	r3, [pc, #272]	@ (800b610 <tcp_receive+0x888>)
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	899b      	ldrh	r3, [r3, #12]
 800b502:	b29b      	uxth	r3, r3
 800b504:	4618      	mov	r0, r3
 800b506:	f7fa ff47 	bl	8006398 <lwip_htons>
 800b50a:	4603      	mov	r3, r0
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	f003 0303 	and.w	r3, r3, #3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <tcp_receive+0x792>
 800b516:	2301      	movs	r3, #1
 800b518:	e000      	b.n	800b51c <tcp_receive+0x794>
 800b51a:	2300      	movs	r3, #0
 800b51c:	4423      	add	r3, r4
 800b51e:	b29a      	uxth	r2, r3
 800b520:	4b3c      	ldr	r3, [pc, #240]	@ (800b614 <tcp_receive+0x88c>)
 800b522:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b524:	4b3b      	ldr	r3, [pc, #236]	@ (800b614 <tcp_receive+0x88c>)
 800b526:	881b      	ldrh	r3, [r3, #0]
 800b528:	461a      	mov	r2, r3
 800b52a:	4b38      	ldr	r3, [pc, #224]	@ (800b60c <tcp_receive+0x884>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	441a      	add	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b538:	440b      	add	r3, r1
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d006      	beq.n	800b54c <tcp_receive+0x7c4>
 800b53e:	4b36      	ldr	r3, [pc, #216]	@ (800b618 <tcp_receive+0x890>)
 800b540:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800b544:	4935      	ldr	r1, [pc, #212]	@ (800b61c <tcp_receive+0x894>)
 800b546:	4836      	ldr	r0, [pc, #216]	@ (800b620 <tcp_receive+0x898>)
 800b548:	f004 fe12 	bl	8010170 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b550:	2b00      	cmp	r3, #0
 800b552:	f000 80e6 	beq.w	800b722 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b556:	4b2e      	ldr	r3, [pc, #184]	@ (800b610 <tcp_receive+0x888>)
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	899b      	ldrh	r3, [r3, #12]
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fa ff1a 	bl	8006398 <lwip_htons>
 800b564:	4603      	mov	r3, r0
 800b566:	b2db      	uxtb	r3, r3
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d010      	beq.n	800b592 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800b570:	e00a      	b.n	800b588 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b576:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f7fd fd93 	bl	80090ae <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1f0      	bne.n	800b572 <tcp_receive+0x7ea>
 800b590:	e0c7      	b.n	800b722 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b596:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b598:	e051      	b.n	800b63e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	899b      	ldrh	r3, [r3, #12]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7fa fef8 	bl	8006398 <lwip_htons>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f003 0301 	and.w	r3, r3, #1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d03c      	beq.n	800b62e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b5b4:	4b16      	ldr	r3, [pc, #88]	@ (800b610 <tcp_receive+0x888>)
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	899b      	ldrh	r3, [r3, #12]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7fa feeb 	bl	8006398 <lwip_htons>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d12f      	bne.n	800b62e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b5ce:	4b10      	ldr	r3, [pc, #64]	@ (800b610 <tcp_receive+0x888>)
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	899b      	ldrh	r3, [r3, #12]
 800b5d4:	b29c      	uxth	r4, r3
 800b5d6:	2001      	movs	r0, #1
 800b5d8:	f7fa fede 	bl	8006398 <lwip_htons>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b610 <tcp_receive+0x888>)
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	4322      	orrs	r2, r4
 800b5e6:	b292      	uxth	r2, r2
 800b5e8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b5ea:	4b09      	ldr	r3, [pc, #36]	@ (800b610 <tcp_receive+0x888>)
 800b5ec:	891c      	ldrh	r4, [r3, #8]
 800b5ee:	4b08      	ldr	r3, [pc, #32]	@ (800b610 <tcp_receive+0x888>)
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	899b      	ldrh	r3, [r3, #12]
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f7fa fece 	bl	8006398 <lwip_htons>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 0303 	and.w	r3, r3, #3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00d      	beq.n	800b624 <tcp_receive+0x89c>
 800b608:	2301      	movs	r3, #1
 800b60a:	e00c      	b.n	800b626 <tcp_receive+0x89e>
 800b60c:	24003210 	.word	0x24003210
 800b610:	240031f0 	.word	0x240031f0
 800b614:	2400321a 	.word	0x2400321a
 800b618:	080122e0 	.word	0x080122e0
 800b61c:	08012688 	.word	0x08012688
 800b620:	0801232c 	.word	0x0801232c
 800b624:	2300      	movs	r3, #0
 800b626:	4423      	add	r3, r4
 800b628:	b29a      	uxth	r2, r3
 800b62a:	4b98      	ldr	r3, [pc, #608]	@ (800b88c <tcp_receive+0xb04>)
 800b62c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800b62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b630:	613b      	str	r3, [r7, #16]
              next = next->next;
 800b632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800b638:	6938      	ldr	r0, [r7, #16]
 800b63a:	f7fd fd38 	bl	80090ae <tcp_seg_free>
            while (next &&
 800b63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00e      	beq.n	800b662 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b644:	4b91      	ldr	r3, [pc, #580]	@ (800b88c <tcp_receive+0xb04>)
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	4b91      	ldr	r3, [pc, #580]	@ (800b890 <tcp_receive+0xb08>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	441a      	add	r2, r3
 800b650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b658:	8909      	ldrh	r1, [r1, #8]
 800b65a:	440b      	add	r3, r1
 800b65c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800b65e:	2b00      	cmp	r3, #0
 800b660:	da9b      	bge.n	800b59a <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800b662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d059      	beq.n	800b71c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800b668:	4b88      	ldr	r3, [pc, #544]	@ (800b88c <tcp_receive+0xb04>)
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	461a      	mov	r2, r3
 800b66e:	4b88      	ldr	r3, [pc, #544]	@ (800b890 <tcp_receive+0xb08>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	441a      	add	r2, r3
 800b674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dd4d      	ble.n	800b71c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	b29a      	uxth	r2, r3
 800b688:	4b81      	ldr	r3, [pc, #516]	@ (800b890 <tcp_receive+0xb08>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	1ad3      	subs	r3, r2, r3
 800b690:	b29a      	uxth	r2, r3
 800b692:	4b80      	ldr	r3, [pc, #512]	@ (800b894 <tcp_receive+0xb0c>)
 800b694:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b696:	4b7f      	ldr	r3, [pc, #508]	@ (800b894 <tcp_receive+0xb0c>)
 800b698:	68db      	ldr	r3, [r3, #12]
 800b69a:	899b      	ldrh	r3, [r3, #12]
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fa fe7a 	bl	8006398 <lwip_htons>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	f003 0302 	and.w	r3, r3, #2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d005      	beq.n	800b6bc <tcp_receive+0x934>
                inseg.len -= 1;
 800b6b0:	4b78      	ldr	r3, [pc, #480]	@ (800b894 <tcp_receive+0xb0c>)
 800b6b2:	891b      	ldrh	r3, [r3, #8]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	b29a      	uxth	r2, r3
 800b6b8:	4b76      	ldr	r3, [pc, #472]	@ (800b894 <tcp_receive+0xb0c>)
 800b6ba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b6bc:	4b75      	ldr	r3, [pc, #468]	@ (800b894 <tcp_receive+0xb0c>)
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	4a74      	ldr	r2, [pc, #464]	@ (800b894 <tcp_receive+0xb0c>)
 800b6c2:	8912      	ldrh	r2, [r2, #8]
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fc f8f6 	bl	80078b8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b6cc:	4b71      	ldr	r3, [pc, #452]	@ (800b894 <tcp_receive+0xb0c>)
 800b6ce:	891c      	ldrh	r4, [r3, #8]
 800b6d0:	4b70      	ldr	r3, [pc, #448]	@ (800b894 <tcp_receive+0xb0c>)
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	899b      	ldrh	r3, [r3, #12]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fa fe5d 	bl	8006398 <lwip_htons>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	f003 0303 	and.w	r3, r3, #3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <tcp_receive+0x966>
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e000      	b.n	800b6f0 <tcp_receive+0x968>
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	4423      	add	r3, r4
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	4b65      	ldr	r3, [pc, #404]	@ (800b88c <tcp_receive+0xb04>)
 800b6f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b6f8:	4b64      	ldr	r3, [pc, #400]	@ (800b88c <tcp_receive+0xb04>)
 800b6fa:	881b      	ldrh	r3, [r3, #0]
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	4b64      	ldr	r3, [pc, #400]	@ (800b890 <tcp_receive+0xb08>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	441a      	add	r2, r3
 800b704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d006      	beq.n	800b71c <tcp_receive+0x994>
 800b70e:	4b62      	ldr	r3, [pc, #392]	@ (800b898 <tcp_receive+0xb10>)
 800b710:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800b714:	4961      	ldr	r1, [pc, #388]	@ (800b89c <tcp_receive+0xb14>)
 800b716:	4862      	ldr	r0, [pc, #392]	@ (800b8a0 <tcp_receive+0xb18>)
 800b718:	f004 fd2a 	bl	8010170 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b720:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b722:	4b5a      	ldr	r3, [pc, #360]	@ (800b88c <tcp_receive+0xb04>)
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	4b59      	ldr	r3, [pc, #356]	@ (800b890 <tcp_receive+0xb08>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	441a      	add	r2, r3
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b736:	4b55      	ldr	r3, [pc, #340]	@ (800b88c <tcp_receive+0xb04>)
 800b738:	881b      	ldrh	r3, [r3, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d206      	bcs.n	800b74c <tcp_receive+0x9c4>
 800b73e:	4b56      	ldr	r3, [pc, #344]	@ (800b898 <tcp_receive+0xb10>)
 800b740:	f240 6207 	movw	r2, #1543	@ 0x607
 800b744:	4957      	ldr	r1, [pc, #348]	@ (800b8a4 <tcp_receive+0xb1c>)
 800b746:	4856      	ldr	r0, [pc, #344]	@ (800b8a0 <tcp_receive+0xb18>)
 800b748:	f004 fd12 	bl	8010170 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b750:	4b4e      	ldr	r3, [pc, #312]	@ (800b88c <tcp_receive+0xb04>)
 800b752:	881b      	ldrh	r3, [r3, #0]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	b29a      	uxth	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7fc ffc5 	bl	80086ec <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b762:	4b4c      	ldr	r3, [pc, #304]	@ (800b894 <tcp_receive+0xb0c>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	891b      	ldrh	r3, [r3, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d006      	beq.n	800b77a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800b76c:	4b49      	ldr	r3, [pc, #292]	@ (800b894 <tcp_receive+0xb0c>)
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	4a4d      	ldr	r2, [pc, #308]	@ (800b8a8 <tcp_receive+0xb20>)
 800b772:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b774:	4b47      	ldr	r3, [pc, #284]	@ (800b894 <tcp_receive+0xb0c>)
 800b776:	2200      	movs	r2, #0
 800b778:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b77a:	4b46      	ldr	r3, [pc, #280]	@ (800b894 <tcp_receive+0xb0c>)
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	899b      	ldrh	r3, [r3, #12]
 800b780:	b29b      	uxth	r3, r3
 800b782:	4618      	mov	r0, r3
 800b784:	f7fa fe08 	bl	8006398 <lwip_htons>
 800b788:	4603      	mov	r3, r0
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 80b8 	beq.w	800b906 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b796:	4b45      	ldr	r3, [pc, #276]	@ (800b8ac <tcp_receive+0xb24>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	f043 0320 	orr.w	r3, r3, #32
 800b79e:	b2da      	uxtb	r2, r3
 800b7a0:	4b42      	ldr	r3, [pc, #264]	@ (800b8ac <tcp_receive+0xb24>)
 800b7a2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800b7a4:	e0af      	b.n	800b906 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7aa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b0:	68db      	ldr	r3, [r3, #12]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	4a36      	ldr	r2, [pc, #216]	@ (800b890 <tcp_receive+0xb08>)
 800b7b6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	891b      	ldrh	r3, [r3, #8]
 800b7bc:	461c      	mov	r4, r3
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	899b      	ldrh	r3, [r3, #12]
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fa fde6 	bl	8006398 <lwip_htons>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0303 	and.w	r3, r3, #3
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d001      	beq.n	800b7dc <tcp_receive+0xa54>
 800b7d8:	2301      	movs	r3, #1
 800b7da:	e000      	b.n	800b7de <tcp_receive+0xa56>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	191a      	adds	r2, r3, r4
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7e4:	441a      	add	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b7ee:	461c      	mov	r4, r3
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	891b      	ldrh	r3, [r3, #8]
 800b7f4:	461d      	mov	r5, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	899b      	ldrh	r3, [r3, #12]
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7fa fdca 	bl	8006398 <lwip_htons>
 800b804:	4603      	mov	r3, r0
 800b806:	b2db      	uxtb	r3, r3
 800b808:	f003 0303 	and.w	r3, r3, #3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d001      	beq.n	800b814 <tcp_receive+0xa8c>
 800b810:	2301      	movs	r3, #1
 800b812:	e000      	b.n	800b816 <tcp_receive+0xa8e>
 800b814:	2300      	movs	r3, #0
 800b816:	442b      	add	r3, r5
 800b818:	429c      	cmp	r4, r3
 800b81a:	d206      	bcs.n	800b82a <tcp_receive+0xaa2>
 800b81c:	4b1e      	ldr	r3, [pc, #120]	@ (800b898 <tcp_receive+0xb10>)
 800b81e:	f240 622b 	movw	r2, #1579	@ 0x62b
 800b822:	4923      	ldr	r1, [pc, #140]	@ (800b8b0 <tcp_receive+0xb28>)
 800b824:	481e      	ldr	r0, [pc, #120]	@ (800b8a0 <tcp_receive+0xb18>)
 800b826:	f004 fca3 	bl	8010170 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	891b      	ldrh	r3, [r3, #8]
 800b82e:	461c      	mov	r4, r3
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	899b      	ldrh	r3, [r3, #12]
 800b836:	b29b      	uxth	r3, r3
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fa fdad 	bl	8006398 <lwip_htons>
 800b83e:	4603      	mov	r3, r0
 800b840:	b2db      	uxtb	r3, r3
 800b842:	f003 0303 	and.w	r3, r3, #3
 800b846:	2b00      	cmp	r3, #0
 800b848:	d001      	beq.n	800b84e <tcp_receive+0xac6>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e000      	b.n	800b850 <tcp_receive+0xac8>
 800b84e:	2300      	movs	r3, #0
 800b850:	1919      	adds	r1, r3, r4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800b856:	b28b      	uxth	r3, r1
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	b29a      	uxth	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f7fc ff43 	bl	80086ec <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	891b      	ldrh	r3, [r3, #8]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d028      	beq.n	800b8c2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b870:	4b0d      	ldr	r3, [pc, #52]	@ (800b8a8 <tcp_receive+0xb20>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d01d      	beq.n	800b8b4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800b878:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a8 <tcp_receive+0xb20>)
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	4619      	mov	r1, r3
 800b882:	4610      	mov	r0, r2
 800b884:	f7fc fa60 	bl	8007d48 <pbuf_cat>
 800b888:	e018      	b.n	800b8bc <tcp_receive+0xb34>
 800b88a:	bf00      	nop
 800b88c:	2400321a 	.word	0x2400321a
 800b890:	24003210 	.word	0x24003210
 800b894:	240031f0 	.word	0x240031f0
 800b898:	080122e0 	.word	0x080122e0
 800b89c:	080126c0 	.word	0x080126c0
 800b8a0:	0801232c 	.word	0x0801232c
 800b8a4:	080126fc 	.word	0x080126fc
 800b8a8:	24003220 	.word	0x24003220
 800b8ac:	2400321d 	.word	0x2400321d
 800b8b0:	0801271c 	.word	0x0801271c
            } else {
              recv_data = cseg->p;
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	4a70      	ldr	r2, [pc, #448]	@ (800ba7c <tcp_receive+0xcf4>)
 800b8ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	68db      	ldr	r3, [r3, #12]
 800b8c6:	899b      	ldrh	r3, [r3, #12]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fa fd64 	bl	8006398 <lwip_htons>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	b2db      	uxtb	r3, r3
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00d      	beq.n	800b8f8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b8dc:	4b68      	ldr	r3, [pc, #416]	@ (800ba80 <tcp_receive+0xcf8>)
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	f043 0320 	orr.w	r3, r3, #32
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	4b66      	ldr	r3, [pc, #408]	@ (800ba80 <tcp_receive+0xcf8>)
 800b8e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	7d1b      	ldrb	r3, [r3, #20]
 800b8ee:	2b04      	cmp	r3, #4
 800b8f0:	d102      	bne.n	800b8f8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2207      	movs	r2, #7
 800b8f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800b900:	68b8      	ldr	r0, [r7, #8]
 800b902:	f7fd fbd4 	bl	80090ae <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d008      	beq.n	800b920 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	685a      	ldr	r2, [r3, #4]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800b91a:	429a      	cmp	r2, r3
 800b91c:	f43f af43 	beq.w	800b7a6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8b5b      	ldrh	r3, [r3, #26]
 800b924:	f003 0301 	and.w	r3, r3, #1
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d00e      	beq.n	800b94a <tcp_receive+0xbc2>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8b5b      	ldrh	r3, [r3, #26]
 800b930:	f023 0301 	bic.w	r3, r3, #1
 800b934:	b29a      	uxth	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	835a      	strh	r2, [r3, #26]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	8b5b      	ldrh	r3, [r3, #26]
 800b93e:	f043 0302 	orr.w	r3, r3, #2
 800b942:	b29a      	uxth	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b948:	e187      	b.n	800bc5a <tcp_receive+0xed2>
        tcp_ack(pcb);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	8b5b      	ldrh	r3, [r3, #26]
 800b94e:	f043 0301 	orr.w	r3, r3, #1
 800b952:	b29a      	uxth	r2, r3
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800b958:	e17f      	b.n	800bc5a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b962:	4848      	ldr	r0, [pc, #288]	@ (800ba84 <tcp_receive+0xcfc>)
 800b964:	f7fd fbbc 	bl	80090e0 <tcp_seg_copy>
 800b968:	4602      	mov	r2, r0
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	675a      	str	r2, [r3, #116]	@ 0x74
 800b96e:	e16c      	b.n	800bc4a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800b970:	2300      	movs	r3, #0
 800b972:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b97a:	e156      	b.n	800bc2a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800b97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	4b41      	ldr	r3, [pc, #260]	@ (800ba88 <tcp_receive+0xd00>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d11d      	bne.n	800b9c6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800b98a:	4b3e      	ldr	r3, [pc, #248]	@ (800ba84 <tcp_receive+0xcfc>)
 800b98c:	891a      	ldrh	r2, [r3, #8]
 800b98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b990:	891b      	ldrh	r3, [r3, #8]
 800b992:	429a      	cmp	r2, r3
 800b994:	f240 814e 	bls.w	800bc34 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b998:	483a      	ldr	r0, [pc, #232]	@ (800ba84 <tcp_receive+0xcfc>)
 800b99a:	f7fd fba1 	bl	80090e0 <tcp_seg_copy>
 800b99e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	f000 8148 	beq.w	800bc38 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800b9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d003      	beq.n	800b9b6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800b9ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9b0:	697a      	ldr	r2, [r7, #20]
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	e002      	b.n	800b9bc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800b9bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b9be:	6978      	ldr	r0, [r7, #20]
 800b9c0:	f7ff f8de 	bl	800ab80 <tcp_oos_insert_segment>
                }
                break;
 800b9c4:	e138      	b.n	800bc38 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800b9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d117      	bne.n	800b9fc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b9cc:	4b2e      	ldr	r3, [pc, #184]	@ (800ba88 <tcp_receive+0xd00>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	da57      	bge.n	800ba8c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800b9dc:	4829      	ldr	r0, [pc, #164]	@ (800ba84 <tcp_receive+0xcfc>)
 800b9de:	f7fd fb7f 	bl	80090e0 <tcp_seg_copy>
 800b9e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 8128 	beq.w	800bc3c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	69ba      	ldr	r2, [r7, #24]
 800b9f0:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800b9f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b9f4:	69b8      	ldr	r0, [r7, #24]
 800b9f6:	f7ff f8c3 	bl	800ab80 <tcp_oos_insert_segment>
                  }
                  break;
 800b9fa:	e11f      	b.n	800bc3c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800b9fc:	4b22      	ldr	r3, [pc, #136]	@ (800ba88 <tcp_receive+0xd00>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	db3e      	blt.n	800ba8c <tcp_receive+0xd04>
 800ba0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ba88 <tcp_receive+0xd00>)
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	dc35      	bgt.n	800ba8c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ba20:	4818      	ldr	r0, [pc, #96]	@ (800ba84 <tcp_receive+0xcfc>)
 800ba22:	f7fd fb5d 	bl	80090e0 <tcp_seg_copy>
 800ba26:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f000 8108 	beq.w	800bc40 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ba30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba38:	8912      	ldrh	r2, [r2, #8]
 800ba3a:	441a      	add	r2, r3
 800ba3c:	4b12      	ldr	r3, [pc, #72]	@ (800ba88 <tcp_receive+0xd00>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	dd12      	ble.n	800ba6c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ba46:	4b10      	ldr	r3, [pc, #64]	@ (800ba88 <tcp_receive+0xd00>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	b29a      	uxth	r2, r3
 800ba4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ba5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba5e:	685a      	ldr	r2, [r3, #4]
 800ba60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba62:	891b      	ldrh	r3, [r3, #8]
 800ba64:	4619      	mov	r1, r3
 800ba66:	4610      	mov	r0, r2
 800ba68:	f7fb ff26 	bl	80078b8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6e:	69fa      	ldr	r2, [r7, #28]
 800ba70:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ba72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ba74:	69f8      	ldr	r0, [r7, #28]
 800ba76:	f7ff f883 	bl	800ab80 <tcp_oos_insert_segment>
                  }
                  break;
 800ba7a:	e0e1      	b.n	800bc40 <tcp_receive+0xeb8>
 800ba7c:	24003220 	.word	0x24003220
 800ba80:	2400321d 	.word	0x2400321d
 800ba84:	240031f0 	.word	0x240031f0
 800ba88:	24003210 	.word	0x24003210
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ba8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba8e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ba90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f040 80c5 	bne.w	800bc24 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ba9a:	4b7f      	ldr	r3, [pc, #508]	@ (800bc98 <tcp_receive+0xf10>)
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f340 80bc 	ble.w	800bc24 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800baac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	899b      	ldrh	r3, [r3, #12]
 800bab2:	b29b      	uxth	r3, r3
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7fa fc6f 	bl	8006398 <lwip_htons>
 800baba:	4603      	mov	r3, r0
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 0301 	and.w	r3, r3, #1
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f040 80be 	bne.w	800bc44 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800bac8:	4874      	ldr	r0, [pc, #464]	@ (800bc9c <tcp_receive+0xf14>)
 800baca:	f7fd fb09 	bl	80090e0 <tcp_seg_copy>
 800bace:	4602      	mov	r2, r0
 800bad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800bad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	f000 80b5 	beq.w	800bc48 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800bade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	685b      	ldr	r3, [r3, #4]
 800bae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bae6:	8912      	ldrh	r2, [r2, #8]
 800bae8:	441a      	add	r2, r3
 800baea:	4b6b      	ldr	r3, [pc, #428]	@ (800bc98 <tcp_receive+0xf10>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	1ad3      	subs	r3, r2, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	dd12      	ble.n	800bb1a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800baf4:	4b68      	ldr	r3, [pc, #416]	@ (800bc98 <tcp_receive+0xf10>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafc:	68db      	ldr	r3, [r3, #12]
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	1ad3      	subs	r3, r2, r3
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	685a      	ldr	r2, [r3, #4]
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb10:	891b      	ldrh	r3, [r3, #8]
 800bb12:	4619      	mov	r1, r3
 800bb14:	4610      	mov	r0, r2
 800bb16:	f7fb fecf 	bl	80078b8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800bb1a:	4b61      	ldr	r3, [pc, #388]	@ (800bca0 <tcp_receive+0xf18>)
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4b5d      	ldr	r3, [pc, #372]	@ (800bc98 <tcp_receive+0xf10>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	441a      	add	r2, r3
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2a:	6879      	ldr	r1, [r7, #4]
 800bb2c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bb2e:	440b      	add	r3, r1
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f340 8088 	ble.w	800bc48 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800bb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	899b      	ldrh	r3, [r3, #12]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7fa fc28 	bl	8006398 <lwip_htons>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	f003 0301 	and.w	r3, r3, #1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d021      	beq.n	800bb98 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800bb54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	899b      	ldrh	r3, [r3, #12]
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	b21b      	sxth	r3, r3
 800bb60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bb64:	b21c      	sxth	r4, r3
 800bb66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	899b      	ldrh	r3, [r3, #12]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fa fc11 	bl	8006398 <lwip_htons>
 800bb76:	4603      	mov	r3, r0
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7fa fc09 	bl	8006398 <lwip_htons>
 800bb86:	4603      	mov	r3, r0
 800bb88:	b21b      	sxth	r3, r3
 800bb8a:	4323      	orrs	r3, r4
 800bb8c:	b21a      	sxth	r2, r3
 800bb8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	b292      	uxth	r2, r2
 800bb96:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bba2:	4413      	add	r3, r2
 800bba4:	b299      	uxth	r1, r3
 800bba6:	4b3c      	ldr	r3, [pc, #240]	@ (800bc98 <tcp_receive+0xf10>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	1a8a      	subs	r2, r1, r2
 800bbb2:	b292      	uxth	r2, r2
 800bbb4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800bbb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	891b      	ldrh	r3, [r3, #8]
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4610      	mov	r0, r2
 800bbc6:	f7fb fe77 	bl	80078b8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800bbca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	891c      	ldrh	r4, [r3, #8]
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	899b      	ldrh	r3, [r3, #12]
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fa fbdc 	bl	8006398 <lwip_htons>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	f003 0303 	and.w	r3, r3, #3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <tcp_receive+0xe68>
 800bbec:	2301      	movs	r3, #1
 800bbee:	e000      	b.n	800bbf2 <tcp_receive+0xe6a>
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	4423      	add	r3, r4
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	4b2a      	ldr	r3, [pc, #168]	@ (800bca0 <tcp_receive+0xf18>)
 800bbf8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800bbfa:	4b29      	ldr	r3, [pc, #164]	@ (800bca0 <tcp_receive+0xf18>)
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	461a      	mov	r2, r3
 800bc00:	4b25      	ldr	r3, [pc, #148]	@ (800bc98 <tcp_receive+0xf10>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	441a      	add	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc0e:	440b      	add	r3, r1
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d019      	beq.n	800bc48 <tcp_receive+0xec0>
 800bc14:	4b23      	ldr	r3, [pc, #140]	@ (800bca4 <tcp_receive+0xf1c>)
 800bc16:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800bc1a:	4923      	ldr	r1, [pc, #140]	@ (800bca8 <tcp_receive+0xf20>)
 800bc1c:	4823      	ldr	r0, [pc, #140]	@ (800bcac <tcp_receive+0xf24>)
 800bc1e:	f004 faa7 	bl	8010170 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800bc22:	e011      	b.n	800bc48 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800bc24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	f47f aea5 	bne.w	800b97c <tcp_receive+0xbf4>
 800bc32:	e00a      	b.n	800bc4a <tcp_receive+0xec2>
                break;
 800bc34:	bf00      	nop
 800bc36:	e008      	b.n	800bc4a <tcp_receive+0xec2>
                break;
 800bc38:	bf00      	nop
 800bc3a:	e006      	b.n	800bc4a <tcp_receive+0xec2>
                  break;
 800bc3c:	bf00      	nop
 800bc3e:	e004      	b.n	800bc4a <tcp_receive+0xec2>
                  break;
 800bc40:	bf00      	nop
 800bc42:	e002      	b.n	800bc4a <tcp_receive+0xec2>
                  break;
 800bc44:	bf00      	nop
 800bc46:	e000      	b.n	800bc4a <tcp_receive+0xec2>
                break;
 800bc48:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f001 fa30 	bl	800d0b0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800bc50:	e003      	b.n	800bc5a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f001 fa2c 	bl	800d0b0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc58:	e01a      	b.n	800bc90 <tcp_receive+0xf08>
 800bc5a:	e019      	b.n	800bc90 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800bc5c:	4b0e      	ldr	r3, [pc, #56]	@ (800bc98 <tcp_receive+0xf10>)
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc64:	1ad3      	subs	r3, r2, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	db0a      	blt.n	800bc80 <tcp_receive+0xef8>
 800bc6a:	4b0b      	ldr	r3, [pc, #44]	@ (800bc98 <tcp_receive+0xf10>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc76:	440b      	add	r3, r1
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd07      	ble.n	800bc90 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	8b5b      	ldrh	r3, [r3, #26]
 800bc84:	f043 0302 	orr.w	r3, r3, #2
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800bc8e:	e7ff      	b.n	800bc90 <tcp_receive+0xf08>
 800bc90:	bf00      	nop
 800bc92:	3750      	adds	r7, #80	@ 0x50
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bdb0      	pop	{r4, r5, r7, pc}
 800bc98:	24003210 	.word	0x24003210
 800bc9c:	240031f0 	.word	0x240031f0
 800bca0:	2400321a 	.word	0x2400321a
 800bca4:	080122e0 	.word	0x080122e0
 800bca8:	08012688 	.word	0x08012688
 800bcac:	0801232c 	.word	0x0801232c

0800bcb0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800bcb6:	4b15      	ldr	r3, [pc, #84]	@ (800bd0c <tcp_get_next_optbyte+0x5c>)
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	1c5a      	adds	r2, r3, #1
 800bcbc:	b291      	uxth	r1, r2
 800bcbe:	4a13      	ldr	r2, [pc, #76]	@ (800bd0c <tcp_get_next_optbyte+0x5c>)
 800bcc0:	8011      	strh	r1, [r2, #0]
 800bcc2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800bcc4:	4b12      	ldr	r3, [pc, #72]	@ (800bd10 <tcp_get_next_optbyte+0x60>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d004      	beq.n	800bcd6 <tcp_get_next_optbyte+0x26>
 800bccc:	4b11      	ldr	r3, [pc, #68]	@ (800bd14 <tcp_get_next_optbyte+0x64>)
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	88fa      	ldrh	r2, [r7, #6]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d208      	bcs.n	800bce8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800bcd6:	4b10      	ldr	r3, [pc, #64]	@ (800bd18 <tcp_get_next_optbyte+0x68>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	3314      	adds	r3, #20
 800bcdc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	4413      	add	r3, r2
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	e00b      	b.n	800bd00 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800bce8:	88fb      	ldrh	r3, [r7, #6]
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	4b09      	ldr	r3, [pc, #36]	@ (800bd14 <tcp_get_next_optbyte+0x64>)
 800bcee:	881b      	ldrh	r3, [r3, #0]
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	1ad3      	subs	r3, r2, r3
 800bcf4:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800bcf6:	4b06      	ldr	r3, [pc, #24]	@ (800bd10 <tcp_get_next_optbyte+0x60>)
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	797b      	ldrb	r3, [r7, #5]
 800bcfc:	4413      	add	r3, r2
 800bcfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr
 800bd0c:	2400320c 	.word	0x2400320c
 800bd10:	24003208 	.word	0x24003208
 800bd14:	24003206 	.word	0x24003206
 800bd18:	24003200 	.word	0x24003200

0800bd1c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b084      	sub	sp, #16
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d106      	bne.n	800bd38 <tcp_parseopt+0x1c>
 800bd2a:	4b32      	ldr	r3, [pc, #200]	@ (800bdf4 <tcp_parseopt+0xd8>)
 800bd2c:	f240 727d 	movw	r2, #1917	@ 0x77d
 800bd30:	4931      	ldr	r1, [pc, #196]	@ (800bdf8 <tcp_parseopt+0xdc>)
 800bd32:	4832      	ldr	r0, [pc, #200]	@ (800bdfc <tcp_parseopt+0xe0>)
 800bd34:	f004 fa1c 	bl	8010170 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800bd38:	4b31      	ldr	r3, [pc, #196]	@ (800be00 <tcp_parseopt+0xe4>)
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d056      	beq.n	800bdee <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bd40:	4b30      	ldr	r3, [pc, #192]	@ (800be04 <tcp_parseopt+0xe8>)
 800bd42:	2200      	movs	r2, #0
 800bd44:	801a      	strh	r2, [r3, #0]
 800bd46:	e046      	b.n	800bdd6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800bd48:	f7ff ffb2 	bl	800bcb0 <tcp_get_next_optbyte>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800bd50:	7bfb      	ldrb	r3, [r7, #15]
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	d006      	beq.n	800bd64 <tcp_parseopt+0x48>
 800bd56:	2b02      	cmp	r3, #2
 800bd58:	dc2a      	bgt.n	800bdb0 <tcp_parseopt+0x94>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d042      	beq.n	800bde4 <tcp_parseopt+0xc8>
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d038      	beq.n	800bdd4 <tcp_parseopt+0xb8>
 800bd62:	e025      	b.n	800bdb0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800bd64:	f7ff ffa4 	bl	800bcb0 <tcp_get_next_optbyte>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b04      	cmp	r3, #4
 800bd6c:	d13c      	bne.n	800bde8 <tcp_parseopt+0xcc>
 800bd6e:	4b25      	ldr	r3, [pc, #148]	@ (800be04 <tcp_parseopt+0xe8>)
 800bd70:	881b      	ldrh	r3, [r3, #0]
 800bd72:	3301      	adds	r3, #1
 800bd74:	4a22      	ldr	r2, [pc, #136]	@ (800be00 <tcp_parseopt+0xe4>)
 800bd76:	8812      	ldrh	r2, [r2, #0]
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	da35      	bge.n	800bde8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800bd7c:	f7ff ff98 	bl	800bcb0 <tcp_get_next_optbyte>
 800bd80:	4603      	mov	r3, r0
 800bd82:	021b      	lsls	r3, r3, #8
 800bd84:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800bd86:	f7ff ff93 	bl	800bcb0 <tcp_get_next_optbyte>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	89bb      	ldrh	r3, [r7, #12]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800bd94:	89bb      	ldrh	r3, [r7, #12]
 800bd96:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800bd9a:	d804      	bhi.n	800bda6 <tcp_parseopt+0x8a>
 800bd9c:	89bb      	ldrh	r3, [r7, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <tcp_parseopt+0x8a>
 800bda2:	89ba      	ldrh	r2, [r7, #12]
 800bda4:	e001      	b.n	800bdaa <tcp_parseopt+0x8e>
 800bda6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800bdae:	e012      	b.n	800bdd6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800bdb0:	f7ff ff7e 	bl	800bcb0 <tcp_get_next_optbyte>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800bdb8:	7afb      	ldrb	r3, [r7, #11]
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d916      	bls.n	800bdec <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800bdbe:	7afb      	ldrb	r3, [r7, #11]
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	4b10      	ldr	r3, [pc, #64]	@ (800be04 <tcp_parseopt+0xe8>)
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	3b02      	subs	r3, #2
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	4b0d      	ldr	r3, [pc, #52]	@ (800be04 <tcp_parseopt+0xe8>)
 800bdd0:	801a      	strh	r2, [r3, #0]
 800bdd2:	e000      	b.n	800bdd6 <tcp_parseopt+0xba>
          break;
 800bdd4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800bdd6:	4b0b      	ldr	r3, [pc, #44]	@ (800be04 <tcp_parseopt+0xe8>)
 800bdd8:	881a      	ldrh	r2, [r3, #0]
 800bdda:	4b09      	ldr	r3, [pc, #36]	@ (800be00 <tcp_parseopt+0xe4>)
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d3b2      	bcc.n	800bd48 <tcp_parseopt+0x2c>
 800bde2:	e004      	b.n	800bdee <tcp_parseopt+0xd2>
          return;
 800bde4:	bf00      	nop
 800bde6:	e002      	b.n	800bdee <tcp_parseopt+0xd2>
            return;
 800bde8:	bf00      	nop
 800bdea:	e000      	b.n	800bdee <tcp_parseopt+0xd2>
            return;
 800bdec:	bf00      	nop
      }
    }
  }
}
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	080122e0 	.word	0x080122e0
 800bdf8:	08012744 	.word	0x08012744
 800bdfc:	0801232c 	.word	0x0801232c
 800be00:	24003204 	.word	0x24003204
 800be04:	2400320c 	.word	0x2400320c

0800be08 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800be08:	b480      	push	{r7}
 800be0a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800be0c:	4b05      	ldr	r3, [pc, #20]	@ (800be24 <tcp_trigger_input_pcb_close+0x1c>)
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	f043 0310 	orr.w	r3, r3, #16
 800be14:	b2da      	uxtb	r2, r3
 800be16:	4b03      	ldr	r3, [pc, #12]	@ (800be24 <tcp_trigger_input_pcb_close+0x1c>)
 800be18:	701a      	strb	r2, [r3, #0]
}
 800be1a:	bf00      	nop
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	2400321d 	.word	0x2400321d

0800be28 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	60f8      	str	r0, [r7, #12]
 800be30:	60b9      	str	r1, [r7, #8]
 800be32:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00a      	beq.n	800be50 <tcp_route+0x28>
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	7a1b      	ldrb	r3, [r3, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d006      	beq.n	800be50 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	7a1b      	ldrb	r3, [r3, #8]
 800be46:	4618      	mov	r0, r3
 800be48:	f7fb fb5c 	bl	8007504 <netif_get_by_index>
 800be4c:	4603      	mov	r3, r0
 800be4e:	e003      	b.n	800be58 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f002 fea1 	bl	800eb98 <ip4_route>
 800be56:	4603      	mov	r3, r0
  }
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3710      	adds	r7, #16
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800be60:	b590      	push	{r4, r7, lr}
 800be62:	b087      	sub	sp, #28
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	603b      	str	r3, [r7, #0]
 800be6c:	4613      	mov	r3, r2
 800be6e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d105      	bne.n	800be82 <tcp_create_segment+0x22>
 800be76:	4b43      	ldr	r3, [pc, #268]	@ (800bf84 <tcp_create_segment+0x124>)
 800be78:	22a3      	movs	r2, #163	@ 0xa3
 800be7a:	4943      	ldr	r1, [pc, #268]	@ (800bf88 <tcp_create_segment+0x128>)
 800be7c:	4843      	ldr	r0, [pc, #268]	@ (800bf8c <tcp_create_segment+0x12c>)
 800be7e:	f004 f977 	bl	8010170 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d105      	bne.n	800be94 <tcp_create_segment+0x34>
 800be88:	4b3e      	ldr	r3, [pc, #248]	@ (800bf84 <tcp_create_segment+0x124>)
 800be8a:	22a4      	movs	r2, #164	@ 0xa4
 800be8c:	4940      	ldr	r1, [pc, #256]	@ (800bf90 <tcp_create_segment+0x130>)
 800be8e:	483f      	ldr	r0, [pc, #252]	@ (800bf8c <tcp_create_segment+0x12c>)
 800be90:	f004 f96e 	bl	8010170 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800be94:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800bea2:	2003      	movs	r0, #3
 800bea4:	f7fa ffa8 	bl	8006df8 <memp_malloc>
 800bea8:	6138      	str	r0, [r7, #16]
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d104      	bne.n	800beba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800beb0:	68b8      	ldr	r0, [r7, #8]
 800beb2:	f7fb fe87 	bl	8007bc4 <pbuf_free>
    return NULL;
 800beb6:	2300      	movs	r3, #0
 800beb8:	e060      	b.n	800bf7c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800bec0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800bec2:	693b      	ldr	r3, [r7, #16]
 800bec4:	2200      	movs	r2, #0
 800bec6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	891a      	ldrh	r2, [r3, #8]
 800bed2:	7dfb      	ldrb	r3, [r7, #23]
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d205      	bcs.n	800bee6 <tcp_create_segment+0x86>
 800beda:	4b2a      	ldr	r3, [pc, #168]	@ (800bf84 <tcp_create_segment+0x124>)
 800bedc:	22b0      	movs	r2, #176	@ 0xb0
 800bede:	492d      	ldr	r1, [pc, #180]	@ (800bf94 <tcp_create_segment+0x134>)
 800bee0:	482a      	ldr	r0, [pc, #168]	@ (800bf8c <tcp_create_segment+0x12c>)
 800bee2:	f004 f945 	bl	8010170 <iprintf>
  seg->len = p->tot_len - optlen;
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	891a      	ldrh	r2, [r3, #8]
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	b29b      	uxth	r3, r3
 800beee:	1ad3      	subs	r3, r2, r3
 800bef0:	b29a      	uxth	r2, r3
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800bef6:	2114      	movs	r1, #20
 800bef8:	68b8      	ldr	r0, [r7, #8]
 800befa:	f7fb fdcd 	bl	8007a98 <pbuf_add_header>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d004      	beq.n	800bf0e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800bf04:	6938      	ldr	r0, [r7, #16]
 800bf06:	f7fd f8d2 	bl	80090ae <tcp_seg_free>
    return NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e036      	b.n	800bf7c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	685a      	ldr	r2, [r3, #4]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	8ada      	ldrh	r2, [r3, #22]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	68dc      	ldr	r4, [r3, #12]
 800bf20:	4610      	mov	r0, r2
 800bf22:	f7fa fa39 	bl	8006398 <lwip_htons>
 800bf26:	4603      	mov	r3, r0
 800bf28:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	8b1a      	ldrh	r2, [r3, #24]
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	68dc      	ldr	r4, [r3, #12]
 800bf32:	4610      	mov	r0, r2
 800bf34:	f7fa fa30 	bl	8006398 <lwip_htons>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	68dc      	ldr	r4, [r3, #12]
 800bf40:	6838      	ldr	r0, [r7, #0]
 800bf42:	f7fa fa3e 	bl	80063c2 <lwip_htonl>
 800bf46:	4603      	mov	r3, r0
 800bf48:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800bf4a:	7dfb      	ldrb	r3, [r7, #23]
 800bf4c:	089b      	lsrs	r3, r3, #2
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	3305      	adds	r3, #5
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	031b      	lsls	r3, r3, #12
 800bf56:	b29a      	uxth	r2, r3
 800bf58:	79fb      	ldrb	r3, [r7, #7]
 800bf5a:	b29b      	uxth	r3, r3
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	b29a      	uxth	r2, r3
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	68dc      	ldr	r4, [r3, #12]
 800bf64:	4610      	mov	r0, r2
 800bf66:	f7fa fa17 	bl	8006398 <lwip_htons>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	68db      	ldr	r3, [r3, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	749a      	strb	r2, [r3, #18]
 800bf76:	2200      	movs	r2, #0
 800bf78:	74da      	strb	r2, [r3, #19]
  return seg;
 800bf7a:	693b      	ldr	r3, [r7, #16]
}
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	371c      	adds	r7, #28
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd90      	pop	{r4, r7, pc}
 800bf84:	08012760 	.word	0x08012760
 800bf88:	08012794 	.word	0x08012794
 800bf8c:	080127b4 	.word	0x080127b4
 800bf90:	080127dc 	.word	0x080127dc
 800bf94:	08012800 	.word	0x08012800

0800bf98 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bf98:	b590      	push	{r4, r7, lr}
 800bf9a:	b08b      	sub	sp, #44	@ 0x2c
 800bf9c:	af02      	add	r7, sp, #8
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	61fb      	str	r3, [r7, #28]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bfac:	2300      	movs	r3, #0
 800bfae:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d106      	bne.n	800bfc4 <tcp_split_unsent_seg+0x2c>
 800bfb6:	4b95      	ldr	r3, [pc, #596]	@ (800c20c <tcp_split_unsent_seg+0x274>)
 800bfb8:	f240 324b 	movw	r2, #843	@ 0x34b
 800bfbc:	4994      	ldr	r1, [pc, #592]	@ (800c210 <tcp_split_unsent_seg+0x278>)
 800bfbe:	4895      	ldr	r0, [pc, #596]	@ (800c214 <tcp_split_unsent_seg+0x27c>)
 800bfc0:	f004 f8d6 	bl	8010170 <iprintf>

  useg = pcb->unsent;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfc8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd4:	e116      	b.n	800c204 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bfd6:	887b      	ldrh	r3, [r7, #2]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d109      	bne.n	800bff0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bfdc:	4b8b      	ldr	r3, [pc, #556]	@ (800c20c <tcp_split_unsent_seg+0x274>)
 800bfde:	f240 3253 	movw	r2, #851	@ 0x353
 800bfe2:	498d      	ldr	r1, [pc, #564]	@ (800c218 <tcp_split_unsent_seg+0x280>)
 800bfe4:	488b      	ldr	r0, [pc, #556]	@ (800c214 <tcp_split_unsent_seg+0x27c>)
 800bfe6:	f004 f8c3 	bl	8010170 <iprintf>
    return ERR_VAL;
 800bfea:	f06f 0305 	mvn.w	r3, #5
 800bfee:	e109      	b.n	800c204 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	891b      	ldrh	r3, [r3, #8]
 800bff4:	887a      	ldrh	r2, [r7, #2]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d301      	bcc.n	800bffe <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	e102      	b.n	800c204 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c002:	887a      	ldrh	r2, [r7, #2]
 800c004:	429a      	cmp	r2, r3
 800c006:	d906      	bls.n	800c016 <tcp_split_unsent_seg+0x7e>
 800c008:	4b80      	ldr	r3, [pc, #512]	@ (800c20c <tcp_split_unsent_seg+0x274>)
 800c00a:	f240 325b 	movw	r2, #859	@ 0x35b
 800c00e:	4983      	ldr	r1, [pc, #524]	@ (800c21c <tcp_split_unsent_seg+0x284>)
 800c010:	4880      	ldr	r0, [pc, #512]	@ (800c214 <tcp_split_unsent_seg+0x27c>)
 800c012:	f004 f8ad 	bl	8010170 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	891b      	ldrh	r3, [r3, #8]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <tcp_split_unsent_seg+0x94>
 800c01e:	4b7b      	ldr	r3, [pc, #492]	@ (800c20c <tcp_split_unsent_seg+0x274>)
 800c020:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800c024:	497e      	ldr	r1, [pc, #504]	@ (800c220 <tcp_split_unsent_seg+0x288>)
 800c026:	487b      	ldr	r0, [pc, #492]	@ (800c214 <tcp_split_unsent_seg+0x27c>)
 800c028:	f004 f8a2 	bl	8010170 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	7a9b      	ldrb	r3, [r3, #10]
 800c030:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c032:	7bfb      	ldrb	r3, [r7, #15]
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	b2db      	uxtb	r3, r3
 800c038:	f003 0304 	and.w	r3, r3, #4
 800c03c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	891a      	ldrh	r2, [r3, #8]
 800c042:	887b      	ldrh	r3, [r7, #2]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	89bb      	ldrh	r3, [r7, #12]
 800c04e:	4413      	add	r3, r2
 800c050:	b29b      	uxth	r3, r3
 800c052:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c056:	4619      	mov	r1, r3
 800c058:	2036      	movs	r0, #54	@ 0x36
 800c05a:	f7fb facf 	bl	80075fc <pbuf_alloc>
 800c05e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	f000 80b7 	beq.w	800c1d6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	891a      	ldrh	r2, [r3, #8]
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	891b      	ldrh	r3, [r3, #8]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	b29a      	uxth	r2, r3
 800c076:	887b      	ldrh	r3, [r7, #2]
 800c078:	4413      	add	r3, r2
 800c07a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	6858      	ldr	r0, [r3, #4]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	18d1      	adds	r1, r2, r3
 800c088:	897b      	ldrh	r3, [r7, #10]
 800c08a:	89ba      	ldrh	r2, [r7, #12]
 800c08c:	f7fb ff84 	bl	8007f98 <pbuf_copy_partial>
 800c090:	4603      	mov	r3, r0
 800c092:	461a      	mov	r2, r3
 800c094:	89bb      	ldrh	r3, [r7, #12]
 800c096:	4293      	cmp	r3, r2
 800c098:	f040 809f 	bne.w	800c1da <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	68db      	ldr	r3, [r3, #12]
 800c0a0:	899b      	ldrh	r3, [r3, #12]
 800c0a2:	b29b      	uxth	r3, r3
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fa f977 	bl	8006398 <lwip_htons>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c0b2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800c0b8:	7efb      	ldrb	r3, [r7, #27]
 800c0ba:	f003 0308 	and.w	r3, r3, #8
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d007      	beq.n	800c0d2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800c0c2:	7efb      	ldrb	r3, [r7, #27]
 800c0c4:	f023 0308 	bic.w	r3, r3, #8
 800c0c8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800c0ca:	7ebb      	ldrb	r3, [r7, #26]
 800c0cc:	f043 0308 	orr.w	r3, r3, #8
 800c0d0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800c0d2:	7efb      	ldrb	r3, [r7, #27]
 800c0d4:	f003 0301 	and.w	r3, r3, #1
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d007      	beq.n	800c0ec <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800c0dc:	7efb      	ldrb	r3, [r7, #27]
 800c0de:	f023 0301 	bic.w	r3, r3, #1
 800c0e2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800c0e4:	7ebb      	ldrb	r3, [r7, #26]
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7fa f965 	bl	80063c2 <lwip_htonl>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	887b      	ldrh	r3, [r7, #2]
 800c0fc:	18d1      	adds	r1, r2, r3
 800c0fe:	7eba      	ldrb	r2, [r7, #26]
 800c100:	7bfb      	ldrb	r3, [r7, #15]
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	460b      	mov	r3, r1
 800c106:	6939      	ldr	r1, [r7, #16]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff fea9 	bl	800be60 <tcp_create_segment>
 800c10e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d063      	beq.n	800c1de <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7fb fdda 	bl	8007cd4 <pbuf_clen>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c12a:	1a9b      	subs	r3, r3, r2
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	6858      	ldr	r0, [r3, #4]
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	891a      	ldrh	r2, [r3, #8]
 800c13e:	89bb      	ldrh	r3, [r7, #12]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	b29b      	uxth	r3, r3
 800c144:	4619      	mov	r1, r3
 800c146:	f7fb fbb7 	bl	80078b8 <pbuf_realloc>
  useg->len -= remainder;
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	891a      	ldrh	r2, [r3, #8]
 800c14e:	89bb      	ldrh	r3, [r7, #12]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	b29a      	uxth	r2, r3
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	899b      	ldrh	r3, [r3, #12]
 800c15e:	b29c      	uxth	r4, r3
 800c160:	7efb      	ldrb	r3, [r7, #27]
 800c162:	b29b      	uxth	r3, r3
 800c164:	4618      	mov	r0, r3
 800c166:	f7fa f917 	bl	8006398 <lwip_htons>
 800c16a:	4603      	mov	r3, r0
 800c16c:	461a      	mov	r2, r3
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	4322      	orrs	r2, r4
 800c174:	b292      	uxth	r2, r2
 800c176:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	685b      	ldr	r3, [r3, #4]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fb fda9 	bl	8007cd4 <pbuf_clen>
 800c182:	4603      	mov	r3, r0
 800c184:	461a      	mov	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c18c:	4413      	add	r3, r2
 800c18e:	b29a      	uxth	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7fb fd9a 	bl	8007cd4 <pbuf_clen>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c1aa:	4413      	add	r3, r2
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	69fa      	ldr	r2, [r7, #28]
 800c1c0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d103      	bne.n	800c1d2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e016      	b.n	800c204 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800c1d6:	bf00      	nop
 800c1d8:	e002      	b.n	800c1e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1da:	bf00      	nop
 800c1dc:	e000      	b.n	800c1e0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800c1de:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d006      	beq.n	800c1f4 <tcp_split_unsent_seg+0x25c>
 800c1e6:	4b09      	ldr	r3, [pc, #36]	@ (800c20c <tcp_split_unsent_seg+0x274>)
 800c1e8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800c1ec:	490d      	ldr	r1, [pc, #52]	@ (800c224 <tcp_split_unsent_seg+0x28c>)
 800c1ee:	4809      	ldr	r0, [pc, #36]	@ (800c214 <tcp_split_unsent_seg+0x27c>)
 800c1f0:	f003 ffbe 	bl	8010170 <iprintf>
  if (p != NULL) {
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800c1fa:	6938      	ldr	r0, [r7, #16]
 800c1fc:	f7fb fce2 	bl	8007bc4 <pbuf_free>
  }

  return ERR_MEM;
 800c200:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c204:	4618      	mov	r0, r3
 800c206:	3724      	adds	r7, #36	@ 0x24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd90      	pop	{r4, r7, pc}
 800c20c:	08012760 	.word	0x08012760
 800c210:	08012af4 	.word	0x08012af4
 800c214:	080127b4 	.word	0x080127b4
 800c218:	08012b18 	.word	0x08012b18
 800c21c:	08012b3c 	.word	0x08012b3c
 800c220:	08012b4c 	.word	0x08012b4c
 800c224:	08012b5c 	.word	0x08012b5c

0800c228 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800c228:	b590      	push	{r4, r7, lr}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d106      	bne.n	800c244 <tcp_send_fin+0x1c>
 800c236:	4b21      	ldr	r3, [pc, #132]	@ (800c2bc <tcp_send_fin+0x94>)
 800c238:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800c23c:	4920      	ldr	r1, [pc, #128]	@ (800c2c0 <tcp_send_fin+0x98>)
 800c23e:	4821      	ldr	r0, [pc, #132]	@ (800c2c4 <tcp_send_fin+0x9c>)
 800c240:	f003 ff96 	bl	8010170 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d02e      	beq.n	800c2aa <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c250:	60fb      	str	r3, [r7, #12]
 800c252:	e002      	b.n	800c25a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1f8      	bne.n	800c254 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	899b      	ldrh	r3, [r3, #12]
 800c268:	b29b      	uxth	r3, r3
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7fa f894 	bl	8006398 <lwip_htons>
 800c270:	4603      	mov	r3, r0
 800c272:	b2db      	uxtb	r3, r3
 800c274:	f003 0307 	and.w	r3, r3, #7
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d116      	bne.n	800c2aa <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	899b      	ldrh	r3, [r3, #12]
 800c282:	b29c      	uxth	r4, r3
 800c284:	2001      	movs	r0, #1
 800c286:	f7fa f887 	bl	8006398 <lwip_htons>
 800c28a:	4603      	mov	r3, r0
 800c28c:	461a      	mov	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	68db      	ldr	r3, [r3, #12]
 800c292:	4322      	orrs	r2, r4
 800c294:	b292      	uxth	r2, r2
 800c296:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	8b5b      	ldrh	r3, [r3, #26]
 800c29c:	f043 0320 	orr.w	r3, r3, #32
 800c2a0:	b29a      	uxth	r2, r3
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e004      	b.n	800c2b4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f80b 	bl	800c2c8 <tcp_enqueue_flags>
 800c2b2:	4603      	mov	r3, r0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd90      	pop	{r4, r7, pc}
 800c2bc:	08012760 	.word	0x08012760
 800c2c0:	08012b68 	.word	0x08012b68
 800c2c4:	080127b4 	.word	0x080127b4

0800c2c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08a      	sub	sp, #40	@ 0x28
 800c2cc:	af02      	add	r7, sp, #8
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2dc:	78fb      	ldrb	r3, [r7, #3]
 800c2de:	f003 0303 	and.w	r3, r3, #3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d106      	bne.n	800c2f4 <tcp_enqueue_flags+0x2c>
 800c2e6:	4b67      	ldr	r3, [pc, #412]	@ (800c484 <tcp_enqueue_flags+0x1bc>)
 800c2e8:	f240 4211 	movw	r2, #1041	@ 0x411
 800c2ec:	4966      	ldr	r1, [pc, #408]	@ (800c488 <tcp_enqueue_flags+0x1c0>)
 800c2ee:	4867      	ldr	r0, [pc, #412]	@ (800c48c <tcp_enqueue_flags+0x1c4>)
 800c2f0:	f003 ff3e 	bl	8010170 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <tcp_enqueue_flags+0x40>
 800c2fa:	4b62      	ldr	r3, [pc, #392]	@ (800c484 <tcp_enqueue_flags+0x1bc>)
 800c2fc:	f240 4213 	movw	r2, #1043	@ 0x413
 800c300:	4963      	ldr	r1, [pc, #396]	@ (800c490 <tcp_enqueue_flags+0x1c8>)
 800c302:	4862      	ldr	r0, [pc, #392]	@ (800c48c <tcp_enqueue_flags+0x1c4>)
 800c304:	f003 ff34 	bl	8010170 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800c308:	78fb      	ldrb	r3, [r7, #3]
 800c30a:	f003 0302 	and.w	r3, r3, #2
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800c312:	2301      	movs	r3, #1
 800c314:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c316:	7ffb      	ldrb	r3, [r7, #31]
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	f003 0304 	and.w	r3, r3, #4
 800c320:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c322:	7dfb      	ldrb	r3, [r7, #23]
 800c324:	b29b      	uxth	r3, r3
 800c326:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c32a:	4619      	mov	r1, r3
 800c32c:	2036      	movs	r0, #54	@ 0x36
 800c32e:	f7fb f965 	bl	80075fc <pbuf_alloc>
 800c332:	6138      	str	r0, [r7, #16]
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d109      	bne.n	800c34e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	8b5b      	ldrh	r3, [r3, #26]
 800c33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c342:	b29a      	uxth	r2, r3
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c348:	f04f 33ff 	mov.w	r3, #4294967295
 800c34c:	e095      	b.n	800c47a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	895a      	ldrh	r2, [r3, #10]
 800c352:	7dfb      	ldrb	r3, [r7, #23]
 800c354:	b29b      	uxth	r3, r3
 800c356:	429a      	cmp	r2, r3
 800c358:	d206      	bcs.n	800c368 <tcp_enqueue_flags+0xa0>
 800c35a:	4b4a      	ldr	r3, [pc, #296]	@ (800c484 <tcp_enqueue_flags+0x1bc>)
 800c35c:	f240 4239 	movw	r2, #1081	@ 0x439
 800c360:	494c      	ldr	r1, [pc, #304]	@ (800c494 <tcp_enqueue_flags+0x1cc>)
 800c362:	484a      	ldr	r0, [pc, #296]	@ (800c48c <tcp_enqueue_flags+0x1c4>)
 800c364:	f003 ff04 	bl	8010170 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800c36c:	78fa      	ldrb	r2, [r7, #3]
 800c36e:	7ffb      	ldrb	r3, [r7, #31]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	460b      	mov	r3, r1
 800c374:	6939      	ldr	r1, [r7, #16]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff fd72 	bl	800be60 <tcp_create_segment>
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d109      	bne.n	800c398 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	8b5b      	ldrh	r3, [r3, #26]
 800c388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c38c:	b29a      	uxth	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800c392:	f04f 33ff 	mov.w	r3, #4294967295
 800c396:	e070      	b.n	800c47a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d006      	beq.n	800c3b2 <tcp_enqueue_flags+0xea>
 800c3a4:	4b37      	ldr	r3, [pc, #220]	@ (800c484 <tcp_enqueue_flags+0x1bc>)
 800c3a6:	f240 4242 	movw	r2, #1090	@ 0x442
 800c3aa:	493b      	ldr	r1, [pc, #236]	@ (800c498 <tcp_enqueue_flags+0x1d0>)
 800c3ac:	4837      	ldr	r0, [pc, #220]	@ (800c48c <tcp_enqueue_flags+0x1c4>)
 800c3ae:	f003 fedf 	bl	8010170 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	891b      	ldrh	r3, [r3, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d006      	beq.n	800c3c8 <tcp_enqueue_flags+0x100>
 800c3ba:	4b32      	ldr	r3, [pc, #200]	@ (800c484 <tcp_enqueue_flags+0x1bc>)
 800c3bc:	f240 4243 	movw	r2, #1091	@ 0x443
 800c3c0:	4936      	ldr	r1, [pc, #216]	@ (800c49c <tcp_enqueue_flags+0x1d4>)
 800c3c2:	4832      	ldr	r0, [pc, #200]	@ (800c48c <tcp_enqueue_flags+0x1c4>)
 800c3c4:	f003 fed4 	bl	8010170 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d103      	bne.n	800c3d8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68fa      	ldr	r2, [r7, #12]
 800c3d4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c3d6:	e00d      	b.n	800c3f4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c3dc:	61bb      	str	r3, [r7, #24]
 800c3de:	e002      	b.n	800c3e6 <tcp_enqueue_flags+0x11e>
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	61bb      	str	r3, [r7, #24]
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1f8      	bne.n	800c3e0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	68fa      	ldr	r2, [r7, #12]
 800c3f2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c3fc:	78fb      	ldrb	r3, [r7, #3]
 800c3fe:	f003 0302 	and.w	r3, r3, #2
 800c402:	2b00      	cmp	r3, #0
 800c404:	d104      	bne.n	800c410 <tcp_enqueue_flags+0x148>
 800c406:	78fb      	ldrb	r3, [r7, #3]
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d004      	beq.n	800c41a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c414:	1c5a      	adds	r2, r3, #1
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c41a:	78fb      	ldrb	r3, [r7, #3]
 800c41c:	f003 0301 	and.w	r3, r3, #1
 800c420:	2b00      	cmp	r3, #0
 800c422:	d006      	beq.n	800c432 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	8b5b      	ldrh	r3, [r3, #26]
 800c428:	f043 0320 	orr.w	r3, r3, #32
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	4618      	mov	r0, r3
 800c438:	f7fb fc4c 	bl	8007cd4 <pbuf_clen>
 800c43c:	4603      	mov	r3, r0
 800c43e:	461a      	mov	r2, r3
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c446:	4413      	add	r3, r2
 800c448:	b29a      	uxth	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00e      	beq.n	800c478 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10a      	bne.n	800c478 <tcp_enqueue_flags+0x1b0>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <tcp_enqueue_flags+0x1b0>
 800c46a:	4b06      	ldr	r3, [pc, #24]	@ (800c484 <tcp_enqueue_flags+0x1bc>)
 800c46c:	f240 4265 	movw	r2, #1125	@ 0x465
 800c470:	490b      	ldr	r1, [pc, #44]	@ (800c4a0 <tcp_enqueue_flags+0x1d8>)
 800c472:	4806      	ldr	r0, [pc, #24]	@ (800c48c <tcp_enqueue_flags+0x1c4>)
 800c474:	f003 fe7c 	bl	8010170 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3720      	adds	r7, #32
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	08012760 	.word	0x08012760
 800c488:	08012b84 	.word	0x08012b84
 800c48c:	080127b4 	.word	0x080127b4
 800c490:	08012bdc 	.word	0x08012bdc
 800c494:	08012bfc 	.word	0x08012bfc
 800c498:	08012c38 	.word	0x08012c38
 800c49c:	08012c50 	.word	0x08012c50
 800c4a0:	08012c7c 	.word	0x08012c7c

0800c4a4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c4a4:	b5b0      	push	{r4, r5, r7, lr}
 800c4a6:	b08a      	sub	sp, #40	@ 0x28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d106      	bne.n	800c4c0 <tcp_output+0x1c>
 800c4b2:	4b8a      	ldr	r3, [pc, #552]	@ (800c6dc <tcp_output+0x238>)
 800c4b4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800c4b8:	4989      	ldr	r1, [pc, #548]	@ (800c6e0 <tcp_output+0x23c>)
 800c4ba:	488a      	ldr	r0, [pc, #552]	@ (800c6e4 <tcp_output+0x240>)
 800c4bc:	f003 fe58 	bl	8010170 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	7d1b      	ldrb	r3, [r3, #20]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d106      	bne.n	800c4d6 <tcp_output+0x32>
 800c4c8:	4b84      	ldr	r3, [pc, #528]	@ (800c6dc <tcp_output+0x238>)
 800c4ca:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c4ce:	4986      	ldr	r1, [pc, #536]	@ (800c6e8 <tcp_output+0x244>)
 800c4d0:	4884      	ldr	r0, [pc, #528]	@ (800c6e4 <tcp_output+0x240>)
 800c4d2:	f003 fe4d 	bl	8010170 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c4d6:	4b85      	ldr	r3, [pc, #532]	@ (800c6ec <tcp_output+0x248>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d101      	bne.n	800c4e4 <tcp_output+0x40>
    return ERR_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	e1ce      	b.n	800c882 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	bf28      	it	cs
 800c4f4:	4613      	movcs	r3, r2
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800c500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10b      	bne.n	800c51e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	8b5b      	ldrh	r3, [r3, #26]
 800c50a:	f003 0302 	and.w	r3, r3, #2
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 81aa 	beq.w	800c868 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fdcb 	bl	800d0b0 <tcp_send_empty_ack>
 800c51a:	4603      	mov	r3, r0
 800c51c:	e1b1      	b.n	800c882 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c51e:	6879      	ldr	r1, [r7, #4]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	3304      	adds	r3, #4
 800c524:	461a      	mov	r2, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff fc7e 	bl	800be28 <tcp_route>
 800c52c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d102      	bne.n	800c53a <tcp_output+0x96>
    return ERR_RTE;
 800c534:	f06f 0303 	mvn.w	r3, #3
 800c538:	e1a3      	b.n	800c882 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <tcp_output+0xa4>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d111      	bne.n	800c56c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d002      	beq.n	800c554 <tcp_output+0xb0>
 800c54e:	697b      	ldr	r3, [r7, #20]
 800c550:	3304      	adds	r3, #4
 800c552:	e000      	b.n	800c556 <tcp_output+0xb2>
 800c554:	2300      	movs	r3, #0
 800c556:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d102      	bne.n	800c564 <tcp_output+0xc0>
      return ERR_RTE;
 800c55e:	f06f 0303 	mvn.w	r3, #3
 800c562:	e18e      	b.n	800c882 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	4618      	mov	r0, r3
 800c574:	f7f9 ff25 	bl	80063c2 <lwip_htonl>
 800c578:	4602      	mov	r2, r0
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c582:	8912      	ldrh	r2, [r2, #8]
 800c584:	4413      	add	r3, r2
 800c586:	69ba      	ldr	r2, [r7, #24]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d227      	bcs.n	800c5dc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c592:	461a      	mov	r2, r3
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	4293      	cmp	r3, r2
 800c598:	d114      	bne.n	800c5c4 <tcp_output+0x120>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d110      	bne.n	800c5c4 <tcp_output+0x120>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10b      	bne.n	800c5c4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	8b5b      	ldrh	r3, [r3, #26]
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 814d 	beq.w	800c86c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fd6c 	bl	800d0b0 <tcp_send_empty_ack>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	e152      	b.n	800c882 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5e8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f000 811c 	beq.w	800c82a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c5f2:	e002      	b.n	800c5fa <tcp_output+0x156>
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	623b      	str	r3, [r7, #32]
 800c5fa:	6a3b      	ldr	r3, [r7, #32]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d1f8      	bne.n	800c5f4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c602:	e112      	b.n	800c82a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	899b      	ldrh	r3, [r3, #12]
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7f9 fec3 	bl	8006398 <lwip_htons>
 800c612:	4603      	mov	r3, r0
 800c614:	b2db      	uxtb	r3, r3
 800c616:	f003 0304 	and.w	r3, r3, #4
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d006      	beq.n	800c62c <tcp_output+0x188>
 800c61e:	4b2f      	ldr	r3, [pc, #188]	@ (800c6dc <tcp_output+0x238>)
 800c620:	f240 5236 	movw	r2, #1334	@ 0x536
 800c624:	4932      	ldr	r1, [pc, #200]	@ (800c6f0 <tcp_output+0x24c>)
 800c626:	482f      	ldr	r0, [pc, #188]	@ (800c6e4 <tcp_output+0x240>)
 800c628:	f003 fda2 	bl	8010170 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c630:	2b00      	cmp	r3, #0
 800c632:	d01f      	beq.n	800c674 <tcp_output+0x1d0>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	8b5b      	ldrh	r3, [r3, #26]
 800c638:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d119      	bne.n	800c674 <tcp_output+0x1d0>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c644:	2b00      	cmp	r3, #0
 800c646:	d00b      	beq.n	800c660 <tcp_output+0x1bc>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d110      	bne.n	800c674 <tcp_output+0x1d0>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c656:	891a      	ldrh	r2, [r3, #8]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d209      	bcs.n	800c674 <tcp_output+0x1d0>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c666:	2b00      	cmp	r3, #0
 800c668:	d004      	beq.n	800c674 <tcp_output+0x1d0>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c670:	2b08      	cmp	r3, #8
 800c672:	d901      	bls.n	800c678 <tcp_output+0x1d4>
 800c674:	2301      	movs	r3, #1
 800c676:	e000      	b.n	800c67a <tcp_output+0x1d6>
 800c678:	2300      	movs	r3, #0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d106      	bne.n	800c68c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	8b5b      	ldrh	r3, [r3, #26]
 800c682:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 80e4 	beq.w	800c854 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	7d1b      	ldrb	r3, [r3, #20]
 800c690:	2b02      	cmp	r3, #2
 800c692:	d00d      	beq.n	800c6b0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c696:	68db      	ldr	r3, [r3, #12]
 800c698:	899b      	ldrh	r3, [r3, #12]
 800c69a:	b29c      	uxth	r4, r3
 800c69c:	2010      	movs	r0, #16
 800c69e:	f7f9 fe7b 	bl	8006398 <lwip_htons>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a8:	68db      	ldr	r3, [r3, #12]
 800c6aa:	4322      	orrs	r2, r4
 800c6ac:	b292      	uxth	r2, r2
 800c6ae:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	6879      	ldr	r1, [r7, #4]
 800c6b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6b6:	f000 f909 	bl	800c8cc <tcp_output_segment>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d016      	beq.n	800c6f4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	8b5b      	ldrh	r3, [r3, #26]
 800c6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	835a      	strh	r2, [r3, #26]
      return err;
 800c6d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6d8:	e0d3      	b.n	800c882 <tcp_output+0x3de>
 800c6da:	bf00      	nop
 800c6dc:	08012760 	.word	0x08012760
 800c6e0:	08012ca4 	.word	0x08012ca4
 800c6e4:	080127b4 	.word	0x080127b4
 800c6e8:	08012cbc 	.word	0x08012cbc
 800c6ec:	24003224 	.word	0x24003224
 800c6f0:	08012ce4 	.word	0x08012ce4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	7d1b      	ldrb	r3, [r3, #20]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d006      	beq.n	800c712 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	8b5b      	ldrh	r3, [r3, #26]
 800c708:	f023 0303 	bic.w	r3, r3, #3
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7f9 fe52 	bl	80063c2 <lwip_htonl>
 800c71e:	4604      	mov	r4, r0
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	891b      	ldrh	r3, [r3, #8]
 800c724:	461d      	mov	r5, r3
 800c726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c728:	68db      	ldr	r3, [r3, #12]
 800c72a:	899b      	ldrh	r3, [r3, #12]
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	4618      	mov	r0, r3
 800c730:	f7f9 fe32 	bl	8006398 <lwip_htons>
 800c734:	4603      	mov	r3, r0
 800c736:	b2db      	uxtb	r3, r3
 800c738:	f003 0303 	and.w	r3, r3, #3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <tcp_output+0x2a0>
 800c740:	2301      	movs	r3, #1
 800c742:	e000      	b.n	800c746 <tcp_output+0x2a2>
 800c744:	2300      	movs	r3, #0
 800c746:	442b      	add	r3, r5
 800c748:	4423      	add	r3, r4
 800c74a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	2b00      	cmp	r3, #0
 800c756:	da02      	bge.n	800c75e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68ba      	ldr	r2, [r7, #8]
 800c75c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c760:	891b      	ldrh	r3, [r3, #8]
 800c762:	461c      	mov	r4, r3
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	899b      	ldrh	r3, [r3, #12]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	4618      	mov	r0, r3
 800c76e:	f7f9 fe13 	bl	8006398 <lwip_htons>
 800c772:	4603      	mov	r3, r0
 800c774:	b2db      	uxtb	r3, r3
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d001      	beq.n	800c782 <tcp_output+0x2de>
 800c77e:	2301      	movs	r3, #1
 800c780:	e000      	b.n	800c784 <tcp_output+0x2e0>
 800c782:	2300      	movs	r3, #0
 800c784:	4423      	add	r3, r4
 800c786:	2b00      	cmp	r3, #0
 800c788:	d049      	beq.n	800c81e <tcp_output+0x37a>
      seg->next = NULL;
 800c78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c794:	2b00      	cmp	r3, #0
 800c796:	d105      	bne.n	800c7a4 <tcp_output+0x300>
        pcb->unacked = seg;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c79c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800c79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a0:	623b      	str	r3, [r7, #32]
 800c7a2:	e03f      	b.n	800c824 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7f9 fe09 	bl	80063c2 <lwip_htonl>
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	6a3b      	ldr	r3, [r7, #32]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7f9 fe02 	bl	80063c2 <lwip_htonl>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	1ae3      	subs	r3, r4, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	da24      	bge.n	800c810 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3370      	adds	r3, #112	@ 0x70
 800c7ca:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7cc:	e002      	b.n	800c7d4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d011      	beq.n	800c800 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	685b      	ldr	r3, [r3, #4]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7f9 fdec 	bl	80063c2 <lwip_htonl>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f9 fde5 	bl	80063c2 <lwip_htonl>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	dbe6      	blt.n	800c7ce <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c806:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c80c:	601a      	str	r2, [r3, #0]
 800c80e:	e009      	b.n	800c824 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c810:	6a3b      	ldr	r3, [r7, #32]
 800c812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c814:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c816:	6a3b      	ldr	r3, [r7, #32]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	623b      	str	r3, [r7, #32]
 800c81c:	e002      	b.n	800c824 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c81e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c820:	f7fc fc45 	bl	80090ae <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c828:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d012      	beq.n	800c856 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	4618      	mov	r0, r3
 800c838:	f7f9 fdc3 	bl	80063c2 <lwip_htonl>
 800c83c:	4602      	mov	r2, r0
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c846:	8912      	ldrh	r2, [r2, #8]
 800c848:	4413      	add	r3, r2
  while (seg != NULL &&
 800c84a:	69ba      	ldr	r2, [r7, #24]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	f4bf aed9 	bcs.w	800c604 <tcp_output+0x160>
 800c852:	e000      	b.n	800c856 <tcp_output+0x3b2>
      break;
 800c854:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d108      	bne.n	800c870 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800c866:	e004      	b.n	800c872 <tcp_output+0x3ce>
    goto output_done;
 800c868:	bf00      	nop
 800c86a:	e002      	b.n	800c872 <tcp_output+0x3ce>
    goto output_done;
 800c86c:	bf00      	nop
 800c86e:	e000      	b.n	800c872 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c870:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	8b5b      	ldrh	r3, [r3, #26]
 800c876:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3728      	adds	r7, #40	@ 0x28
 800c886:	46bd      	mov	sp, r7
 800c888:	bdb0      	pop	{r4, r5, r7, pc}
 800c88a:	bf00      	nop

0800c88c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d106      	bne.n	800c8a8 <tcp_output_segment_busy+0x1c>
 800c89a:	4b09      	ldr	r3, [pc, #36]	@ (800c8c0 <tcp_output_segment_busy+0x34>)
 800c89c:	f240 529a 	movw	r2, #1434	@ 0x59a
 800c8a0:	4908      	ldr	r1, [pc, #32]	@ (800c8c4 <tcp_output_segment_busy+0x38>)
 800c8a2:	4809      	ldr	r0, [pc, #36]	@ (800c8c8 <tcp_output_segment_busy+0x3c>)
 800c8a4:	f003 fc64 	bl	8010170 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	7b9b      	ldrb	r3, [r3, #14]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d001      	beq.n	800c8b6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	e000      	b.n	800c8b8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3708      	adds	r7, #8
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}
 800c8c0:	08012760 	.word	0x08012760
 800c8c4:	08012cfc 	.word	0x08012cfc
 800c8c8:	080127b4 	.word	0x080127b4

0800c8cc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c8cc:	b5b0      	push	{r4, r5, r7, lr}
 800c8ce:	b08c      	sub	sp, #48	@ 0x30
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d106      	bne.n	800c8ec <tcp_output_segment+0x20>
 800c8de:	4b64      	ldr	r3, [pc, #400]	@ (800ca70 <tcp_output_segment+0x1a4>)
 800c8e0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800c8e4:	4963      	ldr	r1, [pc, #396]	@ (800ca74 <tcp_output_segment+0x1a8>)
 800c8e6:	4864      	ldr	r0, [pc, #400]	@ (800ca78 <tcp_output_segment+0x1ac>)
 800c8e8:	f003 fc42 	bl	8010170 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c8ec:	68bb      	ldr	r3, [r7, #8]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d106      	bne.n	800c900 <tcp_output_segment+0x34>
 800c8f2:	4b5f      	ldr	r3, [pc, #380]	@ (800ca70 <tcp_output_segment+0x1a4>)
 800c8f4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800c8f8:	4960      	ldr	r1, [pc, #384]	@ (800ca7c <tcp_output_segment+0x1b0>)
 800c8fa:	485f      	ldr	r0, [pc, #380]	@ (800ca78 <tcp_output_segment+0x1ac>)
 800c8fc:	f003 fc38 	bl	8010170 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d106      	bne.n	800c914 <tcp_output_segment+0x48>
 800c906:	4b5a      	ldr	r3, [pc, #360]	@ (800ca70 <tcp_output_segment+0x1a4>)
 800c908:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800c90c:	495c      	ldr	r1, [pc, #368]	@ (800ca80 <tcp_output_segment+0x1b4>)
 800c90e:	485a      	ldr	r0, [pc, #360]	@ (800ca78 <tcp_output_segment+0x1ac>)
 800c910:	f003 fc2e 	bl	8010170 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff ffb9 	bl	800c88c <tcp_output_segment_busy>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c920:	2300      	movs	r3, #0
 800c922:	e0a1      	b.n	800ca68 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	68dc      	ldr	r4, [r3, #12]
 800c92c:	4610      	mov	r0, r2
 800c92e:	f7f9 fd48 	bl	80063c2 <lwip_htonl>
 800c932:	4603      	mov	r3, r0
 800c934:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	68dc      	ldr	r4, [r3, #12]
 800c93e:	4610      	mov	r0, r2
 800c940:	f7f9 fd2a 	bl	8006398 <lwip_htons>
 800c944:	4603      	mov	r3, r0
 800c946:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800c950:	441a      	add	r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	3314      	adds	r3, #20
 800c95c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	7a9b      	ldrb	r3, [r3, #10]
 800c962:	f003 0301 	and.w	r3, r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	d015      	beq.n	800c996 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	3304      	adds	r3, #4
 800c96e:	461a      	mov	r2, r3
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800c976:	f7fc fe91 	bl	800969c <tcp_eff_send_mss_netif>
 800c97a:	4603      	mov	r3, r0
 800c97c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c97e:	8b7b      	ldrh	r3, [r7, #26]
 800c980:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800c984:	4618      	mov	r0, r3
 800c986:	f7f9 fd1c 	bl	80063c2 <lwip_htonl>
 800c98a:	4602      	mov	r2, r0
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c990:	69fb      	ldr	r3, [r7, #28]
 800c992:	3304      	adds	r3, #4
 800c994:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	da02      	bge.n	800c9a6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10c      	bne.n	800c9c8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c9ae:	4b35      	ldr	r3, [pc, #212]	@ (800ca84 <tcp_output_segment+0x1b8>)
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7f9 fd00 	bl	80063c2 <lwip_htonl>
 800c9c2:	4602      	mov	r2, r0
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	68da      	ldr	r2, [r3, #12]
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	685b      	ldr	r3, [r3, #4]
 800c9da:	8959      	ldrh	r1, [r3, #10]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	8b3a      	ldrh	r2, [r7, #24]
 800c9e2:	1a8a      	subs	r2, r1, r2
 800c9e4:	b292      	uxth	r2, r2
 800c9e6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	8919      	ldrh	r1, [r3, #8]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	8b3a      	ldrh	r2, [r7, #24]
 800c9f4:	1a8a      	subs	r2, r1, r2
 800c9f6:	b292      	uxth	r2, r2
 800c9f8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	685b      	ldr	r3, [r3, #4]
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	68d2      	ldr	r2, [r2, #12]
 800ca02:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	68db      	ldr	r3, [r3, #12]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	741a      	strb	r2, [r3, #16]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	68da      	ldr	r2, [r3, #12]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	7a9b      	ldrb	r3, [r3, #10]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <tcp_output_segment+0x158>
 800ca20:	2318      	movs	r3, #24
 800ca22:	e000      	b.n	800ca26 <tcp_output_segment+0x15a>
 800ca24:	2314      	movs	r3, #20
 800ca26:	4413      	add	r3, r2
 800ca28:	69fa      	ldr	r2, [r7, #28]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d006      	beq.n	800ca3c <tcp_output_segment+0x170>
 800ca2e:	4b10      	ldr	r3, [pc, #64]	@ (800ca70 <tcp_output_segment+0x1a4>)
 800ca30:	f240 621c 	movw	r2, #1564	@ 0x61c
 800ca34:	4914      	ldr	r1, [pc, #80]	@ (800ca88 <tcp_output_segment+0x1bc>)
 800ca36:	4810      	ldr	r0, [pc, #64]	@ (800ca78 <tcp_output_segment+0x1ac>)
 800ca38:	f003 fb9a 	bl	8010170 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6858      	ldr	r0, [r3, #4]
 800ca40:	68b9      	ldr	r1, [r7, #8]
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	1d1c      	adds	r4, r3, #4
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	7add      	ldrb	r5, [r3, #11]
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	7a9b      	ldrb	r3, [r3, #10]
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	9202      	str	r2, [sp, #8]
 800ca52:	2206      	movs	r2, #6
 800ca54:	9201      	str	r2, [sp, #4]
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	462b      	mov	r3, r5
 800ca5a:	4622      	mov	r2, r4
 800ca5c:	f002 fa5a 	bl	800ef14 <ip4_output_if>
 800ca60:	4603      	mov	r3, r0
 800ca62:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ca64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3720      	adds	r7, #32
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca70:	08012760 	.word	0x08012760
 800ca74:	08012d24 	.word	0x08012d24
 800ca78:	080127b4 	.word	0x080127b4
 800ca7c:	08012d44 	.word	0x08012d44
 800ca80:	08012d64 	.word	0x08012d64
 800ca84:	240031d8 	.word	0x240031d8
 800ca88:	08012d88 	.word	0x08012d88

0800ca8c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ca8c:	b5b0      	push	{r4, r5, r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d106      	bne.n	800caa8 <tcp_rexmit_rto_prepare+0x1c>
 800ca9a:	4b31      	ldr	r3, [pc, #196]	@ (800cb60 <tcp_rexmit_rto_prepare+0xd4>)
 800ca9c:	f240 6263 	movw	r2, #1635	@ 0x663
 800caa0:	4930      	ldr	r1, [pc, #192]	@ (800cb64 <tcp_rexmit_rto_prepare+0xd8>)
 800caa2:	4831      	ldr	r0, [pc, #196]	@ (800cb68 <tcp_rexmit_rto_prepare+0xdc>)
 800caa4:	f003 fb64 	bl	8010170 <iprintf>

  if (pcb->unacked == NULL) {
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caac:	2b00      	cmp	r3, #0
 800caae:	d102      	bne.n	800cab6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800cab0:	f06f 0305 	mvn.w	r3, #5
 800cab4:	e050      	b.n	800cb58 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	e00b      	b.n	800cad6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff fee4 	bl	800c88c <tcp_output_segment_busy>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d002      	beq.n	800cad0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800caca:	f06f 0305 	mvn.w	r3, #5
 800cace:	e043      	b.n	800cb58 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	60fb      	str	r3, [r7, #12]
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d1ef      	bne.n	800cabe <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7ff fed4 	bl	800c88c <tcp_output_segment_busy>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d002      	beq.n	800caf0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800caea:	f06f 0305 	mvn.w	r3, #5
 800caee:	e033      	b.n	800cb58 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	8b5b      	ldrh	r3, [r3, #26]
 800cb0a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7f9 fc51 	bl	80063c2 <lwip_htonl>
 800cb20:	4604      	mov	r4, r0
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	891b      	ldrh	r3, [r3, #8]
 800cb26:	461d      	mov	r5, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	899b      	ldrh	r3, [r3, #12]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7f9 fc31 	bl	8006398 <lwip_htons>
 800cb36:	4603      	mov	r3, r0
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f003 0303 	and.w	r3, r3, #3
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d001      	beq.n	800cb46 <tcp_rexmit_rto_prepare+0xba>
 800cb42:	2301      	movs	r3, #1
 800cb44:	e000      	b.n	800cb48 <tcp_rexmit_rto_prepare+0xbc>
 800cb46:	2300      	movs	r3, #0
 800cb48:	442b      	add	r3, r5
 800cb4a:	18e2      	adds	r2, r4, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bdb0      	pop	{r4, r5, r7, pc}
 800cb60:	08012760 	.word	0x08012760
 800cb64:	08012d9c 	.word	0x08012d9c
 800cb68:	080127b4 	.word	0x080127b4

0800cb6c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d106      	bne.n	800cb88 <tcp_rexmit_rto_commit+0x1c>
 800cb7a:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb0 <tcp_rexmit_rto_commit+0x44>)
 800cb7c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800cb80:	490c      	ldr	r1, [pc, #48]	@ (800cbb4 <tcp_rexmit_rto_commit+0x48>)
 800cb82:	480d      	ldr	r0, [pc, #52]	@ (800cbb8 <tcp_rexmit_rto_commit+0x4c>)
 800cb84:	f003 faf4 	bl	8010170 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb8e:	2bff      	cmp	r3, #255	@ 0xff
 800cb90:	d007      	beq.n	800cba2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb98:	3301      	adds	r3, #1
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff fc7e 	bl	800c4a4 <tcp_output>
}
 800cba8:	bf00      	nop
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	08012760 	.word	0x08012760
 800cbb4:	08012dc0 	.word	0x08012dc0
 800cbb8:	080127b4 	.word	0x080127b4

0800cbbc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d106      	bne.n	800cbd8 <tcp_rexmit_rto+0x1c>
 800cbca:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf4 <tcp_rexmit_rto+0x38>)
 800cbcc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800cbd0:	4909      	ldr	r1, [pc, #36]	@ (800cbf8 <tcp_rexmit_rto+0x3c>)
 800cbd2:	480a      	ldr	r0, [pc, #40]	@ (800cbfc <tcp_rexmit_rto+0x40>)
 800cbd4:	f003 facc 	bl	8010170 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ff57 	bl	800ca8c <tcp_rexmit_rto_prepare>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d102      	bne.n	800cbea <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f7ff ffc1 	bl	800cb6c <tcp_rexmit_rto_commit>
  }
}
 800cbea:	bf00      	nop
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	08012760 	.word	0x08012760
 800cbf8:	08012de4 	.word	0x08012de4
 800cbfc:	080127b4 	.word	0x080127b4

0800cc00 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800cc00:	b590      	push	{r4, r7, lr}
 800cc02:	b085      	sub	sp, #20
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d106      	bne.n	800cc1c <tcp_rexmit+0x1c>
 800cc0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cccc <tcp_rexmit+0xcc>)
 800cc10:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800cc14:	492e      	ldr	r1, [pc, #184]	@ (800ccd0 <tcp_rexmit+0xd0>)
 800cc16:	482f      	ldr	r0, [pc, #188]	@ (800ccd4 <tcp_rexmit+0xd4>)
 800cc18:	f003 faaa 	bl	8010170 <iprintf>

  if (pcb->unacked == NULL) {
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d102      	bne.n	800cc2a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800cc24:	f06f 0305 	mvn.w	r3, #5
 800cc28:	e04c      	b.n	800ccc4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc2e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800cc30:	68b8      	ldr	r0, [r7, #8]
 800cc32:	f7ff fe2b 	bl	800c88c <tcp_output_segment_busy>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d002      	beq.n	800cc42 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800cc3c:	f06f 0305 	mvn.w	r3, #5
 800cc40:	e040      	b.n	800ccc4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	336c      	adds	r3, #108	@ 0x6c
 800cc4e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc50:	e002      	b.n	800cc58 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d011      	beq.n	800cc84 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	68db      	ldr	r3, [r3, #12]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7f9 fbaa 	bl	80063c2 <lwip_htonl>
 800cc6e:	4604      	mov	r4, r0
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	68db      	ldr	r3, [r3, #12]
 800cc74:	685b      	ldr	r3, [r3, #4]
 800cc76:	4618      	mov	r0, r3
 800cc78:	f7f9 fba3 	bl	80063c2 <lwip_htonl>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	dbe6      	blt.n	800cc52 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	68ba      	ldr	r2, [r7, #8]
 800cc90:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d103      	bne.n	800cca2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cca8:	2bff      	cmp	r3, #255	@ 0xff
 800ccaa:	d007      	beq.n	800ccbc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	b2da      	uxtb	r2, r3
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ccc2:	2300      	movs	r3, #0
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd90      	pop	{r4, r7, pc}
 800cccc:	08012760 	.word	0x08012760
 800ccd0:	08012e00 	.word	0x08012e00
 800ccd4:	080127b4 	.word	0x080127b4

0800ccd8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d106      	bne.n	800ccf4 <tcp_rexmit_fast+0x1c>
 800cce6:	4b2a      	ldr	r3, [pc, #168]	@ (800cd90 <tcp_rexmit_fast+0xb8>)
 800cce8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ccec:	4929      	ldr	r1, [pc, #164]	@ (800cd94 <tcp_rexmit_fast+0xbc>)
 800ccee:	482a      	ldr	r0, [pc, #168]	@ (800cd98 <tcp_rexmit_fast+0xc0>)
 800ccf0:	f003 fa3e 	bl	8010170 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d045      	beq.n	800cd88 <tcp_rexmit_fast+0xb0>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	8b5b      	ldrh	r3, [r3, #26]
 800cd00:	f003 0304 	and.w	r3, r3, #4
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d13f      	bne.n	800cd88 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ff79 	bl	800cc00 <tcp_rexmit>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d139      	bne.n	800cd88 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800cd20:	4293      	cmp	r3, r2
 800cd22:	bf28      	it	cs
 800cd24:	4613      	movcs	r3, r2
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	da00      	bge.n	800cd2e <tcp_rexmit_fast+0x56>
 800cd2c:	3301      	adds	r3, #1
 800cd2e:	105b      	asrs	r3, r3, #1
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800cd3e:	461a      	mov	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d206      	bcs.n	800cd58 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800cd62:	4619      	mov	r1, r3
 800cd64:	0049      	lsls	r1, r1, #1
 800cd66:	440b      	add	r3, r1
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	4413      	add	r3, r2
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	8b5b      	ldrh	r3, [r3, #26]
 800cd78:	f043 0304 	orr.w	r3, r3, #4
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2200      	movs	r2, #0
 800cd86:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	08012760 	.word	0x08012760
 800cd94:	08012e18 	.word	0x08012e18
 800cd98:	080127b4 	.word	0x080127b4

0800cd9c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b086      	sub	sp, #24
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	60f8      	str	r0, [r7, #12]
 800cda4:	607b      	str	r3, [r7, #4]
 800cda6:	460b      	mov	r3, r1
 800cda8:	817b      	strh	r3, [r7, #10]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800cdae:	897a      	ldrh	r2, [r7, #10]
 800cdb0:	893b      	ldrh	r3, [r7, #8]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	3314      	adds	r3, #20
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	2022      	movs	r0, #34	@ 0x22
 800cdc2:	f7fa fc1b 	bl	80075fc <pbuf_alloc>
 800cdc6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d04d      	beq.n	800ce6a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800cdce:	897b      	ldrh	r3, [r7, #10]
 800cdd0:	3313      	adds	r3, #19
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	8952      	ldrh	r2, [r2, #10]
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	db06      	blt.n	800cde8 <tcp_output_alloc_header_common+0x4c>
 800cdda:	4b26      	ldr	r3, [pc, #152]	@ (800ce74 <tcp_output_alloc_header_common+0xd8>)
 800cddc:	f240 7223 	movw	r2, #1827	@ 0x723
 800cde0:	4925      	ldr	r1, [pc, #148]	@ (800ce78 <tcp_output_alloc_header_common+0xdc>)
 800cde2:	4826      	ldr	r0, [pc, #152]	@ (800ce7c <tcp_output_alloc_header_common+0xe0>)
 800cde4:	f003 f9c4 	bl	8010170 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800cdee:	8c3b      	ldrh	r3, [r7, #32]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7f9 fad1 	bl	8006398 <lwip_htons>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	461a      	mov	r2, r3
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800cdfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7f9 fac9 	bl	8006398 <lwip_htons>
 800ce06:	4603      	mov	r3, r0
 800ce08:	461a      	mov	r2, r3
 800ce0a:	693b      	ldr	r3, [r7, #16]
 800ce0c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f7f9 fad4 	bl	80063c2 <lwip_htonl>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ce20:	897b      	ldrh	r3, [r7, #10]
 800ce22:	089b      	lsrs	r3, r3, #2
 800ce24:	b29b      	uxth	r3, r3
 800ce26:	3305      	adds	r3, #5
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	031b      	lsls	r3, r3, #12
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	4313      	orrs	r3, r2
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7f9 faad 	bl	8006398 <lwip_htons>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	461a      	mov	r2, r3
 800ce42:	693b      	ldr	r3, [r7, #16]
 800ce44:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ce46:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f9 faa5 	bl	8006398 <lwip_htons>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	461a      	mov	r2, r3
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	741a      	strb	r2, [r3, #16]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	2200      	movs	r2, #0
 800ce64:	749a      	strb	r2, [r3, #18]
 800ce66:	2200      	movs	r2, #0
 800ce68:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ce6a:	697b      	ldr	r3, [r7, #20]
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	08012760 	.word	0x08012760
 800ce78:	08012e38 	.word	0x08012e38
 800ce7c:	080127b4 	.word	0x080127b4

0800ce80 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ce80:	b5b0      	push	{r4, r5, r7, lr}
 800ce82:	b08a      	sub	sp, #40	@ 0x28
 800ce84:	af04      	add	r7, sp, #16
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	607b      	str	r3, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	817b      	strh	r3, [r7, #10]
 800ce8e:	4613      	mov	r3, r2
 800ce90:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d106      	bne.n	800cea6 <tcp_output_alloc_header+0x26>
 800ce98:	4b15      	ldr	r3, [pc, #84]	@ (800cef0 <tcp_output_alloc_header+0x70>)
 800ce9a:	f240 7242 	movw	r2, #1858	@ 0x742
 800ce9e:	4915      	ldr	r1, [pc, #84]	@ (800cef4 <tcp_output_alloc_header+0x74>)
 800cea0:	4815      	ldr	r0, [pc, #84]	@ (800cef8 <tcp_output_alloc_header+0x78>)
 800cea2:	f003 f965 	bl	8010170 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	8adb      	ldrh	r3, [r3, #22]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	8b12      	ldrh	r2, [r2, #24]
 800ceb2:	68f9      	ldr	r1, [r7, #12]
 800ceb4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ceb6:	893d      	ldrh	r5, [r7, #8]
 800ceb8:	897c      	ldrh	r4, [r7, #10]
 800ceba:	9103      	str	r1, [sp, #12]
 800cebc:	2110      	movs	r1, #16
 800cebe:	9102      	str	r1, [sp, #8]
 800cec0:	9201      	str	r2, [sp, #4]
 800cec2:	9300      	str	r3, [sp, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	462a      	mov	r2, r5
 800cec8:	4621      	mov	r1, r4
 800ceca:	f7ff ff67 	bl	800cd9c <tcp_output_alloc_header_common>
 800cece:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800cede:	441a      	add	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800cee4:	697b      	ldr	r3, [r7, #20]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bdb0      	pop	{r4, r5, r7, pc}
 800ceee:	bf00      	nop
 800cef0:	08012760 	.word	0x08012760
 800cef4:	08012e68 	.word	0x08012e68
 800cef8:	080127b4 	.word	0x080127b4

0800cefc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b088      	sub	sp, #32
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	4611      	mov	r1, r2
 800cf08:	461a      	mov	r2, r3
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	71fb      	strb	r3, [r7, #7]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d106      	bne.n	800cf2a <tcp_output_fill_options+0x2e>
 800cf1c:	4b12      	ldr	r3, [pc, #72]	@ (800cf68 <tcp_output_fill_options+0x6c>)
 800cf1e:	f240 7256 	movw	r2, #1878	@ 0x756
 800cf22:	4912      	ldr	r1, [pc, #72]	@ (800cf6c <tcp_output_fill_options+0x70>)
 800cf24:	4812      	ldr	r0, [pc, #72]	@ (800cf70 <tcp_output_fill_options+0x74>)
 800cf26:	f003 f923 	bl	8010170 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cf2a:	68bb      	ldr	r3, [r7, #8]
 800cf2c:	685b      	ldr	r3, [r3, #4]
 800cf2e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	3314      	adds	r3, #20
 800cf34:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cf36:	8bfb      	ldrh	r3, [r7, #30]
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	79fb      	ldrb	r3, [r7, #7]
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	f003 0304 	and.w	r3, r3, #4
 800cf44:	4413      	add	r3, r2
 800cf46:	3314      	adds	r3, #20
 800cf48:	69ba      	ldr	r2, [r7, #24]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d006      	beq.n	800cf60 <tcp_output_fill_options+0x64>
 800cf52:	4b05      	ldr	r3, [pc, #20]	@ (800cf68 <tcp_output_fill_options+0x6c>)
 800cf54:	f240 7275 	movw	r2, #1909	@ 0x775
 800cf58:	4906      	ldr	r1, [pc, #24]	@ (800cf74 <tcp_output_fill_options+0x78>)
 800cf5a:	4805      	ldr	r0, [pc, #20]	@ (800cf70 <tcp_output_fill_options+0x74>)
 800cf5c:	f003 f908 	bl	8010170 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cf60:	bf00      	nop
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	08012760 	.word	0x08012760
 800cf6c:	08012e90 	.word	0x08012e90
 800cf70:	080127b4 	.word	0x080127b4
 800cf74:	08012d88 	.word	0x08012d88

0800cf78 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08a      	sub	sp, #40	@ 0x28
 800cf7c:	af04      	add	r7, sp, #16
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
 800cf84:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cf86:	68bb      	ldr	r3, [r7, #8]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d106      	bne.n	800cf9a <tcp_output_control_segment+0x22>
 800cf8c:	4b1c      	ldr	r3, [pc, #112]	@ (800d000 <tcp_output_control_segment+0x88>)
 800cf8e:	f240 7287 	movw	r2, #1927	@ 0x787
 800cf92:	491c      	ldr	r1, [pc, #112]	@ (800d004 <tcp_output_control_segment+0x8c>)
 800cf94:	481c      	ldr	r0, [pc, #112]	@ (800d008 <tcp_output_control_segment+0x90>)
 800cf96:	f003 f8eb 	bl	8010170 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cf9a:	683a      	ldr	r2, [r7, #0]
 800cf9c:	6879      	ldr	r1, [r7, #4]
 800cf9e:	68f8      	ldr	r0, [r7, #12]
 800cfa0:	f7fe ff42 	bl	800be28 <tcp_route>
 800cfa4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d102      	bne.n	800cfb2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cfac:	23fc      	movs	r3, #252	@ 0xfc
 800cfae:	75fb      	strb	r3, [r7, #23]
 800cfb0:	e01c      	b.n	800cfec <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d006      	beq.n	800cfc6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	7adb      	ldrb	r3, [r3, #11]
 800cfbc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	7a9b      	ldrb	r3, [r3, #10]
 800cfc2:	757b      	strb	r3, [r7, #21]
 800cfc4:	e003      	b.n	800cfce <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cfc6:	23ff      	movs	r3, #255	@ 0xff
 800cfc8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cfce:	7dba      	ldrb	r2, [r7, #22]
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	9302      	str	r3, [sp, #8]
 800cfd4:	2306      	movs	r3, #6
 800cfd6:	9301      	str	r3, [sp, #4]
 800cfd8:	7d7b      	ldrb	r3, [r7, #21]
 800cfda:	9300      	str	r3, [sp, #0]
 800cfdc:	4613      	mov	r3, r2
 800cfde:	683a      	ldr	r2, [r7, #0]
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	68b8      	ldr	r0, [r7, #8]
 800cfe4:	f001 ff96 	bl	800ef14 <ip4_output_if>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cfec:	68b8      	ldr	r0, [r7, #8]
 800cfee:	f7fa fde9 	bl	8007bc4 <pbuf_free>
  return err;
 800cff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3718      	adds	r7, #24
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}
 800cffe:	bf00      	nop
 800d000:	08012760 	.word	0x08012760
 800d004:	08012eb8 	.word	0x08012eb8
 800d008:	080127b4 	.word	0x080127b4

0800d00c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800d00c:	b590      	push	{r4, r7, lr}
 800d00e:	b08b      	sub	sp, #44	@ 0x2c
 800d010:	af04      	add	r7, sp, #16
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d106      	bne.n	800d02e <tcp_rst+0x22>
 800d020:	4b1f      	ldr	r3, [pc, #124]	@ (800d0a0 <tcp_rst+0x94>)
 800d022:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800d026:	491f      	ldr	r1, [pc, #124]	@ (800d0a4 <tcp_rst+0x98>)
 800d028:	481f      	ldr	r0, [pc, #124]	@ (800d0a8 <tcp_rst+0x9c>)
 800d02a:	f003 f8a1 	bl	8010170 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800d02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d030:	2b00      	cmp	r3, #0
 800d032:	d106      	bne.n	800d042 <tcp_rst+0x36>
 800d034:	4b1a      	ldr	r3, [pc, #104]	@ (800d0a0 <tcp_rst+0x94>)
 800d036:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800d03a:	491c      	ldr	r1, [pc, #112]	@ (800d0ac <tcp_rst+0xa0>)
 800d03c:	481a      	ldr	r0, [pc, #104]	@ (800d0a8 <tcp_rst+0x9c>)
 800d03e:	f003 f897 	bl	8010170 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d042:	2300      	movs	r3, #0
 800d044:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800d046:	f246 0308 	movw	r3, #24584	@ 0x6008
 800d04a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800d04c:	7dfb      	ldrb	r3, [r7, #23]
 800d04e:	b29c      	uxth	r4, r3
 800d050:	68b8      	ldr	r0, [r7, #8]
 800d052:	f7f9 f9b6 	bl	80063c2 <lwip_htonl>
 800d056:	4602      	mov	r2, r0
 800d058:	8abb      	ldrh	r3, [r7, #20]
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	2314      	movs	r3, #20
 800d05e:	9302      	str	r3, [sp, #8]
 800d060:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800d062:	9301      	str	r3, [sp, #4]
 800d064:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d066:	9300      	str	r3, [sp, #0]
 800d068:	4613      	mov	r3, r2
 800d06a:	2200      	movs	r2, #0
 800d06c:	4621      	mov	r1, r4
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff fe94 	bl	800cd9c <tcp_output_alloc_header_common>
 800d074:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00c      	beq.n	800d096 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
 800d07e:	2200      	movs	r2, #0
 800d080:	6939      	ldr	r1, [r7, #16]
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff ff3a 	bl	800cefc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800d088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	6939      	ldr	r1, [r7, #16]
 800d08e:	68f8      	ldr	r0, [r7, #12]
 800d090:	f7ff ff72 	bl	800cf78 <tcp_output_control_segment>
 800d094:	e000      	b.n	800d098 <tcp_rst+0x8c>
    return;
 800d096:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d098:	371c      	adds	r7, #28
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd90      	pop	{r4, r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	08012760 	.word	0x08012760
 800d0a4:	08012ee4 	.word	0x08012ee4
 800d0a8:	080127b4 	.word	0x080127b4
 800d0ac:	08012f00 	.word	0x08012f00

0800d0b0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800d0b0:	b590      	push	{r4, r7, lr}
 800d0b2:	b087      	sub	sp, #28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d106      	bne.n	800d0d4 <tcp_send_empty_ack+0x24>
 800d0c6:	4b28      	ldr	r3, [pc, #160]	@ (800d168 <tcp_send_empty_ack+0xb8>)
 800d0c8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800d0cc:	4927      	ldr	r1, [pc, #156]	@ (800d16c <tcp_send_empty_ack+0xbc>)
 800d0ce:	4828      	ldr	r0, [pc, #160]	@ (800d170 <tcp_send_empty_ack+0xc0>)
 800d0d0:	f003 f84e 	bl	8010170 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d0d4:	7dfb      	ldrb	r3, [r7, #23]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	f003 0304 	and.w	r3, r3, #4
 800d0de:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800d0e0:	7d7b      	ldrb	r3, [r7, #21]
 800d0e2:	b29c      	uxth	r4, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7f9 f96a 	bl	80063c2 <lwip_htonl>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	4621      	mov	r1, r4
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff fec3 	bl	800ce80 <tcp_output_alloc_header>
 800d0fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d109      	bne.n	800d116 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	8b5b      	ldrh	r3, [r3, #26]
 800d106:	f043 0303 	orr.w	r3, r3, #3
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800d110:	f06f 0301 	mvn.w	r3, #1
 800d114:	e023      	b.n	800d15e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800d116:	7dbb      	ldrb	r3, [r7, #22]
 800d118:	7dfa      	ldrb	r2, [r7, #23]
 800d11a:	6939      	ldr	r1, [r7, #16]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f7ff feed 	bl	800cefc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	3304      	adds	r3, #4
 800d128:	6939      	ldr	r1, [r7, #16]
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f7ff ff24 	bl	800cf78 <tcp_output_control_segment>
 800d130:	4603      	mov	r3, r0
 800d132:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800d134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d007      	beq.n	800d14c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	8b5b      	ldrh	r3, [r3, #26]
 800d140:	f043 0303 	orr.w	r3, r3, #3
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	835a      	strh	r2, [r3, #26]
 800d14a:	e006      	b.n	800d15a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	8b5b      	ldrh	r3, [r3, #26]
 800d150:	f023 0303 	bic.w	r3, r3, #3
 800d154:	b29a      	uxth	r2, r3
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800d15a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	371c      	adds	r7, #28
 800d162:	46bd      	mov	sp, r7
 800d164:	bd90      	pop	{r4, r7, pc}
 800d166:	bf00      	nop
 800d168:	08012760 	.word	0x08012760
 800d16c:	08012f1c 	.word	0x08012f1c
 800d170:	080127b4 	.word	0x080127b4

0800d174 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d174:	b590      	push	{r4, r7, lr}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d17c:	2300      	movs	r3, #0
 800d17e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d106      	bne.n	800d194 <tcp_keepalive+0x20>
 800d186:	4b18      	ldr	r3, [pc, #96]	@ (800d1e8 <tcp_keepalive+0x74>)
 800d188:	f640 0224 	movw	r2, #2084	@ 0x824
 800d18c:	4917      	ldr	r1, [pc, #92]	@ (800d1ec <tcp_keepalive+0x78>)
 800d18e:	4818      	ldr	r0, [pc, #96]	@ (800d1f0 <tcp_keepalive+0x7c>)
 800d190:	f002 ffee 	bl	8010170 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d194:	7dfb      	ldrb	r3, [r7, #23]
 800d196:	b29c      	uxth	r4, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d19c:	3b01      	subs	r3, #1
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7f9 f90f 	bl	80063c2 <lwip_htonl>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff fe68 	bl	800ce80 <tcp_output_alloc_header>
 800d1b0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d102      	bne.n	800d1be <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800d1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d1bc:	e010      	b.n	800d1e0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d1be:	7dfb      	ldrb	r3, [r7, #23]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	6939      	ldr	r1, [r7, #16]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f7ff fe99 	bl	800cefc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	6939      	ldr	r1, [r7, #16]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f7ff fed0 	bl	800cf78 <tcp_output_control_segment>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d1dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	371c      	adds	r7, #28
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd90      	pop	{r4, r7, pc}
 800d1e8:	08012760 	.word	0x08012760
 800d1ec:	08012f3c 	.word	0x08012f3c
 800d1f0:	080127b4 	.word	0x080127b4

0800d1f4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d1f4:	b590      	push	{r4, r7, lr}
 800d1f6:	b08b      	sub	sp, #44	@ 0x2c
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d106      	bne.n	800d216 <tcp_zero_window_probe+0x22>
 800d208:	4b4c      	ldr	r3, [pc, #304]	@ (800d33c <tcp_zero_window_probe+0x148>)
 800d20a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800d20e:	494c      	ldr	r1, [pc, #304]	@ (800d340 <tcp_zero_window_probe+0x14c>)
 800d210:	484c      	ldr	r0, [pc, #304]	@ (800d344 <tcp_zero_window_probe+0x150>)
 800d212:	f002 ffad 	bl	8010170 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d21a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800d21c:	6a3b      	ldr	r3, [r7, #32]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d101      	bne.n	800d226 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	e086      	b.n	800d334 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d22c:	2bff      	cmp	r3, #255	@ 0xff
 800d22e:	d007      	beq.n	800d240 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d236:	3301      	adds	r3, #1
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d240:	6a3b      	ldr	r3, [r7, #32]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	899b      	ldrh	r3, [r3, #12]
 800d246:	b29b      	uxth	r3, r3
 800d248:	4618      	mov	r0, r3
 800d24a:	f7f9 f8a5 	bl	8006398 <lwip_htons>
 800d24e:	4603      	mov	r3, r0
 800d250:	b2db      	uxtb	r3, r3
 800d252:	f003 0301 	and.w	r3, r3, #1
 800d256:	2b00      	cmp	r3, #0
 800d258:	d005      	beq.n	800d266 <tcp_zero_window_probe+0x72>
 800d25a:	6a3b      	ldr	r3, [r7, #32]
 800d25c:	891b      	ldrh	r3, [r3, #8]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d101      	bne.n	800d266 <tcp_zero_window_probe+0x72>
 800d262:	2301      	movs	r3, #1
 800d264:	e000      	b.n	800d268 <tcp_zero_window_probe+0x74>
 800d266:	2300      	movs	r3, #0
 800d268:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800d26a:	7ffb      	ldrb	r3, [r7, #31]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	bf0c      	ite	eq
 800d270:	2301      	moveq	r3, #1
 800d272:	2300      	movne	r3, #0
 800d274:	b2db      	uxtb	r3, r3
 800d276:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800d278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d27c:	b299      	uxth	r1, r3
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	8bba      	ldrh	r2, [r7, #28]
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f7ff fdfa 	bl	800ce80 <tcp_output_alloc_header>
 800d28c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800d28e:	69bb      	ldr	r3, [r7, #24]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d102      	bne.n	800d29a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800d294:	f04f 33ff 	mov.w	r3, #4294967295
 800d298:	e04c      	b.n	800d334 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	685b      	ldr	r3, [r3, #4]
 800d29e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800d2a0:	7ffb      	ldrb	r3, [r7, #31]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d011      	beq.n	800d2ca <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	899b      	ldrh	r3, [r3, #12]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	b21b      	sxth	r3, r3
 800d2ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d2b2:	b21c      	sxth	r4, r3
 800d2b4:	2011      	movs	r0, #17
 800d2b6:	f7f9 f86f 	bl	8006398 <lwip_htons>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	b21b      	sxth	r3, r3
 800d2be:	4323      	orrs	r3, r4
 800d2c0:	b21b      	sxth	r3, r3
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	819a      	strh	r2, [r3, #12]
 800d2c8:	e010      	b.n	800d2ec <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	3314      	adds	r3, #20
 800d2d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	6858      	ldr	r0, [r3, #4]
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	891a      	ldrh	r2, [r3, #8]
 800d2dc:	6a3b      	ldr	r3, [r7, #32]
 800d2de:	891b      	ldrh	r3, [r3, #8]
 800d2e0:	1ad3      	subs	r3, r2, r3
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	6939      	ldr	r1, [r7, #16]
 800d2e8:	f7fa fe56 	bl	8007f98 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d2ec:	6a3b      	ldr	r3, [r7, #32]
 800d2ee:	68db      	ldr	r3, [r3, #12]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7f9 f865 	bl	80063c2 <lwip_htonl>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	1ad3      	subs	r3, r2, r3
 800d306:	2b00      	cmp	r3, #0
 800d308:	da02      	bge.n	800d310 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68fa      	ldr	r2, [r7, #12]
 800d30e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800d310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d314:	2200      	movs	r2, #0
 800d316:	69b9      	ldr	r1, [r7, #24]
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff fdef 	bl	800cefc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	3304      	adds	r3, #4
 800d324:	69b9      	ldr	r1, [r7, #24]
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f7ff fe26 	bl	800cf78 <tcp_output_control_segment>
 800d32c:	4603      	mov	r3, r0
 800d32e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800d330:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d334:	4618      	mov	r0, r3
 800d336:	372c      	adds	r7, #44	@ 0x2c
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd90      	pop	{r4, r7, pc}
 800d33c:	08012760 	.word	0x08012760
 800d340:	08012f58 	.word	0x08012f58
 800d344:	080127b4 	.word	0x080127b4

0800d348 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800d350:	f7fa ff10 	bl	8008174 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d354:	4b0a      	ldr	r3, [pc, #40]	@ (800d380 <tcpip_tcp_timer+0x38>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d103      	bne.n	800d364 <tcpip_tcp_timer+0x1c>
 800d35c:	4b09      	ldr	r3, [pc, #36]	@ (800d384 <tcpip_tcp_timer+0x3c>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d005      	beq.n	800d370 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d364:	2200      	movs	r2, #0
 800d366:	4908      	ldr	r1, [pc, #32]	@ (800d388 <tcpip_tcp_timer+0x40>)
 800d368:	20fa      	movs	r0, #250	@ 0xfa
 800d36a:	f000 f8f3 	bl	800d554 <sys_timeout>
 800d36e:	e003      	b.n	800d378 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800d370:	4b06      	ldr	r3, [pc, #24]	@ (800d38c <tcpip_tcp_timer+0x44>)
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]
  }
}
 800d376:	bf00      	nop
 800d378:	bf00      	nop
 800d37a:	3708      	adds	r7, #8
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	240031e4 	.word	0x240031e4
 800d384:	240031e8 	.word	0x240031e8
 800d388:	0800d349 	.word	0x0800d349
 800d38c:	24003230 	.word	0x24003230

0800d390 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d394:	4b0a      	ldr	r3, [pc, #40]	@ (800d3c0 <tcp_timer_needed+0x30>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10f      	bne.n	800d3bc <tcp_timer_needed+0x2c>
 800d39c:	4b09      	ldr	r3, [pc, #36]	@ (800d3c4 <tcp_timer_needed+0x34>)
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d103      	bne.n	800d3ac <tcp_timer_needed+0x1c>
 800d3a4:	4b08      	ldr	r3, [pc, #32]	@ (800d3c8 <tcp_timer_needed+0x38>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d007      	beq.n	800d3bc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800d3ac:	4b04      	ldr	r3, [pc, #16]	@ (800d3c0 <tcp_timer_needed+0x30>)
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	4905      	ldr	r1, [pc, #20]	@ (800d3cc <tcp_timer_needed+0x3c>)
 800d3b6:	20fa      	movs	r0, #250	@ 0xfa
 800d3b8:	f000 f8cc 	bl	800d554 <sys_timeout>
  }
}
 800d3bc:	bf00      	nop
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	24003230 	.word	0x24003230
 800d3c4:	240031e4 	.word	0x240031e4
 800d3c8:	240031e8 	.word	0x240031e8
 800d3cc:	0800d349 	.word	0x0800d349

0800d3d0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d3dc:	2006      	movs	r0, #6
 800d3de:	f7f9 fd0b 	bl	8006df8 <memp_malloc>
 800d3e2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800d3e4:	693b      	ldr	r3, [r7, #16]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d109      	bne.n	800d3fe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d151      	bne.n	800d494 <sys_timeout_abs+0xc4>
 800d3f0:	4b2a      	ldr	r3, [pc, #168]	@ (800d49c <sys_timeout_abs+0xcc>)
 800d3f2:	22be      	movs	r2, #190	@ 0xbe
 800d3f4:	492a      	ldr	r1, [pc, #168]	@ (800d4a0 <sys_timeout_abs+0xd0>)
 800d3f6:	482b      	ldr	r0, [pc, #172]	@ (800d4a4 <sys_timeout_abs+0xd4>)
 800d3f8:	f002 feba 	bl	8010170 <iprintf>
    return;
 800d3fc:	e04a      	b.n	800d494 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2200      	movs	r2, #0
 800d402:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	68ba      	ldr	r2, [r7, #8]
 800d408:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	687a      	ldr	r2, [r7, #4]
 800d40e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d416:	4b24      	ldr	r3, [pc, #144]	@ (800d4a8 <sys_timeout_abs+0xd8>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d103      	bne.n	800d426 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d41e:	4a22      	ldr	r2, [pc, #136]	@ (800d4a8 <sys_timeout_abs+0xd8>)
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	6013      	str	r3, [r2, #0]
    return;
 800d424:	e037      	b.n	800d496 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	685a      	ldr	r2, [r3, #4]
 800d42a:	4b1f      	ldr	r3, [pc, #124]	@ (800d4a8 <sys_timeout_abs+0xd8>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	0fdb      	lsrs	r3, r3, #31
 800d434:	f003 0301 	and.w	r3, r3, #1
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d007      	beq.n	800d44e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d43e:	4b1a      	ldr	r3, [pc, #104]	@ (800d4a8 <sys_timeout_abs+0xd8>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d446:	4a18      	ldr	r2, [pc, #96]	@ (800d4a8 <sys_timeout_abs+0xd8>)
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	6013      	str	r3, [r2, #0]
 800d44c:	e023      	b.n	800d496 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d44e:	4b16      	ldr	r3, [pc, #88]	@ (800d4a8 <sys_timeout_abs+0xd8>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	e01a      	b.n	800d48c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00b      	beq.n	800d476 <sys_timeout_abs+0xa6>
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	685a      	ldr	r2, [r3, #4]
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	685b      	ldr	r3, [r3, #4]
 800d468:	1ad3      	subs	r3, r2, r3
 800d46a:	0fdb      	lsrs	r3, r3, #31
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	b2db      	uxtb	r3, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d007      	beq.n	800d486 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	693a      	ldr	r2, [r7, #16]
 800d482:	601a      	str	r2, [r3, #0]
        break;
 800d484:	e007      	b.n	800d496 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	617b      	str	r3, [r7, #20]
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1e1      	bne.n	800d456 <sys_timeout_abs+0x86>
 800d492:	e000      	b.n	800d496 <sys_timeout_abs+0xc6>
    return;
 800d494:	bf00      	nop
      }
    }
  }
}
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	08012f7c 	.word	0x08012f7c
 800d4a0:	08012fb0 	.word	0x08012fb0
 800d4a4:	08012ff0 	.word	0x08012ff0
 800d4a8:	24003228 	.word	0x24003228

0800d4ac <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	4798      	blx	r3

  now = sys_now();
 800d4be:	f7f8 fd23 	bl	8005f08 <sys_now>
 800d4c2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	4b0f      	ldr	r3, [pc, #60]	@ (800d508 <lwip_cyclic_timer+0x5c>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4413      	add	r3, r2
 800d4ce:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	0fdb      	lsrs	r3, r3, #31
 800d4d8:	f003 0301 	and.w	r3, r3, #1
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d009      	beq.n	800d4f6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	681a      	ldr	r2, [r3, #0]
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	4907      	ldr	r1, [pc, #28]	@ (800d50c <lwip_cyclic_timer+0x60>)
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7ff ff6e 	bl	800d3d0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d4f4:	e004      	b.n	800d500 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	4904      	ldr	r1, [pc, #16]	@ (800d50c <lwip_cyclic_timer+0x60>)
 800d4fa:	68f8      	ldr	r0, [r7, #12]
 800d4fc:	f7ff ff68 	bl	800d3d0 <sys_timeout_abs>
}
 800d500:	bf00      	nop
 800d502:	3718      	adds	r7, #24
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	2400322c 	.word	0x2400322c
 800d50c:	0800d4ad 	.word	0x0800d4ad

0800d510 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d516:	2301      	movs	r3, #1
 800d518:	607b      	str	r3, [r7, #4]
 800d51a:	e00e      	b.n	800d53a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d51c:	4a0b      	ldr	r2, [pc, #44]	@ (800d54c <sys_timeouts_init+0x3c>)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	4a08      	ldr	r2, [pc, #32]	@ (800d54c <sys_timeouts_init+0x3c>)
 800d52a:	4413      	add	r3, r2
 800d52c:	461a      	mov	r2, r3
 800d52e:	4908      	ldr	r1, [pc, #32]	@ (800d550 <sys_timeouts_init+0x40>)
 800d530:	f000 f810 	bl	800d554 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3301      	adds	r3, #1
 800d538:	607b      	str	r3, [r7, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2b02      	cmp	r3, #2
 800d53e:	d9ed      	bls.n	800d51c <sys_timeouts_init+0xc>
  }
}
 800d540:	bf00      	nop
 800d542:	bf00      	nop
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	08013b78 	.word	0x08013b78
 800d550:	0800d4ad 	.word	0x0800d4ad

0800d554 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d566:	d306      	bcc.n	800d576 <sys_timeout+0x22>
 800d568:	4b0a      	ldr	r3, [pc, #40]	@ (800d594 <sys_timeout+0x40>)
 800d56a:	f240 1229 	movw	r2, #297	@ 0x129
 800d56e:	490a      	ldr	r1, [pc, #40]	@ (800d598 <sys_timeout+0x44>)
 800d570:	480a      	ldr	r0, [pc, #40]	@ (800d59c <sys_timeout+0x48>)
 800d572:	f002 fdfd 	bl	8010170 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d576:	f7f8 fcc7 	bl	8005f08 <sys_now>
 800d57a:	4602      	mov	r2, r0
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4413      	add	r3, r2
 800d580:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	68b9      	ldr	r1, [r7, #8]
 800d586:	6978      	ldr	r0, [r7, #20]
 800d588:	f7ff ff22 	bl	800d3d0 <sys_timeout_abs>
#endif
}
 800d58c:	bf00      	nop
 800d58e:	3718      	adds	r7, #24
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}
 800d594:	08012f7c 	.word	0x08012f7c
 800d598:	08013018 	.word	0x08013018
 800d59c:	08012ff0 	.word	0x08012ff0

0800d5a0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d5a6:	f7f8 fcaf 	bl	8005f08 <sys_now>
 800d5aa:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d5ac:	4b1a      	ldr	r3, [pc, #104]	@ (800d618 <sys_check_timeouts+0x78>)
 800d5ae:	781b      	ldrb	r3, [r3, #0]
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <sys_check_timeouts+0x1a>
 800d5b6:	f7f9 ffcb 	bl	8007550 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d5ba:	4b18      	ldr	r3, [pc, #96]	@ (800d61c <sys_check_timeouts+0x7c>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d022      	beq.n	800d60c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	0fdb      	lsrs	r3, r3, #31
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d11a      	bne.n	800d610 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	4a0f      	ldr	r2, [pc, #60]	@ (800d61c <sys_check_timeouts+0x7c>)
 800d5e0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	689b      	ldr	r3, [r3, #8]
 800d5e6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	4a0b      	ldr	r2, [pc, #44]	@ (800d620 <sys_check_timeouts+0x80>)
 800d5f4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d5f6:	68b9      	ldr	r1, [r7, #8]
 800d5f8:	2006      	movs	r0, #6
 800d5fa:	f7f9 fc6d 	bl	8006ed8 <memp_free>
    if (handler != NULL) {
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d0d3      	beq.n	800d5ac <sys_check_timeouts+0xc>
      handler(arg);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6838      	ldr	r0, [r7, #0]
 800d608:	4798      	blx	r3
  do {
 800d60a:	e7cf      	b.n	800d5ac <sys_check_timeouts+0xc>
      return;
 800d60c:	bf00      	nop
 800d60e:	e000      	b.n	800d612 <sys_check_timeouts+0x72>
      return;
 800d610:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}
 800d618:	240031d5 	.word	0x240031d5
 800d61c:	24003228 	.word	0x24003228
 800d620:	2400322c 	.word	0x2400322c

0800d624 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d628:	f002 fca2 	bl	800ff70 <rand>
 800d62c:	4603      	mov	r3, r0
 800d62e:	b29b      	uxth	r3, r3
 800d630:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d634:	b29b      	uxth	r3, r3
 800d636:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d63a:	b29a      	uxth	r2, r3
 800d63c:	4b01      	ldr	r3, [pc, #4]	@ (800d644 <udp_init+0x20>)
 800d63e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d640:	bf00      	nop
 800d642:	bd80      	pop	{r7, pc}
 800d644:	24000030 	.word	0x24000030

0800d648 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b084      	sub	sp, #16
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	4613      	mov	r3, r2
 800d654:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d105      	bne.n	800d668 <udp_input_local_match+0x20>
 800d65c:	4b27      	ldr	r3, [pc, #156]	@ (800d6fc <udp_input_local_match+0xb4>)
 800d65e:	2287      	movs	r2, #135	@ 0x87
 800d660:	4927      	ldr	r1, [pc, #156]	@ (800d700 <udp_input_local_match+0xb8>)
 800d662:	4828      	ldr	r0, [pc, #160]	@ (800d704 <udp_input_local_match+0xbc>)
 800d664:	f002 fd84 	bl	8010170 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d105      	bne.n	800d67a <udp_input_local_match+0x32>
 800d66e:	4b23      	ldr	r3, [pc, #140]	@ (800d6fc <udp_input_local_match+0xb4>)
 800d670:	2288      	movs	r2, #136	@ 0x88
 800d672:	4925      	ldr	r1, [pc, #148]	@ (800d708 <udp_input_local_match+0xc0>)
 800d674:	4823      	ldr	r0, [pc, #140]	@ (800d704 <udp_input_local_match+0xbc>)
 800d676:	f002 fd7b 	bl	8010170 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	7a1b      	ldrb	r3, [r3, #8]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00b      	beq.n	800d69a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	7a1a      	ldrb	r2, [r3, #8]
 800d686:	4b21      	ldr	r3, [pc, #132]	@ (800d70c <udp_input_local_match+0xc4>)
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d68e:	3301      	adds	r3, #1
 800d690:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d692:	429a      	cmp	r2, r3
 800d694:	d001      	beq.n	800d69a <udp_input_local_match+0x52>
    return 0;
 800d696:	2300      	movs	r3, #0
 800d698:	e02b      	b.n	800d6f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d69a:	79fb      	ldrb	r3, [r7, #7]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d018      	beq.n	800d6d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d013      	beq.n	800d6ce <udp_input_local_match+0x86>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00f      	beq.n	800d6ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d6ae:	4b17      	ldr	r3, [pc, #92]	@ (800d70c <udp_input_local_match+0xc4>)
 800d6b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b6:	d00a      	beq.n	800d6ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	4b13      	ldr	r3, [pc, #76]	@ (800d70c <udp_input_local_match+0xc4>)
 800d6be:	695b      	ldr	r3, [r3, #20]
 800d6c0:	405a      	eors	r2, r3
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d110      	bne.n	800d6f0 <udp_input_local_match+0xa8>
          return 1;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e00f      	b.n	800d6f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d009      	beq.n	800d6ec <udp_input_local_match+0xa4>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d005      	beq.n	800d6ec <udp_input_local_match+0xa4>
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	4b09      	ldr	r3, [pc, #36]	@ (800d70c <udp_input_local_match+0xc4>)
 800d6e6:	695b      	ldr	r3, [r3, #20]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d101      	bne.n	800d6f0 <udp_input_local_match+0xa8>
        return 1;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e000      	b.n	800d6f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d6f0:	2300      	movs	r3, #0
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3710      	adds	r7, #16
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	08013064 	.word	0x08013064
 800d700:	08013094 	.word	0x08013094
 800d704:	080130b8 	.word	0x080130b8
 800d708:	080130e0 	.word	0x080130e0
 800d70c:	240002bc 	.word	0x240002bc

0800d710 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d710:	b590      	push	{r4, r7, lr}
 800d712:	b08d      	sub	sp, #52	@ 0x34
 800d714:	af02      	add	r7, sp, #8
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d71a:	2300      	movs	r3, #0
 800d71c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d105      	bne.n	800d730 <udp_input+0x20>
 800d724:	4b7c      	ldr	r3, [pc, #496]	@ (800d918 <udp_input+0x208>)
 800d726:	22cf      	movs	r2, #207	@ 0xcf
 800d728:	497c      	ldr	r1, [pc, #496]	@ (800d91c <udp_input+0x20c>)
 800d72a:	487d      	ldr	r0, [pc, #500]	@ (800d920 <udp_input+0x210>)
 800d72c:	f002 fd20 	bl	8010170 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d105      	bne.n	800d742 <udp_input+0x32>
 800d736:	4b78      	ldr	r3, [pc, #480]	@ (800d918 <udp_input+0x208>)
 800d738:	22d0      	movs	r2, #208	@ 0xd0
 800d73a:	497a      	ldr	r1, [pc, #488]	@ (800d924 <udp_input+0x214>)
 800d73c:	4878      	ldr	r0, [pc, #480]	@ (800d920 <udp_input+0x210>)
 800d73e:	f002 fd17 	bl	8010170 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	895b      	ldrh	r3, [r3, #10]
 800d746:	2b07      	cmp	r3, #7
 800d748:	d803      	bhi.n	800d752 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7fa fa3a 	bl	8007bc4 <pbuf_free>
    goto end;
 800d750:	e0de      	b.n	800d910 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d758:	4b73      	ldr	r3, [pc, #460]	@ (800d928 <udp_input+0x218>)
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	4a72      	ldr	r2, [pc, #456]	@ (800d928 <udp_input+0x218>)
 800d75e:	6812      	ldr	r2, [r2, #0]
 800d760:	4611      	mov	r1, r2
 800d762:	4618      	mov	r0, r3
 800d764:	f001 fcae 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800d768:	4603      	mov	r3, r0
 800d76a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	b29b      	uxth	r3, r3
 800d772:	4618      	mov	r0, r3
 800d774:	f7f8 fe10 	bl	8006398 <lwip_htons>
 800d778:	4603      	mov	r3, r0
 800d77a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	885b      	ldrh	r3, [r3, #2]
 800d780:	b29b      	uxth	r3, r3
 800d782:	4618      	mov	r0, r3
 800d784:	f7f8 fe08 	bl	8006398 <lwip_htons>
 800d788:	4603      	mov	r3, r0
 800d78a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d78c:	2300      	movs	r3, #0
 800d78e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800d790:	2300      	movs	r3, #0
 800d792:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d794:	2300      	movs	r3, #0
 800d796:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d798:	4b64      	ldr	r3, [pc, #400]	@ (800d92c <udp_input+0x21c>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d79e:	e054      	b.n	800d84a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7a2:	8a5b      	ldrh	r3, [r3, #18]
 800d7a4:	89fa      	ldrh	r2, [r7, #14]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d14a      	bne.n	800d840 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d7aa:	7cfb      	ldrb	r3, [r7, #19]
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	6839      	ldr	r1, [r7, #0]
 800d7b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d7b2:	f7ff ff49 	bl	800d648 <udp_input_local_match>
 800d7b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d041      	beq.n	800d840 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7be:	7c1b      	ldrb	r3, [r3, #16]
 800d7c0:	f003 0304 	and.w	r3, r3, #4
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d11d      	bne.n	800d804 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d102      	bne.n	800d7d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d0:	61fb      	str	r3, [r7, #28]
 800d7d2:	e017      	b.n	800d804 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d7d4:	7cfb      	ldrb	r3, [r7, #19]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d014      	beq.n	800d804 <udp_input+0xf4>
 800d7da:	4b53      	ldr	r3, [pc, #332]	@ (800d928 <udp_input+0x218>)
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e2:	d10f      	bne.n	800d804 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d7e4:	69fb      	ldr	r3, [r7, #28]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d008      	beq.n	800d804 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d7f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d101      	bne.n	800d804 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d802:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d806:	8a9b      	ldrh	r3, [r3, #20]
 800d808:	8a3a      	ldrh	r2, [r7, #16]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d118      	bne.n	800d840 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d810:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d812:	2b00      	cmp	r3, #0
 800d814:	d005      	beq.n	800d822 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d818:	685a      	ldr	r2, [r3, #4]
 800d81a:	4b43      	ldr	r3, [pc, #268]	@ (800d928 <udp_input+0x218>)
 800d81c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d81e:	429a      	cmp	r2, r3
 800d820:	d10e      	bne.n	800d840 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d014      	beq.n	800d852 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82a:	68da      	ldr	r2, [r3, #12]
 800d82c:	6a3b      	ldr	r3, [r7, #32]
 800d82e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d830:	4b3e      	ldr	r3, [pc, #248]	@ (800d92c <udp_input+0x21c>)
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d836:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d838:	4a3c      	ldr	r2, [pc, #240]	@ (800d92c <udp_input+0x21c>)
 800d83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d83e:	e008      	b.n	800d852 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d842:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d846:	68db      	ldr	r3, [r3, #12]
 800d848:	627b      	str	r3, [r7, #36]	@ 0x24
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d1a7      	bne.n	800d7a0 <udp_input+0x90>
 800d850:	e000      	b.n	800d854 <udp_input+0x144>
        break;
 800d852:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <udp_input+0x14e>
    pcb = uncon_pcb;
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d860:	2b00      	cmp	r3, #0
 800d862:	d002      	beq.n	800d86a <udp_input+0x15a>
    for_us = 1;
 800d864:	2301      	movs	r3, #1
 800d866:	76fb      	strb	r3, [r7, #27]
 800d868:	e00a      	b.n	800d880 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	3304      	adds	r3, #4
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	4b2d      	ldr	r3, [pc, #180]	@ (800d928 <udp_input+0x218>)
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	429a      	cmp	r2, r3
 800d876:	bf0c      	ite	eq
 800d878:	2301      	moveq	r3, #1
 800d87a:	2300      	movne	r3, #0
 800d87c:	b2db      	uxtb	r3, r3
 800d87e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d880:	7efb      	ldrb	r3, [r7, #27]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d041      	beq.n	800d90a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d886:	2108      	movs	r1, #8
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7fa f915 	bl	8007ab8 <pbuf_remove_header>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00a      	beq.n	800d8aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d894:	4b20      	ldr	r3, [pc, #128]	@ (800d918 <udp_input+0x208>)
 800d896:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800d89a:	4925      	ldr	r1, [pc, #148]	@ (800d930 <udp_input+0x220>)
 800d89c:	4820      	ldr	r0, [pc, #128]	@ (800d920 <udp_input+0x210>)
 800d89e:	f002 fc67 	bl	8010170 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fa f98e 	bl	8007bc4 <pbuf_free>
      goto end;
 800d8a8:	e032      	b.n	800d910 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d012      	beq.n	800d8d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8ba:	699c      	ldr	r4, [r3, #24]
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	69d8      	ldr	r0, [r3, #28]
 800d8c0:	8a3b      	ldrh	r3, [r7, #16]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	4b1b      	ldr	r3, [pc, #108]	@ (800d934 <udp_input+0x224>)
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d8ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d8cc:	e021      	b.n	800d912 <udp_input+0x202>
        pbuf_free(p);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7fa f978 	bl	8007bc4 <pbuf_free>
        goto end;
 800d8d4:	e01c      	b.n	800d910 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d8d6:	7cfb      	ldrb	r3, [r7, #19]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d112      	bne.n	800d902 <udp_input+0x1f2>
 800d8dc:	4b12      	ldr	r3, [pc, #72]	@ (800d928 <udp_input+0x218>)
 800d8de:	695b      	ldr	r3, [r3, #20]
 800d8e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8e4:	2be0      	cmp	r3, #224	@ 0xe0
 800d8e6:	d00c      	beq.n	800d902 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d8e8:	4b0f      	ldr	r3, [pc, #60]	@ (800d928 <udp_input+0x218>)
 800d8ea:	899b      	ldrh	r3, [r3, #12]
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	b21b      	sxth	r3, r3
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7fa f952 	bl	8007b9e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d8fa:	2103      	movs	r1, #3
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f001 f8b7 	bl	800ea70 <icmp_dest_unreach>
      pbuf_free(p);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7fa f95e 	bl	8007bc4 <pbuf_free>
  return;
 800d908:	e003      	b.n	800d912 <udp_input+0x202>
    pbuf_free(p);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7fa f95a 	bl	8007bc4 <pbuf_free>
  return;
 800d910:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d912:	372c      	adds	r7, #44	@ 0x2c
 800d914:	46bd      	mov	sp, r7
 800d916:	bd90      	pop	{r4, r7, pc}
 800d918:	08013064 	.word	0x08013064
 800d91c:	08013108 	.word	0x08013108
 800d920:	080130b8 	.word	0x080130b8
 800d924:	08013120 	.word	0x08013120
 800d928:	240002bc 	.word	0x240002bc
 800d92c:	24003234 	.word	0x24003234
 800d930:	0801313c 	.word	0x0801313c
 800d934:	240002cc 	.word	0x240002cc

0800d938 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d01e      	beq.n	800d986 <udp_netif_ip_addr_changed+0x4e>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d01a      	beq.n	800d986 <udp_netif_ip_addr_changed+0x4e>
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d017      	beq.n	800d986 <udp_netif_ip_addr_changed+0x4e>
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d013      	beq.n	800d986 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d95e:	4b0d      	ldr	r3, [pc, #52]	@ (800d994 <udp_netif_ip_addr_changed+0x5c>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	60fb      	str	r3, [r7, #12]
 800d964:	e00c      	b.n	800d980 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d103      	bne.n	800d97a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	681a      	ldr	r2, [r3, #0]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1ef      	bne.n	800d966 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d986:	bf00      	nop
 800d988:	3714      	adds	r7, #20
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr
 800d992:	bf00      	nop
 800d994:	24003234 	.word	0x24003234

0800d998 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d9a0:	4915      	ldr	r1, [pc, #84]	@ (800d9f8 <etharp_free_entry+0x60>)
 800d9a2:	687a      	ldr	r2, [r7, #4]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	4413      	add	r3, r2
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	440b      	add	r3, r1
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d013      	beq.n	800d9dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d9b4:	4910      	ldr	r1, [pc, #64]	@ (800d9f8 <etharp_free_entry+0x60>)
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	005b      	lsls	r3, r3, #1
 800d9bc:	4413      	add	r3, r2
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	440b      	add	r3, r1
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7fa f8fd 	bl	8007bc4 <pbuf_free>
    arp_table[i].q = NULL;
 800d9ca:	490b      	ldr	r1, [pc, #44]	@ (800d9f8 <etharp_free_entry+0x60>)
 800d9cc:	687a      	ldr	r2, [r7, #4]
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	005b      	lsls	r3, r3, #1
 800d9d2:	4413      	add	r3, r2
 800d9d4:	00db      	lsls	r3, r3, #3
 800d9d6:	440b      	add	r3, r1
 800d9d8:	2200      	movs	r2, #0
 800d9da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d9dc:	4906      	ldr	r1, [pc, #24]	@ (800d9f8 <etharp_free_entry+0x60>)
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	005b      	lsls	r3, r3, #1
 800d9e4:	4413      	add	r3, r2
 800d9e6:	00db      	lsls	r3, r3, #3
 800d9e8:	440b      	add	r3, r1
 800d9ea:	3314      	adds	r3, #20
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d9f0:	bf00      	nop
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	24003238 	.word	0x24003238

0800d9fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da02:	2300      	movs	r3, #0
 800da04:	607b      	str	r3, [r7, #4]
 800da06:	e096      	b.n	800db36 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800da08:	494f      	ldr	r1, [pc, #316]	@ (800db48 <etharp_tmr+0x14c>)
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	4613      	mov	r3, r2
 800da0e:	005b      	lsls	r3, r3, #1
 800da10:	4413      	add	r3, r2
 800da12:	00db      	lsls	r3, r3, #3
 800da14:	440b      	add	r3, r1
 800da16:	3314      	adds	r3, #20
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800da1c:	78fb      	ldrb	r3, [r7, #3]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	f000 8086 	beq.w	800db30 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800da24:	4948      	ldr	r1, [pc, #288]	@ (800db48 <etharp_tmr+0x14c>)
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	4613      	mov	r3, r2
 800da2a:	005b      	lsls	r3, r3, #1
 800da2c:	4413      	add	r3, r2
 800da2e:	00db      	lsls	r3, r3, #3
 800da30:	440b      	add	r3, r1
 800da32:	3312      	adds	r3, #18
 800da34:	881b      	ldrh	r3, [r3, #0]
 800da36:	3301      	adds	r3, #1
 800da38:	b298      	uxth	r0, r3
 800da3a:	4943      	ldr	r1, [pc, #268]	@ (800db48 <etharp_tmr+0x14c>)
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	4613      	mov	r3, r2
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	4413      	add	r3, r2
 800da44:	00db      	lsls	r3, r3, #3
 800da46:	440b      	add	r3, r1
 800da48:	3312      	adds	r3, #18
 800da4a:	4602      	mov	r2, r0
 800da4c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800da4e:	493e      	ldr	r1, [pc, #248]	@ (800db48 <etharp_tmr+0x14c>)
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	4613      	mov	r3, r2
 800da54:	005b      	lsls	r3, r3, #1
 800da56:	4413      	add	r3, r2
 800da58:	00db      	lsls	r3, r3, #3
 800da5a:	440b      	add	r3, r1
 800da5c:	3312      	adds	r3, #18
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800da64:	d215      	bcs.n	800da92 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800da66:	4938      	ldr	r1, [pc, #224]	@ (800db48 <etharp_tmr+0x14c>)
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	4613      	mov	r3, r2
 800da6c:	005b      	lsls	r3, r3, #1
 800da6e:	4413      	add	r3, r2
 800da70:	00db      	lsls	r3, r3, #3
 800da72:	440b      	add	r3, r1
 800da74:	3314      	adds	r3, #20
 800da76:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d10e      	bne.n	800da9a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800da7c:	4932      	ldr	r1, [pc, #200]	@ (800db48 <etharp_tmr+0x14c>)
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	4613      	mov	r3, r2
 800da82:	005b      	lsls	r3, r3, #1
 800da84:	4413      	add	r3, r2
 800da86:	00db      	lsls	r3, r3, #3
 800da88:	440b      	add	r3, r1
 800da8a:	3312      	adds	r3, #18
 800da8c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800da8e:	2b04      	cmp	r3, #4
 800da90:	d903      	bls.n	800da9a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7ff ff80 	bl	800d998 <etharp_free_entry>
 800da98:	e04a      	b.n	800db30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800da9a:	492b      	ldr	r1, [pc, #172]	@ (800db48 <etharp_tmr+0x14c>)
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	4613      	mov	r3, r2
 800daa0:	005b      	lsls	r3, r3, #1
 800daa2:	4413      	add	r3, r2
 800daa4:	00db      	lsls	r3, r3, #3
 800daa6:	440b      	add	r3, r1
 800daa8:	3314      	adds	r3, #20
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b03      	cmp	r3, #3
 800daae:	d10a      	bne.n	800dac6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800dab0:	4925      	ldr	r1, [pc, #148]	@ (800db48 <etharp_tmr+0x14c>)
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	4613      	mov	r3, r2
 800dab6:	005b      	lsls	r3, r3, #1
 800dab8:	4413      	add	r3, r2
 800daba:	00db      	lsls	r3, r3, #3
 800dabc:	440b      	add	r3, r1
 800dabe:	3314      	adds	r3, #20
 800dac0:	2204      	movs	r2, #4
 800dac2:	701a      	strb	r2, [r3, #0]
 800dac4:	e034      	b.n	800db30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800dac6:	4920      	ldr	r1, [pc, #128]	@ (800db48 <etharp_tmr+0x14c>)
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	4613      	mov	r3, r2
 800dacc:	005b      	lsls	r3, r3, #1
 800dace:	4413      	add	r3, r2
 800dad0:	00db      	lsls	r3, r3, #3
 800dad2:	440b      	add	r3, r1
 800dad4:	3314      	adds	r3, #20
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b04      	cmp	r3, #4
 800dada:	d10a      	bne.n	800daf2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800dadc:	491a      	ldr	r1, [pc, #104]	@ (800db48 <etharp_tmr+0x14c>)
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	4613      	mov	r3, r2
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	4413      	add	r3, r2
 800dae6:	00db      	lsls	r3, r3, #3
 800dae8:	440b      	add	r3, r1
 800daea:	3314      	adds	r3, #20
 800daec:	2202      	movs	r2, #2
 800daee:	701a      	strb	r2, [r3, #0]
 800daf0:	e01e      	b.n	800db30 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800daf2:	4915      	ldr	r1, [pc, #84]	@ (800db48 <etharp_tmr+0x14c>)
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	4613      	mov	r3, r2
 800daf8:	005b      	lsls	r3, r3, #1
 800dafa:	4413      	add	r3, r2
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	440b      	add	r3, r1
 800db00:	3314      	adds	r3, #20
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	2b01      	cmp	r3, #1
 800db06:	d113      	bne.n	800db30 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800db08:	490f      	ldr	r1, [pc, #60]	@ (800db48 <etharp_tmr+0x14c>)
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	4613      	mov	r3, r2
 800db0e:	005b      	lsls	r3, r3, #1
 800db10:	4413      	add	r3, r2
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	440b      	add	r3, r1
 800db16:	3308      	adds	r3, #8
 800db18:	6818      	ldr	r0, [r3, #0]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	4613      	mov	r3, r2
 800db1e:	005b      	lsls	r3, r3, #1
 800db20:	4413      	add	r3, r2
 800db22:	00db      	lsls	r3, r3, #3
 800db24:	4a08      	ldr	r2, [pc, #32]	@ (800db48 <etharp_tmr+0x14c>)
 800db26:	4413      	add	r3, r2
 800db28:	3304      	adds	r3, #4
 800db2a:	4619      	mov	r1, r3
 800db2c:	f000 fe6e 	bl	800e80c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	3301      	adds	r3, #1
 800db34:	607b      	str	r3, [r7, #4]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b09      	cmp	r3, #9
 800db3a:	f77f af65 	ble.w	800da08 <etharp_tmr+0xc>
      }
    }
  }
}
 800db3e:	bf00      	nop
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	24003238 	.word	0x24003238

0800db4c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b08a      	sub	sp, #40	@ 0x28
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	460b      	mov	r3, r1
 800db56:	607a      	str	r2, [r7, #4]
 800db58:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800db5a:	230a      	movs	r3, #10
 800db5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800db5e:	230a      	movs	r3, #10
 800db60:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800db62:	230a      	movs	r3, #10
 800db64:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800db6a:	230a      	movs	r3, #10
 800db6c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	83bb      	strh	r3, [r7, #28]
 800db72:	2300      	movs	r3, #0
 800db74:	837b      	strh	r3, [r7, #26]
 800db76:	2300      	movs	r3, #0
 800db78:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db7a:	2300      	movs	r3, #0
 800db7c:	843b      	strh	r3, [r7, #32]
 800db7e:	e0ae      	b.n	800dcde <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800db80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800db84:	49a6      	ldr	r1, [pc, #664]	@ (800de20 <etharp_find_entry+0x2d4>)
 800db86:	4613      	mov	r3, r2
 800db88:	005b      	lsls	r3, r3, #1
 800db8a:	4413      	add	r3, r2
 800db8c:	00db      	lsls	r3, r3, #3
 800db8e:	440b      	add	r3, r1
 800db90:	3314      	adds	r3, #20
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800db96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800db9a:	2b0a      	cmp	r3, #10
 800db9c:	d105      	bne.n	800dbaa <etharp_find_entry+0x5e>
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d102      	bne.n	800dbaa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800dba4:	8c3b      	ldrh	r3, [r7, #32]
 800dba6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dba8:	e095      	b.n	800dcd6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800dbaa:	7dfb      	ldrb	r3, [r7, #23]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	f000 8092 	beq.w	800dcd6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d009      	beq.n	800dbcc <etharp_find_entry+0x80>
 800dbb8:	7dfb      	ldrb	r3, [r7, #23]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d806      	bhi.n	800dbcc <etharp_find_entry+0x80>
 800dbbe:	4b99      	ldr	r3, [pc, #612]	@ (800de24 <etharp_find_entry+0x2d8>)
 800dbc0:	f240 1223 	movw	r2, #291	@ 0x123
 800dbc4:	4998      	ldr	r1, [pc, #608]	@ (800de28 <etharp_find_entry+0x2dc>)
 800dbc6:	4899      	ldr	r0, [pc, #612]	@ (800de2c <etharp_find_entry+0x2e0>)
 800dbc8:	f002 fad2 	bl	8010170 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d020      	beq.n	800dc14 <etharp_find_entry+0xc8>
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6819      	ldr	r1, [r3, #0]
 800dbd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dbda:	4891      	ldr	r0, [pc, #580]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dbdc:	4613      	mov	r3, r2
 800dbde:	005b      	lsls	r3, r3, #1
 800dbe0:	4413      	add	r3, r2
 800dbe2:	00db      	lsls	r3, r3, #3
 800dbe4:	4403      	add	r3, r0
 800dbe6:	3304      	adds	r3, #4
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	4299      	cmp	r1, r3
 800dbec:	d112      	bne.n	800dc14 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00c      	beq.n	800dc0e <etharp_find_entry+0xc2>
 800dbf4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dbf8:	4989      	ldr	r1, [pc, #548]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	005b      	lsls	r3, r3, #1
 800dbfe:	4413      	add	r3, r2
 800dc00:	00db      	lsls	r3, r3, #3
 800dc02:	440b      	add	r3, r1
 800dc04:	3308      	adds	r3, #8
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	687a      	ldr	r2, [r7, #4]
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d102      	bne.n	800dc14 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800dc0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dc12:	e100      	b.n	800de16 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800dc14:	7dfb      	ldrb	r3, [r7, #23]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d140      	bne.n	800dc9c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800dc1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc1e:	4980      	ldr	r1, [pc, #512]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dc20:	4613      	mov	r3, r2
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	4413      	add	r3, r2
 800dc26:	00db      	lsls	r3, r3, #3
 800dc28:	440b      	add	r3, r1
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d01a      	beq.n	800dc66 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800dc30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc34:	497a      	ldr	r1, [pc, #488]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dc36:	4613      	mov	r3, r2
 800dc38:	005b      	lsls	r3, r3, #1
 800dc3a:	4413      	add	r3, r2
 800dc3c:	00db      	lsls	r3, r3, #3
 800dc3e:	440b      	add	r3, r1
 800dc40:	3312      	adds	r3, #18
 800dc42:	881b      	ldrh	r3, [r3, #0]
 800dc44:	8bba      	ldrh	r2, [r7, #28]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d845      	bhi.n	800dcd6 <etharp_find_entry+0x18a>
            old_queue = i;
 800dc4a:	8c3b      	ldrh	r3, [r7, #32]
 800dc4c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800dc4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc52:	4973      	ldr	r1, [pc, #460]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dc54:	4613      	mov	r3, r2
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	4413      	add	r3, r2
 800dc5a:	00db      	lsls	r3, r3, #3
 800dc5c:	440b      	add	r3, r1
 800dc5e:	3312      	adds	r3, #18
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	83bb      	strh	r3, [r7, #28]
 800dc64:	e037      	b.n	800dcd6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800dc66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc6a:	496d      	ldr	r1, [pc, #436]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	005b      	lsls	r3, r3, #1
 800dc70:	4413      	add	r3, r2
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	440b      	add	r3, r1
 800dc76:	3312      	adds	r3, #18
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	8b7a      	ldrh	r2, [r7, #26]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d82a      	bhi.n	800dcd6 <etharp_find_entry+0x18a>
            old_pending = i;
 800dc80:	8c3b      	ldrh	r3, [r7, #32]
 800dc82:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800dc84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dc88:	4965      	ldr	r1, [pc, #404]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dc8a:	4613      	mov	r3, r2
 800dc8c:	005b      	lsls	r3, r3, #1
 800dc8e:	4413      	add	r3, r2
 800dc90:	00db      	lsls	r3, r3, #3
 800dc92:	440b      	add	r3, r1
 800dc94:	3312      	adds	r3, #18
 800dc96:	881b      	ldrh	r3, [r3, #0]
 800dc98:	837b      	strh	r3, [r7, #26]
 800dc9a:	e01c      	b.n	800dcd6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800dc9c:	7dfb      	ldrb	r3, [r7, #23]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d919      	bls.n	800dcd6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800dca2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dca6:	495e      	ldr	r1, [pc, #376]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dca8:	4613      	mov	r3, r2
 800dcaa:	005b      	lsls	r3, r3, #1
 800dcac:	4413      	add	r3, r2
 800dcae:	00db      	lsls	r3, r3, #3
 800dcb0:	440b      	add	r3, r1
 800dcb2:	3312      	adds	r3, #18
 800dcb4:	881b      	ldrh	r3, [r3, #0]
 800dcb6:	8b3a      	ldrh	r2, [r7, #24]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d80c      	bhi.n	800dcd6 <etharp_find_entry+0x18a>
            old_stable = i;
 800dcbc:	8c3b      	ldrh	r3, [r7, #32]
 800dcbe:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800dcc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dcc4:	4956      	ldr	r1, [pc, #344]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	005b      	lsls	r3, r3, #1
 800dcca:	4413      	add	r3, r2
 800dccc:	00db      	lsls	r3, r3, #3
 800dcce:	440b      	add	r3, r1
 800dcd0:	3312      	adds	r3, #18
 800dcd2:	881b      	ldrh	r3, [r3, #0]
 800dcd4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dcd6:	8c3b      	ldrh	r3, [r7, #32]
 800dcd8:	3301      	adds	r3, #1
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	843b      	strh	r3, [r7, #32]
 800dcde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dce2:	2b09      	cmp	r3, #9
 800dce4:	f77f af4c 	ble.w	800db80 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800dce8:	7afb      	ldrb	r3, [r7, #11]
 800dcea:	f003 0302 	and.w	r3, r3, #2
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d108      	bne.n	800dd04 <etharp_find_entry+0x1b8>
 800dcf2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800dcf6:	2b0a      	cmp	r3, #10
 800dcf8:	d107      	bne.n	800dd0a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800dcfa:	7afb      	ldrb	r3, [r7, #11]
 800dcfc:	f003 0301 	and.w	r3, r3, #1
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d102      	bne.n	800dd0a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800dd04:	f04f 33ff 	mov.w	r3, #4294967295
 800dd08:	e085      	b.n	800de16 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800dd0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800dd0e:	2b09      	cmp	r3, #9
 800dd10:	dc02      	bgt.n	800dd18 <etharp_find_entry+0x1cc>
    i = empty;
 800dd12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dd14:	843b      	strh	r3, [r7, #32]
 800dd16:	e039      	b.n	800dd8c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800dd18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800dd1c:	2b09      	cmp	r3, #9
 800dd1e:	dc14      	bgt.n	800dd4a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800dd20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dd22:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800dd24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dd28:	493d      	ldr	r1, [pc, #244]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	4413      	add	r3, r2
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	440b      	add	r3, r1
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d018      	beq.n	800dd6c <etharp_find_entry+0x220>
 800dd3a:	4b3a      	ldr	r3, [pc, #232]	@ (800de24 <etharp_find_entry+0x2d8>)
 800dd3c:	f240 126d 	movw	r2, #365	@ 0x16d
 800dd40:	493b      	ldr	r1, [pc, #236]	@ (800de30 <etharp_find_entry+0x2e4>)
 800dd42:	483a      	ldr	r0, [pc, #232]	@ (800de2c <etharp_find_entry+0x2e0>)
 800dd44:	f002 fa14 	bl	8010170 <iprintf>
 800dd48:	e010      	b.n	800dd6c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800dd4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800dd4e:	2b09      	cmp	r3, #9
 800dd50:	dc02      	bgt.n	800dd58 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800dd52:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dd54:	843b      	strh	r3, [r7, #32]
 800dd56:	e009      	b.n	800dd6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800dd58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dd5c:	2b09      	cmp	r3, #9
 800dd5e:	dc02      	bgt.n	800dd66 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800dd60:	8bfb      	ldrh	r3, [r7, #30]
 800dd62:	843b      	strh	r3, [r7, #32]
 800dd64:	e002      	b.n	800dd6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800dd66:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6a:	e054      	b.n	800de16 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dd6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd70:	2b09      	cmp	r3, #9
 800dd72:	dd06      	ble.n	800dd82 <etharp_find_entry+0x236>
 800dd74:	4b2b      	ldr	r3, [pc, #172]	@ (800de24 <etharp_find_entry+0x2d8>)
 800dd76:	f240 127f 	movw	r2, #383	@ 0x17f
 800dd7a:	492e      	ldr	r1, [pc, #184]	@ (800de34 <etharp_find_entry+0x2e8>)
 800dd7c:	482b      	ldr	r0, [pc, #172]	@ (800de2c <etharp_find_entry+0x2e0>)
 800dd7e:	f002 f9f7 	bl	8010170 <iprintf>
    etharp_free_entry(i);
 800dd82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff fe06 	bl	800d998 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800dd8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800dd90:	2b09      	cmp	r3, #9
 800dd92:	dd06      	ble.n	800dda2 <etharp_find_entry+0x256>
 800dd94:	4b23      	ldr	r3, [pc, #140]	@ (800de24 <etharp_find_entry+0x2d8>)
 800dd96:	f240 1283 	movw	r2, #387	@ 0x183
 800dd9a:	4926      	ldr	r1, [pc, #152]	@ (800de34 <etharp_find_entry+0x2e8>)
 800dd9c:	4823      	ldr	r0, [pc, #140]	@ (800de2c <etharp_find_entry+0x2e0>)
 800dd9e:	f002 f9e7 	bl	8010170 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800dda2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800dda6:	491e      	ldr	r1, [pc, #120]	@ (800de20 <etharp_find_entry+0x2d4>)
 800dda8:	4613      	mov	r3, r2
 800ddaa:	005b      	lsls	r3, r3, #1
 800ddac:	4413      	add	r3, r2
 800ddae:	00db      	lsls	r3, r3, #3
 800ddb0:	440b      	add	r3, r1
 800ddb2:	3314      	adds	r3, #20
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d006      	beq.n	800ddc8 <etharp_find_entry+0x27c>
 800ddba:	4b1a      	ldr	r3, [pc, #104]	@ (800de24 <etharp_find_entry+0x2d8>)
 800ddbc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800ddc0:	491d      	ldr	r1, [pc, #116]	@ (800de38 <etharp_find_entry+0x2ec>)
 800ddc2:	481a      	ldr	r0, [pc, #104]	@ (800de2c <etharp_find_entry+0x2e0>)
 800ddc4:	f002 f9d4 	bl	8010170 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00b      	beq.n	800dde6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ddce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6819      	ldr	r1, [r3, #0]
 800ddd6:	4812      	ldr	r0, [pc, #72]	@ (800de20 <etharp_find_entry+0x2d4>)
 800ddd8:	4613      	mov	r3, r2
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	4413      	add	r3, r2
 800ddde:	00db      	lsls	r3, r3, #3
 800dde0:	4403      	add	r3, r0
 800dde2:	3304      	adds	r3, #4
 800dde4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800dde6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ddea:	490d      	ldr	r1, [pc, #52]	@ (800de20 <etharp_find_entry+0x2d4>)
 800ddec:	4613      	mov	r3, r2
 800ddee:	005b      	lsls	r3, r3, #1
 800ddf0:	4413      	add	r3, r2
 800ddf2:	00db      	lsls	r3, r3, #3
 800ddf4:	440b      	add	r3, r1
 800ddf6:	3312      	adds	r3, #18
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ddfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800de00:	4907      	ldr	r1, [pc, #28]	@ (800de20 <etharp_find_entry+0x2d4>)
 800de02:	4613      	mov	r3, r2
 800de04:	005b      	lsls	r3, r3, #1
 800de06:	4413      	add	r3, r2
 800de08:	00db      	lsls	r3, r3, #3
 800de0a:	440b      	add	r3, r1
 800de0c:	3308      	adds	r3, #8
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800de12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3728      	adds	r7, #40	@ 0x28
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	24003238 	.word	0x24003238
 800de24:	080133c8 	.word	0x080133c8
 800de28:	08013400 	.word	0x08013400
 800de2c:	08013440 	.word	0x08013440
 800de30:	08013468 	.word	0x08013468
 800de34:	08013480 	.word	0x08013480
 800de38:	08013494 	.word	0x08013494

0800de3c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af02      	add	r7, sp, #8
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
 800de48:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800de50:	2b06      	cmp	r3, #6
 800de52:	d006      	beq.n	800de62 <etharp_update_arp_entry+0x26>
 800de54:	4b48      	ldr	r3, [pc, #288]	@ (800df78 <etharp_update_arp_entry+0x13c>)
 800de56:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800de5a:	4948      	ldr	r1, [pc, #288]	@ (800df7c <etharp_update_arp_entry+0x140>)
 800de5c:	4848      	ldr	r0, [pc, #288]	@ (800df80 <etharp_update_arp_entry+0x144>)
 800de5e:	f002 f987 	bl	8010170 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d012      	beq.n	800de8e <etharp_update_arp_entry+0x52>
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d00e      	beq.n	800de8e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	68f9      	ldr	r1, [r7, #12]
 800de76:	4618      	mov	r0, r3
 800de78:	f001 f924 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800de7c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d105      	bne.n	800de8e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800de8a:	2be0      	cmp	r3, #224	@ 0xe0
 800de8c:	d102      	bne.n	800de94 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800de8e:	f06f 030f 	mvn.w	r3, #15
 800de92:	e06c      	b.n	800df6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800de94:	78fb      	ldrb	r3, [r7, #3]
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	4619      	mov	r1, r3
 800de9a:	68b8      	ldr	r0, [r7, #8]
 800de9c:	f7ff fe56 	bl	800db4c <etharp_find_entry>
 800dea0:	4603      	mov	r3, r0
 800dea2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dea4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	da02      	bge.n	800deb2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800deac:	8afb      	ldrh	r3, [r7, #22]
 800deae:	b25b      	sxtb	r3, r3
 800deb0:	e05d      	b.n	800df6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800deb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800deb6:	4933      	ldr	r1, [pc, #204]	@ (800df84 <etharp_update_arp_entry+0x148>)
 800deb8:	4613      	mov	r3, r2
 800deba:	005b      	lsls	r3, r3, #1
 800debc:	4413      	add	r3, r2
 800debe:	00db      	lsls	r3, r3, #3
 800dec0:	440b      	add	r3, r1
 800dec2:	3314      	adds	r3, #20
 800dec4:	2202      	movs	r2, #2
 800dec6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dec8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800decc:	492d      	ldr	r1, [pc, #180]	@ (800df84 <etharp_update_arp_entry+0x148>)
 800dece:	4613      	mov	r3, r2
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	4413      	add	r3, r2
 800ded4:	00db      	lsls	r3, r3, #3
 800ded6:	440b      	add	r3, r1
 800ded8:	3308      	adds	r3, #8
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800dede:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dee2:	4613      	mov	r3, r2
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	4413      	add	r3, r2
 800dee8:	00db      	lsls	r3, r3, #3
 800deea:	3308      	adds	r3, #8
 800deec:	4a25      	ldr	r2, [pc, #148]	@ (800df84 <etharp_update_arp_entry+0x148>)
 800deee:	4413      	add	r3, r2
 800def0:	3304      	adds	r3, #4
 800def2:	2206      	movs	r2, #6
 800def4:	6879      	ldr	r1, [r7, #4]
 800def6:	4618      	mov	r0, r3
 800def8:	f002 fb07 	bl	801050a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800defc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800df00:	4920      	ldr	r1, [pc, #128]	@ (800df84 <etharp_update_arp_entry+0x148>)
 800df02:	4613      	mov	r3, r2
 800df04:	005b      	lsls	r3, r3, #1
 800df06:	4413      	add	r3, r2
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	440b      	add	r3, r1
 800df0c:	3312      	adds	r3, #18
 800df0e:	2200      	movs	r2, #0
 800df10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800df12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800df16:	491b      	ldr	r1, [pc, #108]	@ (800df84 <etharp_update_arp_entry+0x148>)
 800df18:	4613      	mov	r3, r2
 800df1a:	005b      	lsls	r3, r3, #1
 800df1c:	4413      	add	r3, r2
 800df1e:	00db      	lsls	r3, r3, #3
 800df20:	440b      	add	r3, r1
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d021      	beq.n	800df6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800df28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800df2c:	4915      	ldr	r1, [pc, #84]	@ (800df84 <etharp_update_arp_entry+0x148>)
 800df2e:	4613      	mov	r3, r2
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	4413      	add	r3, r2
 800df34:	00db      	lsls	r3, r3, #3
 800df36:	440b      	add	r3, r1
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800df3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800df40:	4910      	ldr	r1, [pc, #64]	@ (800df84 <etharp_update_arp_entry+0x148>)
 800df42:	4613      	mov	r3, r2
 800df44:	005b      	lsls	r3, r3, #1
 800df46:	4413      	add	r3, r2
 800df48:	00db      	lsls	r3, r3, #3
 800df4a:	440b      	add	r3, r1
 800df4c:	2200      	movs	r2, #0
 800df4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800df56:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6939      	ldr	r1, [r7, #16]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f001 ffbd 	bl	800fee0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800df66:	6938      	ldr	r0, [r7, #16]
 800df68:	f7f9 fe2c 	bl	8007bc4 <pbuf_free>
  }
  return ERR_OK;
 800df6c:	2300      	movs	r3, #0
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3718      	adds	r7, #24
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	080133c8 	.word	0x080133c8
 800df7c:	080134c0 	.word	0x080134c0
 800df80:	08013440 	.word	0x08013440
 800df84:	24003238 	.word	0x24003238

0800df88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	b084      	sub	sp, #16
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800df90:	2300      	movs	r3, #0
 800df92:	60fb      	str	r3, [r7, #12]
 800df94:	e01e      	b.n	800dfd4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800df96:	4913      	ldr	r1, [pc, #76]	@ (800dfe4 <etharp_cleanup_netif+0x5c>)
 800df98:	68fa      	ldr	r2, [r7, #12]
 800df9a:	4613      	mov	r3, r2
 800df9c:	005b      	lsls	r3, r3, #1
 800df9e:	4413      	add	r3, r2
 800dfa0:	00db      	lsls	r3, r3, #3
 800dfa2:	440b      	add	r3, r1
 800dfa4:	3314      	adds	r3, #20
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dfaa:	7afb      	ldrb	r3, [r7, #11]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00e      	beq.n	800dfce <etharp_cleanup_netif+0x46>
 800dfb0:	490c      	ldr	r1, [pc, #48]	@ (800dfe4 <etharp_cleanup_netif+0x5c>)
 800dfb2:	68fa      	ldr	r2, [r7, #12]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	005b      	lsls	r3, r3, #1
 800dfb8:	4413      	add	r3, r2
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	440b      	add	r3, r1
 800dfbe:	3308      	adds	r3, #8
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d102      	bne.n	800dfce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f7ff fce5 	bl	800d998 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	60fb      	str	r3, [r7, #12]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b09      	cmp	r3, #9
 800dfd8:	dddd      	ble.n	800df96 <etharp_cleanup_netif+0xe>
    }
  }
}
 800dfda:	bf00      	nop
 800dfdc:	bf00      	nop
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}
 800dfe4:	24003238 	.word	0x24003238

0800dfe8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dfe8:	b5b0      	push	{r4, r5, r7, lr}
 800dfea:	b08a      	sub	sp, #40	@ 0x28
 800dfec:	af04      	add	r7, sp, #16
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d107      	bne.n	800e008 <etharp_input+0x20>
 800dff8:	4b3d      	ldr	r3, [pc, #244]	@ (800e0f0 <etharp_input+0x108>)
 800dffa:	f240 228a 	movw	r2, #650	@ 0x28a
 800dffe:	493d      	ldr	r1, [pc, #244]	@ (800e0f4 <etharp_input+0x10c>)
 800e000:	483d      	ldr	r0, [pc, #244]	@ (800e0f8 <etharp_input+0x110>)
 800e002:	f002 f8b5 	bl	8010170 <iprintf>
 800e006:	e06f      	b.n	800e0e8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	881b      	ldrh	r3, [r3, #0]
 800e012:	b29b      	uxth	r3, r3
 800e014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e018:	d10c      	bne.n	800e034 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800e01e:	2b06      	cmp	r3, #6
 800e020:	d108      	bne.n	800e034 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800e026:	2b04      	cmp	r3, #4
 800e028:	d104      	bne.n	800e034 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	885b      	ldrh	r3, [r3, #2]
 800e02e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800e030:	2b08      	cmp	r3, #8
 800e032:	d003      	beq.n	800e03c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7f9 fdc5 	bl	8007bc4 <pbuf_free>
    return;
 800e03a:	e055      	b.n	800e0e8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	330e      	adds	r3, #14
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	3318      	adds	r3, #24
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	3304      	adds	r3, #4
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d102      	bne.n	800e05c <etharp_input+0x74>
    for_us = 0;
 800e056:	2300      	movs	r3, #0
 800e058:	75fb      	strb	r3, [r7, #23]
 800e05a:	e009      	b.n	800e070 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800e05c:	68ba      	ldr	r2, [r7, #8]
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	3304      	adds	r3, #4
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	429a      	cmp	r2, r3
 800e066:	bf0c      	ite	eq
 800e068:	2301      	moveq	r3, #1
 800e06a:	2300      	movne	r3, #0
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	f103 0208 	add.w	r2, r3, #8
 800e076:	7dfb      	ldrb	r3, [r7, #23]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <etharp_input+0x98>
 800e07c:	2301      	movs	r3, #1
 800e07e:	e000      	b.n	800e082 <etharp_input+0x9a>
 800e080:	2302      	movs	r3, #2
 800e082:	f107 010c 	add.w	r1, r7, #12
 800e086:	6838      	ldr	r0, [r7, #0]
 800e088:	f7ff fed8 	bl	800de3c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	88db      	ldrh	r3, [r3, #6]
 800e090:	b29b      	uxth	r3, r3
 800e092:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e096:	d003      	beq.n	800e0a0 <etharp_input+0xb8>
 800e098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e09c:	d01e      	beq.n	800e0dc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800e09e:	e020      	b.n	800e0e2 <etharp_input+0xfa>
      if (for_us) {
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d01c      	beq.n	800e0e0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800e0bc:	693a      	ldr	r2, [r7, #16]
 800e0be:	3208      	adds	r2, #8
        etharp_raw(netif,
 800e0c0:	2102      	movs	r1, #2
 800e0c2:	9103      	str	r1, [sp, #12]
 800e0c4:	f107 010c 	add.w	r1, r7, #12
 800e0c8:	9102      	str	r1, [sp, #8]
 800e0ca:	9201      	str	r2, [sp, #4]
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	462b      	mov	r3, r5
 800e0d0:	4622      	mov	r2, r4
 800e0d2:	4601      	mov	r1, r0
 800e0d4:	6838      	ldr	r0, [r7, #0]
 800e0d6:	f000 faeb 	bl	800e6b0 <etharp_raw>
      break;
 800e0da:	e001      	b.n	800e0e0 <etharp_input+0xf8>
      break;
 800e0dc:	bf00      	nop
 800e0de:	e000      	b.n	800e0e2 <etharp_input+0xfa>
      break;
 800e0e0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7f9 fd6e 	bl	8007bc4 <pbuf_free>
}
 800e0e8:	3718      	adds	r7, #24
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bdb0      	pop	{r4, r5, r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	080133c8 	.word	0x080133c8
 800e0f4:	08013518 	.word	0x08013518
 800e0f8:	08013440 	.word	0x08013440

0800e0fc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af02      	add	r7, sp, #8
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	4613      	mov	r3, r2
 800e108:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800e10a:	79fa      	ldrb	r2, [r7, #7]
 800e10c:	4944      	ldr	r1, [pc, #272]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e10e:	4613      	mov	r3, r2
 800e110:	005b      	lsls	r3, r3, #1
 800e112:	4413      	add	r3, r2
 800e114:	00db      	lsls	r3, r3, #3
 800e116:	440b      	add	r3, r1
 800e118:	3314      	adds	r3, #20
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	2b01      	cmp	r3, #1
 800e11e:	d806      	bhi.n	800e12e <etharp_output_to_arp_index+0x32>
 800e120:	4b40      	ldr	r3, [pc, #256]	@ (800e224 <etharp_output_to_arp_index+0x128>)
 800e122:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e126:	4940      	ldr	r1, [pc, #256]	@ (800e228 <etharp_output_to_arp_index+0x12c>)
 800e128:	4840      	ldr	r0, [pc, #256]	@ (800e22c <etharp_output_to_arp_index+0x130>)
 800e12a:	f002 f821 	bl	8010170 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800e12e:	79fa      	ldrb	r2, [r7, #7]
 800e130:	493b      	ldr	r1, [pc, #236]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e132:	4613      	mov	r3, r2
 800e134:	005b      	lsls	r3, r3, #1
 800e136:	4413      	add	r3, r2
 800e138:	00db      	lsls	r3, r3, #3
 800e13a:	440b      	add	r3, r1
 800e13c:	3314      	adds	r3, #20
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b02      	cmp	r3, #2
 800e142:	d153      	bne.n	800e1ec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800e144:	79fa      	ldrb	r2, [r7, #7]
 800e146:	4936      	ldr	r1, [pc, #216]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e148:	4613      	mov	r3, r2
 800e14a:	005b      	lsls	r3, r3, #1
 800e14c:	4413      	add	r3, r2
 800e14e:	00db      	lsls	r3, r3, #3
 800e150:	440b      	add	r3, r1
 800e152:	3312      	adds	r3, #18
 800e154:	881b      	ldrh	r3, [r3, #0]
 800e156:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800e15a:	d919      	bls.n	800e190 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800e15c:	79fa      	ldrb	r2, [r7, #7]
 800e15e:	4613      	mov	r3, r2
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	4413      	add	r3, r2
 800e164:	00db      	lsls	r3, r3, #3
 800e166:	4a2e      	ldr	r2, [pc, #184]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e168:	4413      	add	r3, r2
 800e16a:	3304      	adds	r3, #4
 800e16c:	4619      	mov	r1, r3
 800e16e:	68f8      	ldr	r0, [r7, #12]
 800e170:	f000 fb4c 	bl	800e80c <etharp_request>
 800e174:	4603      	mov	r3, r0
 800e176:	2b00      	cmp	r3, #0
 800e178:	d138      	bne.n	800e1ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e17a:	79fa      	ldrb	r2, [r7, #7]
 800e17c:	4928      	ldr	r1, [pc, #160]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e17e:	4613      	mov	r3, r2
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	4413      	add	r3, r2
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	440b      	add	r3, r1
 800e188:	3314      	adds	r3, #20
 800e18a:	2203      	movs	r2, #3
 800e18c:	701a      	strb	r2, [r3, #0]
 800e18e:	e02d      	b.n	800e1ec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800e190:	79fa      	ldrb	r2, [r7, #7]
 800e192:	4923      	ldr	r1, [pc, #140]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e194:	4613      	mov	r3, r2
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	4413      	add	r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	440b      	add	r3, r1
 800e19e:	3312      	adds	r3, #18
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800e1a6:	d321      	bcc.n	800e1ec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800e1a8:	79fa      	ldrb	r2, [r7, #7]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	4413      	add	r3, r2
 800e1b0:	00db      	lsls	r3, r3, #3
 800e1b2:	4a1b      	ldr	r2, [pc, #108]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e1b4:	4413      	add	r3, r2
 800e1b6:	1d19      	adds	r1, r3, #4
 800e1b8:	79fa      	ldrb	r2, [r7, #7]
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	4413      	add	r3, r2
 800e1c0:	00db      	lsls	r3, r3, #3
 800e1c2:	3308      	adds	r3, #8
 800e1c4:	4a16      	ldr	r2, [pc, #88]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e1c6:	4413      	add	r3, r2
 800e1c8:	3304      	adds	r3, #4
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f000 fafb 	bl	800e7c8 <etharp_request_dst>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d109      	bne.n	800e1ec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800e1d8:	79fa      	ldrb	r2, [r7, #7]
 800e1da:	4911      	ldr	r1, [pc, #68]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e1dc:	4613      	mov	r3, r2
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	4413      	add	r3, r2
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	440b      	add	r3, r1
 800e1e6:	3314      	adds	r3, #20
 800e1e8:	2203      	movs	r2, #3
 800e1ea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800e1f2:	79fa      	ldrb	r2, [r7, #7]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	4413      	add	r3, r2
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	3308      	adds	r3, #8
 800e1fe:	4a08      	ldr	r2, [pc, #32]	@ (800e220 <etharp_output_to_arp_index+0x124>)
 800e200:	4413      	add	r3, r2
 800e202:	3304      	adds	r3, #4
 800e204:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e208:	9200      	str	r2, [sp, #0]
 800e20a:	460a      	mov	r2, r1
 800e20c:	68b9      	ldr	r1, [r7, #8]
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f001 fe66 	bl	800fee0 <ethernet_output>
 800e214:	4603      	mov	r3, r0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
 800e21e:	bf00      	nop
 800e220:	24003238 	.word	0x24003238
 800e224:	080133c8 	.word	0x080133c8
 800e228:	08013538 	.word	0x08013538
 800e22c:	08013440 	.word	0x08013440

0800e230 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b08a      	sub	sp, #40	@ 0x28
 800e234:	af02      	add	r7, sp, #8
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d106      	bne.n	800e254 <etharp_output+0x24>
 800e246:	4b73      	ldr	r3, [pc, #460]	@ (800e414 <etharp_output+0x1e4>)
 800e248:	f240 321e 	movw	r2, #798	@ 0x31e
 800e24c:	4972      	ldr	r1, [pc, #456]	@ (800e418 <etharp_output+0x1e8>)
 800e24e:	4873      	ldr	r0, [pc, #460]	@ (800e41c <etharp_output+0x1ec>)
 800e250:	f001 ff8e 	bl	8010170 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d106      	bne.n	800e268 <etharp_output+0x38>
 800e25a:	4b6e      	ldr	r3, [pc, #440]	@ (800e414 <etharp_output+0x1e4>)
 800e25c:	f240 321f 	movw	r2, #799	@ 0x31f
 800e260:	496f      	ldr	r1, [pc, #444]	@ (800e420 <etharp_output+0x1f0>)
 800e262:	486e      	ldr	r0, [pc, #440]	@ (800e41c <etharp_output+0x1ec>)
 800e264:	f001 ff84 	bl	8010170 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d106      	bne.n	800e27c <etharp_output+0x4c>
 800e26e:	4b69      	ldr	r3, [pc, #420]	@ (800e414 <etharp_output+0x1e4>)
 800e270:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e274:	496b      	ldr	r1, [pc, #428]	@ (800e424 <etharp_output+0x1f4>)
 800e276:	4869      	ldr	r0, [pc, #420]	@ (800e41c <etharp_output+0x1ec>)
 800e278:	f001 ff7a 	bl	8010170 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	68f9      	ldr	r1, [r7, #12]
 800e282:	4618      	mov	r0, r3
 800e284:	f000 ff1e 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800e288:	4603      	mov	r3, r0
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800e28e:	4b66      	ldr	r3, [pc, #408]	@ (800e428 <etharp_output+0x1f8>)
 800e290:	61fb      	str	r3, [r7, #28]
 800e292:	e0af      	b.n	800e3f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e29c:	2be0      	cmp	r3, #224	@ 0xe0
 800e29e:	d118      	bne.n	800e2d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800e2a8:	235e      	movs	r3, #94	@ 0x5e
 800e2aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	3302      	adds	r3, #2
 800e2be:	781b      	ldrb	r3, [r3, #0]
 800e2c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	3303      	adds	r3, #3
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800e2ca:	f107 0310 	add.w	r3, r7, #16
 800e2ce:	61fb      	str	r3, [r7, #28]
 800e2d0:	e090      	b.n	800e3f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3304      	adds	r3, #4
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	405a      	eors	r2, r3
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d012      	beq.n	800e310 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800e2f0:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800e2f4:	4293      	cmp	r3, r2
 800e2f6:	d00b      	beq.n	800e310 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	330c      	adds	r3, #12
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d003      	beq.n	800e30a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	330c      	adds	r3, #12
 800e306:	61bb      	str	r3, [r7, #24]
 800e308:	e002      	b.n	800e310 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800e30a:	f06f 0303 	mvn.w	r3, #3
 800e30e:	e07d      	b.n	800e40c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e310:	4b46      	ldr	r3, [pc, #280]	@ (800e42c <etharp_output+0x1fc>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	4619      	mov	r1, r3
 800e316:	4a46      	ldr	r2, [pc, #280]	@ (800e430 <etharp_output+0x200>)
 800e318:	460b      	mov	r3, r1
 800e31a:	005b      	lsls	r3, r3, #1
 800e31c:	440b      	add	r3, r1
 800e31e:	00db      	lsls	r3, r3, #3
 800e320:	4413      	add	r3, r2
 800e322:	3314      	adds	r3, #20
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	2b01      	cmp	r3, #1
 800e328:	d925      	bls.n	800e376 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e32a:	4b40      	ldr	r3, [pc, #256]	@ (800e42c <etharp_output+0x1fc>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	4619      	mov	r1, r3
 800e330:	4a3f      	ldr	r2, [pc, #252]	@ (800e430 <etharp_output+0x200>)
 800e332:	460b      	mov	r3, r1
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	440b      	add	r3, r1
 800e338:	00db      	lsls	r3, r3, #3
 800e33a:	4413      	add	r3, r2
 800e33c:	3308      	adds	r3, #8
 800e33e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	429a      	cmp	r2, r3
 800e344:	d117      	bne.n	800e376 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	4b38      	ldr	r3, [pc, #224]	@ (800e42c <etharp_output+0x1fc>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	4618      	mov	r0, r3
 800e350:	4937      	ldr	r1, [pc, #220]	@ (800e430 <etharp_output+0x200>)
 800e352:	4603      	mov	r3, r0
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	4403      	add	r3, r0
 800e358:	00db      	lsls	r3, r3, #3
 800e35a:	440b      	add	r3, r1
 800e35c:	3304      	adds	r3, #4
 800e35e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800e360:	429a      	cmp	r2, r3
 800e362:	d108      	bne.n	800e376 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800e364:	4b31      	ldr	r3, [pc, #196]	@ (800e42c <etharp_output+0x1fc>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	461a      	mov	r2, r3
 800e36a:	68b9      	ldr	r1, [r7, #8]
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f7ff fec5 	bl	800e0fc <etharp_output_to_arp_index>
 800e372:	4603      	mov	r3, r0
 800e374:	e04a      	b.n	800e40c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e376:	2300      	movs	r3, #0
 800e378:	75fb      	strb	r3, [r7, #23]
 800e37a:	e031      	b.n	800e3e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e37c:	7dfa      	ldrb	r2, [r7, #23]
 800e37e:	492c      	ldr	r1, [pc, #176]	@ (800e430 <etharp_output+0x200>)
 800e380:	4613      	mov	r3, r2
 800e382:	005b      	lsls	r3, r3, #1
 800e384:	4413      	add	r3, r2
 800e386:	00db      	lsls	r3, r3, #3
 800e388:	440b      	add	r3, r1
 800e38a:	3314      	adds	r3, #20
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d923      	bls.n	800e3da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800e392:	7dfa      	ldrb	r2, [r7, #23]
 800e394:	4926      	ldr	r1, [pc, #152]	@ (800e430 <etharp_output+0x200>)
 800e396:	4613      	mov	r3, r2
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	4413      	add	r3, r2
 800e39c:	00db      	lsls	r3, r3, #3
 800e39e:	440b      	add	r3, r1
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800e3a4:	68fa      	ldr	r2, [r7, #12]
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d117      	bne.n	800e3da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	6819      	ldr	r1, [r3, #0]
 800e3ae:	7dfa      	ldrb	r2, [r7, #23]
 800e3b0:	481f      	ldr	r0, [pc, #124]	@ (800e430 <etharp_output+0x200>)
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	4413      	add	r3, r2
 800e3b8:	00db      	lsls	r3, r3, #3
 800e3ba:	4403      	add	r3, r0
 800e3bc:	3304      	adds	r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800e3c0:	4299      	cmp	r1, r3
 800e3c2:	d10a      	bne.n	800e3da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800e3c4:	4a19      	ldr	r2, [pc, #100]	@ (800e42c <etharp_output+0x1fc>)
 800e3c6:	7dfb      	ldrb	r3, [r7, #23]
 800e3c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
 800e3cc:	461a      	mov	r2, r3
 800e3ce:	68b9      	ldr	r1, [r7, #8]
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	f7ff fe93 	bl	800e0fc <etharp_output_to_arp_index>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	e018      	b.n	800e40c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800e3da:	7dfb      	ldrb	r3, [r7, #23]
 800e3dc:	3301      	adds	r3, #1
 800e3de:	75fb      	strb	r3, [r7, #23]
 800e3e0:	7dfb      	ldrb	r3, [r7, #23]
 800e3e2:	2b09      	cmp	r3, #9
 800e3e4:	d9ca      	bls.n	800e37c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800e3e6:	68ba      	ldr	r2, [r7, #8]
 800e3e8:	69b9      	ldr	r1, [r7, #24]
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f000 f822 	bl	800e434 <etharp_query>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	e00b      	b.n	800e40c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800e3fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	68b9      	ldr	r1, [r7, #8]
 800e404:	68f8      	ldr	r0, [r7, #12]
 800e406:	f001 fd6b 	bl	800fee0 <ethernet_output>
 800e40a:	4603      	mov	r3, r0
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3720      	adds	r7, #32
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}
 800e414:	080133c8 	.word	0x080133c8
 800e418:	08013518 	.word	0x08013518
 800e41c:	08013440 	.word	0x08013440
 800e420:	08013568 	.word	0x08013568
 800e424:	08013508 	.word	0x08013508
 800e428:	08013b94 	.word	0x08013b94
 800e42c:	24003328 	.word	0x24003328
 800e430:	24003238 	.word	0x24003238

0800e434 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b08c      	sub	sp, #48	@ 0x30
 800e438:	af02      	add	r7, sp, #8
 800e43a:	60f8      	str	r0, [r7, #12]
 800e43c:	60b9      	str	r1, [r7, #8]
 800e43e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	3326      	adds	r3, #38	@ 0x26
 800e444:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e446:	23ff      	movs	r3, #255	@ 0xff
 800e448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800e44c:	2300      	movs	r3, #0
 800e44e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	68f9      	ldr	r1, [r7, #12]
 800e456:	4618      	mov	r0, r3
 800e458:	f000 fe34 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10c      	bne.n	800e47c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e46a:	2be0      	cmp	r3, #224	@ 0xe0
 800e46c:	d006      	beq.n	800e47c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d003      	beq.n	800e47c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d102      	bne.n	800e482 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e47c:	f06f 030f 	mvn.w	r3, #15
 800e480:	e101      	b.n	800e686 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	2101      	movs	r1, #1
 800e486:	68b8      	ldr	r0, [r7, #8]
 800e488:	f7ff fb60 	bl	800db4c <etharp_find_entry>
 800e48c:	4603      	mov	r3, r0
 800e48e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e490:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e494:	2b00      	cmp	r3, #0
 800e496:	da02      	bge.n	800e49e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e498:	8a7b      	ldrh	r3, [r7, #18]
 800e49a:	b25b      	sxtb	r3, r3
 800e49c:	e0f3      	b.n	800e686 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e49e:	8a7b      	ldrh	r3, [r7, #18]
 800e4a0:	2b7e      	cmp	r3, #126	@ 0x7e
 800e4a2:	d906      	bls.n	800e4b2 <etharp_query+0x7e>
 800e4a4:	4b7a      	ldr	r3, [pc, #488]	@ (800e690 <etharp_query+0x25c>)
 800e4a6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800e4aa:	497a      	ldr	r1, [pc, #488]	@ (800e694 <etharp_query+0x260>)
 800e4ac:	487a      	ldr	r0, [pc, #488]	@ (800e698 <etharp_query+0x264>)
 800e4ae:	f001 fe5f 	bl	8010170 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e4b2:	8a7b      	ldrh	r3, [r7, #18]
 800e4b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e4b6:	7c7a      	ldrb	r2, [r7, #17]
 800e4b8:	4978      	ldr	r1, [pc, #480]	@ (800e69c <etharp_query+0x268>)
 800e4ba:	4613      	mov	r3, r2
 800e4bc:	005b      	lsls	r3, r3, #1
 800e4be:	4413      	add	r3, r2
 800e4c0:	00db      	lsls	r3, r3, #3
 800e4c2:	440b      	add	r3, r1
 800e4c4:	3314      	adds	r3, #20
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d115      	bne.n	800e4f8 <etharp_query+0xc4>
    is_new_entry = 1;
 800e4cc:	2301      	movs	r3, #1
 800e4ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e4d0:	7c7a      	ldrb	r2, [r7, #17]
 800e4d2:	4972      	ldr	r1, [pc, #456]	@ (800e69c <etharp_query+0x268>)
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	4413      	add	r3, r2
 800e4da:	00db      	lsls	r3, r3, #3
 800e4dc:	440b      	add	r3, r1
 800e4de:	3314      	adds	r3, #20
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e4e4:	7c7a      	ldrb	r2, [r7, #17]
 800e4e6:	496d      	ldr	r1, [pc, #436]	@ (800e69c <etharp_query+0x268>)
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	005b      	lsls	r3, r3, #1
 800e4ec:	4413      	add	r3, r2
 800e4ee:	00db      	lsls	r3, r3, #3
 800e4f0:	440b      	add	r3, r1
 800e4f2:	3308      	adds	r3, #8
 800e4f4:	68fa      	ldr	r2, [r7, #12]
 800e4f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e4f8:	7c7a      	ldrb	r2, [r7, #17]
 800e4fa:	4968      	ldr	r1, [pc, #416]	@ (800e69c <etharp_query+0x268>)
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	4413      	add	r3, r2
 800e502:	00db      	lsls	r3, r3, #3
 800e504:	440b      	add	r3, r1
 800e506:	3314      	adds	r3, #20
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	d011      	beq.n	800e532 <etharp_query+0xfe>
 800e50e:	7c7a      	ldrb	r2, [r7, #17]
 800e510:	4962      	ldr	r1, [pc, #392]	@ (800e69c <etharp_query+0x268>)
 800e512:	4613      	mov	r3, r2
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	4413      	add	r3, r2
 800e518:	00db      	lsls	r3, r3, #3
 800e51a:	440b      	add	r3, r1
 800e51c:	3314      	adds	r3, #20
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d806      	bhi.n	800e532 <etharp_query+0xfe>
 800e524:	4b5a      	ldr	r3, [pc, #360]	@ (800e690 <etharp_query+0x25c>)
 800e526:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800e52a:	495d      	ldr	r1, [pc, #372]	@ (800e6a0 <etharp_query+0x26c>)
 800e52c:	485a      	ldr	r0, [pc, #360]	@ (800e698 <etharp_query+0x264>)
 800e52e:	f001 fe1f 	bl	8010170 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e532:	6a3b      	ldr	r3, [r7, #32]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d102      	bne.n	800e53e <etharp_query+0x10a>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d10c      	bne.n	800e558 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e53e:	68b9      	ldr	r1, [r7, #8]
 800e540:	68f8      	ldr	r0, [r7, #12]
 800e542:	f000 f963 	bl	800e80c <etharp_request>
 800e546:	4603      	mov	r3, r0
 800e548:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d102      	bne.n	800e558 <etharp_query+0x124>
      return result;
 800e552:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e556:	e096      	b.n	800e686 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d106      	bne.n	800e56c <etharp_query+0x138>
 800e55e:	4b4c      	ldr	r3, [pc, #304]	@ (800e690 <etharp_query+0x25c>)
 800e560:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800e564:	494f      	ldr	r1, [pc, #316]	@ (800e6a4 <etharp_query+0x270>)
 800e566:	484c      	ldr	r0, [pc, #304]	@ (800e698 <etharp_query+0x264>)
 800e568:	f001 fe02 	bl	8010170 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e56c:	7c7a      	ldrb	r2, [r7, #17]
 800e56e:	494b      	ldr	r1, [pc, #300]	@ (800e69c <etharp_query+0x268>)
 800e570:	4613      	mov	r3, r2
 800e572:	005b      	lsls	r3, r3, #1
 800e574:	4413      	add	r3, r2
 800e576:	00db      	lsls	r3, r3, #3
 800e578:	440b      	add	r3, r1
 800e57a:	3314      	adds	r3, #20
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d917      	bls.n	800e5b2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e582:	4a49      	ldr	r2, [pc, #292]	@ (800e6a8 <etharp_query+0x274>)
 800e584:	7c7b      	ldrb	r3, [r7, #17]
 800e586:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e588:	7c7a      	ldrb	r2, [r7, #17]
 800e58a:	4613      	mov	r3, r2
 800e58c:	005b      	lsls	r3, r3, #1
 800e58e:	4413      	add	r3, r2
 800e590:	00db      	lsls	r3, r3, #3
 800e592:	3308      	adds	r3, #8
 800e594:	4a41      	ldr	r2, [pc, #260]	@ (800e69c <etharp_query+0x268>)
 800e596:	4413      	add	r3, r2
 800e598:	3304      	adds	r3, #4
 800e59a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e59e:	9200      	str	r2, [sp, #0]
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	6879      	ldr	r1, [r7, #4]
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f001 fc9b 	bl	800fee0 <ethernet_output>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e5b0:	e067      	b.n	800e682 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e5b2:	7c7a      	ldrb	r2, [r7, #17]
 800e5b4:	4939      	ldr	r1, [pc, #228]	@ (800e69c <etharp_query+0x268>)
 800e5b6:	4613      	mov	r3, r2
 800e5b8:	005b      	lsls	r3, r3, #1
 800e5ba:	4413      	add	r3, r2
 800e5bc:	00db      	lsls	r3, r3, #3
 800e5be:	440b      	add	r3, r1
 800e5c0:	3314      	adds	r3, #20
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	2b01      	cmp	r3, #1
 800e5c6:	d15c      	bne.n	800e682 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e5d0:	e01c      	b.n	800e60c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	895a      	ldrh	r2, [r3, #10]
 800e5d6:	69fb      	ldr	r3, [r7, #28]
 800e5d8:	891b      	ldrh	r3, [r3, #8]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d10a      	bne.n	800e5f4 <etharp_query+0x1c0>
 800e5de:	69fb      	ldr	r3, [r7, #28]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d006      	beq.n	800e5f4 <etharp_query+0x1c0>
 800e5e6:	4b2a      	ldr	r3, [pc, #168]	@ (800e690 <etharp_query+0x25c>)
 800e5e8:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800e5ec:	492f      	ldr	r1, [pc, #188]	@ (800e6ac <etharp_query+0x278>)
 800e5ee:	482a      	ldr	r0, [pc, #168]	@ (800e698 <etharp_query+0x264>)
 800e5f0:	f001 fdbe 	bl	8010170 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	7b1b      	ldrb	r3, [r3, #12]
 800e5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <etharp_query+0x1d2>
        copy_needed = 1;
 800e600:	2301      	movs	r3, #1
 800e602:	61bb      	str	r3, [r7, #24]
        break;
 800e604:	e005      	b.n	800e612 <etharp_query+0x1de>
      }
      p = p->next;
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1df      	bne.n	800e5d2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d007      	beq.n	800e628 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800e61e:	200e      	movs	r0, #14
 800e620:	f7f9 fd2c 	bl	800807c <pbuf_clone>
 800e624:	61f8      	str	r0, [r7, #28]
 800e626:	e004      	b.n	800e632 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e62c:	69f8      	ldr	r0, [r7, #28]
 800e62e:	f7f9 fb69 	bl	8007d04 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e632:	69fb      	ldr	r3, [r7, #28]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d021      	beq.n	800e67c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e638:	7c7a      	ldrb	r2, [r7, #17]
 800e63a:	4918      	ldr	r1, [pc, #96]	@ (800e69c <etharp_query+0x268>)
 800e63c:	4613      	mov	r3, r2
 800e63e:	005b      	lsls	r3, r3, #1
 800e640:	4413      	add	r3, r2
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	440b      	add	r3, r1
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00a      	beq.n	800e662 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e64c:	7c7a      	ldrb	r2, [r7, #17]
 800e64e:	4913      	ldr	r1, [pc, #76]	@ (800e69c <etharp_query+0x268>)
 800e650:	4613      	mov	r3, r2
 800e652:	005b      	lsls	r3, r3, #1
 800e654:	4413      	add	r3, r2
 800e656:	00db      	lsls	r3, r3, #3
 800e658:	440b      	add	r3, r1
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7f9 fab1 	bl	8007bc4 <pbuf_free>
      }
      arp_table[i].q = p;
 800e662:	7c7a      	ldrb	r2, [r7, #17]
 800e664:	490d      	ldr	r1, [pc, #52]	@ (800e69c <etharp_query+0x268>)
 800e666:	4613      	mov	r3, r2
 800e668:	005b      	lsls	r3, r3, #1
 800e66a:	4413      	add	r3, r2
 800e66c:	00db      	lsls	r3, r3, #3
 800e66e:	440b      	add	r3, r1
 800e670:	69fa      	ldr	r2, [r7, #28]
 800e672:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e674:	2300      	movs	r3, #0
 800e676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e67a:	e002      	b.n	800e682 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e67c:	23ff      	movs	r3, #255	@ 0xff
 800e67e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800e682:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800e686:	4618      	mov	r0, r3
 800e688:	3728      	adds	r7, #40	@ 0x28
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
 800e68e:	bf00      	nop
 800e690:	080133c8 	.word	0x080133c8
 800e694:	08013574 	.word	0x08013574
 800e698:	08013440 	.word	0x08013440
 800e69c:	24003238 	.word	0x24003238
 800e6a0:	08013584 	.word	0x08013584
 800e6a4:	08013568 	.word	0x08013568
 800e6a8:	24003328 	.word	0x24003328
 800e6ac:	080135ac 	.word	0x080135ac

0800e6b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b08a      	sub	sp, #40	@ 0x28
 800e6b4:	af02      	add	r7, sp, #8
 800e6b6:	60f8      	str	r0, [r7, #12]
 800e6b8:	60b9      	str	r1, [r7, #8]
 800e6ba:	607a      	str	r2, [r7, #4]
 800e6bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d106      	bne.n	800e6d6 <etharp_raw+0x26>
 800e6c8:	4b3a      	ldr	r3, [pc, #232]	@ (800e7b4 <etharp_raw+0x104>)
 800e6ca:	f240 4257 	movw	r2, #1111	@ 0x457
 800e6ce:	493a      	ldr	r1, [pc, #232]	@ (800e7b8 <etharp_raw+0x108>)
 800e6d0:	483a      	ldr	r0, [pc, #232]	@ (800e7bc <etharp_raw+0x10c>)
 800e6d2:	f001 fd4d 	bl	8010170 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e6d6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e6da:	211c      	movs	r1, #28
 800e6dc:	200e      	movs	r0, #14
 800e6de:	f7f8 ff8d 	bl	80075fc <pbuf_alloc>
 800e6e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e6e4:	69bb      	ldr	r3, [r7, #24]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d102      	bne.n	800e6f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e6ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e6ee:	e05d      	b.n	800e7ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e6f0:	69bb      	ldr	r3, [r7, #24]
 800e6f2:	895b      	ldrh	r3, [r3, #10]
 800e6f4:	2b1b      	cmp	r3, #27
 800e6f6:	d806      	bhi.n	800e706 <etharp_raw+0x56>
 800e6f8:	4b2e      	ldr	r3, [pc, #184]	@ (800e7b4 <etharp_raw+0x104>)
 800e6fa:	f240 4262 	movw	r2, #1122	@ 0x462
 800e6fe:	4930      	ldr	r1, [pc, #192]	@ (800e7c0 <etharp_raw+0x110>)
 800e700:	482e      	ldr	r0, [pc, #184]	@ (800e7bc <etharp_raw+0x10c>)
 800e702:	f001 fd35 	bl	8010170 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e706:	69bb      	ldr	r3, [r7, #24]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e70c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e70e:	4618      	mov	r0, r3
 800e710:	f7f7 fe42 	bl	8006398 <lwip_htons>
 800e714:	4603      	mov	r3, r0
 800e716:	461a      	mov	r2, r3
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e722:	2b06      	cmp	r3, #6
 800e724:	d006      	beq.n	800e734 <etharp_raw+0x84>
 800e726:	4b23      	ldr	r3, [pc, #140]	@ (800e7b4 <etharp_raw+0x104>)
 800e728:	f240 4269 	movw	r2, #1129	@ 0x469
 800e72c:	4925      	ldr	r1, [pc, #148]	@ (800e7c4 <etharp_raw+0x114>)
 800e72e:	4823      	ldr	r0, [pc, #140]	@ (800e7bc <etharp_raw+0x10c>)
 800e730:	f001 fd1e 	bl	8010170 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	3308      	adds	r3, #8
 800e738:	2206      	movs	r2, #6
 800e73a:	6839      	ldr	r1, [r7, #0]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f001 fee4 	bl	801050a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	3312      	adds	r3, #18
 800e746:	2206      	movs	r2, #6
 800e748:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e74a:	4618      	mov	r0, r3
 800e74c:	f001 fedd 	bl	801050a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	330e      	adds	r3, #14
 800e754:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e756:	6812      	ldr	r2, [r2, #0]
 800e758:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	3318      	adds	r3, #24
 800e75e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e760:	6812      	ldr	r2, [r2, #0]
 800e762:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	2200      	movs	r2, #0
 800e768:	701a      	strb	r2, [r3, #0]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f042 0201 	orr.w	r2, r2, #1
 800e770:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	2200      	movs	r2, #0
 800e776:	f042 0208 	orr.w	r2, r2, #8
 800e77a:	709a      	strb	r2, [r3, #2]
 800e77c:	2200      	movs	r2, #0
 800e77e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2206      	movs	r2, #6
 800e784:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	2204      	movs	r2, #4
 800e78a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e78c:	f640 0306 	movw	r3, #2054	@ 0x806
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	68ba      	ldr	r2, [r7, #8]
 800e796:	69b9      	ldr	r1, [r7, #24]
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f001 fba1 	bl	800fee0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e79e:	69b8      	ldr	r0, [r7, #24]
 800e7a0:	f7f9 fa10 	bl	8007bc4 <pbuf_free>
  p = NULL;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e7a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3720      	adds	r7, #32
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	080133c8 	.word	0x080133c8
 800e7b8:	08013518 	.word	0x08013518
 800e7bc:	08013440 	.word	0x08013440
 800e7c0:	080135c8 	.word	0x080135c8
 800e7c4:	080135fc 	.word	0x080135fc

0800e7c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b088      	sub	sp, #32
 800e7cc:	af04      	add	r7, sp, #16
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e7e4:	2201      	movs	r2, #1
 800e7e6:	9203      	str	r2, [sp, #12]
 800e7e8:	68ba      	ldr	r2, [r7, #8]
 800e7ea:	9202      	str	r2, [sp, #8]
 800e7ec:	4a06      	ldr	r2, [pc, #24]	@ (800e808 <etharp_request_dst+0x40>)
 800e7ee:	9201      	str	r2, [sp, #4]
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff ff5a 	bl	800e6b0 <etharp_raw>
 800e7fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	08013b9c 	.word	0x08013b9c

0800e80c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b082      	sub	sp, #8
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e816:	4a05      	ldr	r2, [pc, #20]	@ (800e82c <etharp_request+0x20>)
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7ff ffd4 	bl	800e7c8 <etharp_request_dst>
 800e820:	4603      	mov	r3, r0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	08013b94 	.word	0x08013b94

0800e830 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b08e      	sub	sp, #56	@ 0x38
 800e834:	af04      	add	r7, sp, #16
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e83a:	4b87      	ldr	r3, [pc, #540]	@ (800ea58 <icmp_input+0x228>)
 800e83c:	689b      	ldr	r3, [r3, #8]
 800e83e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	f003 030f 	and.w	r3, r3, #15
 800e848:	b2db      	uxtb	r3, r3
 800e84a:	009b      	lsls	r3, r3, #2
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800e850:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e852:	2b13      	cmp	r3, #19
 800e854:	f240 80e8 	bls.w	800ea28 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	895b      	ldrh	r3, [r3, #10]
 800e85c:	2b03      	cmp	r3, #3
 800e85e:	f240 80e5 	bls.w	800ea2c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e86c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e870:	2b00      	cmp	r3, #0
 800e872:	f000 80d2 	beq.w	800ea1a <icmp_input+0x1ea>
 800e876:	2b08      	cmp	r3, #8
 800e878:	f040 80d2 	bne.w	800ea20 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e87c:	4b77      	ldr	r3, [pc, #476]	@ (800ea5c <icmp_input+0x22c>)
 800e87e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e880:	4b75      	ldr	r3, [pc, #468]	@ (800ea58 <icmp_input+0x228>)
 800e882:	695b      	ldr	r3, [r3, #20]
 800e884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e888:	2be0      	cmp	r3, #224	@ 0xe0
 800e88a:	f000 80d6 	beq.w	800ea3a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e88e:	4b72      	ldr	r3, [pc, #456]	@ (800ea58 <icmp_input+0x228>)
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	4a71      	ldr	r2, [pc, #452]	@ (800ea58 <icmp_input+0x228>)
 800e894:	6812      	ldr	r2, [r2, #0]
 800e896:	4611      	mov	r1, r2
 800e898:	4618      	mov	r0, r3
 800e89a:	f000 fc13 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f040 80cc 	bne.w	800ea3e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	891b      	ldrh	r3, [r3, #8]
 800e8aa:	2b07      	cmp	r3, #7
 800e8ac:	f240 80c0 	bls.w	800ea30 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7f7 fe0e 	bl	80064d2 <inet_chksum_pbuf>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7f9 f981 	bl	8007bc4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800e8c2:	e0c5      	b.n	800ea50 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e8c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e8c6:	330e      	adds	r3, #14
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7f9 f8e4 	bl	8007a98 <pbuf_add_header>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d04b      	beq.n	800e96e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	891a      	ldrh	r2, [r3, #8]
 800e8da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e8dc:	4413      	add	r3, r2
 800e8de:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	891b      	ldrh	r3, [r3, #8]
 800e8e4:	8b7a      	ldrh	r2, [r7, #26]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	f0c0 80ab 	bcc.w	800ea42 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e8ec:	8b7b      	ldrh	r3, [r7, #26]
 800e8ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	200e      	movs	r0, #14
 800e8f6:	f7f8 fe81 	bl	80075fc <pbuf_alloc>
 800e8fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	f000 80a1 	beq.w	800ea46 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	895b      	ldrh	r3, [r3, #10]
 800e908:	461a      	mov	r2, r3
 800e90a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e90c:	3308      	adds	r3, #8
 800e90e:	429a      	cmp	r2, r3
 800e910:	d203      	bcs.n	800e91a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e912:	6978      	ldr	r0, [r7, #20]
 800e914:	f7f9 f956 	bl	8007bc4 <pbuf_free>
          goto icmperr;
 800e918:	e096      	b.n	800ea48 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e920:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e922:	4618      	mov	r0, r3
 800e924:	f001 fdf1 	bl	801050a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e928:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e92a:	4619      	mov	r1, r3
 800e92c:	6978      	ldr	r0, [r7, #20]
 800e92e:	f7f9 f8c3 	bl	8007ab8 <pbuf_remove_header>
 800e932:	4603      	mov	r3, r0
 800e934:	2b00      	cmp	r3, #0
 800e936:	d009      	beq.n	800e94c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e938:	4b49      	ldr	r3, [pc, #292]	@ (800ea60 <icmp_input+0x230>)
 800e93a:	22b6      	movs	r2, #182	@ 0xb6
 800e93c:	4949      	ldr	r1, [pc, #292]	@ (800ea64 <icmp_input+0x234>)
 800e93e:	484a      	ldr	r0, [pc, #296]	@ (800ea68 <icmp_input+0x238>)
 800e940:	f001 fc16 	bl	8010170 <iprintf>
          pbuf_free(r);
 800e944:	6978      	ldr	r0, [r7, #20]
 800e946:	f7f9 f93d 	bl	8007bc4 <pbuf_free>
          goto icmperr;
 800e94a:	e07d      	b.n	800ea48 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e94c:	6879      	ldr	r1, [r7, #4]
 800e94e:	6978      	ldr	r0, [r7, #20]
 800e950:	f7f9 fa50 	bl	8007df4 <pbuf_copy>
 800e954:	4603      	mov	r3, r0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d003      	beq.n	800e962 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e95a:	6978      	ldr	r0, [r7, #20]
 800e95c:	f7f9 f932 	bl	8007bc4 <pbuf_free>
          goto icmperr;
 800e960:	e072      	b.n	800ea48 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f7f9 f92e 	bl	8007bc4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	607b      	str	r3, [r7, #4]
 800e96c:	e00f      	b.n	800e98e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e96e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e970:	330e      	adds	r3, #14
 800e972:	4619      	mov	r1, r3
 800e974:	6878      	ldr	r0, [r7, #4]
 800e976:	f7f9 f89f 	bl	8007ab8 <pbuf_remove_header>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d006      	beq.n	800e98e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e980:	4b37      	ldr	r3, [pc, #220]	@ (800ea60 <icmp_input+0x230>)
 800e982:	22c7      	movs	r2, #199	@ 0xc7
 800e984:	4939      	ldr	r1, [pc, #228]	@ (800ea6c <icmp_input+0x23c>)
 800e986:	4838      	ldr	r0, [pc, #224]	@ (800ea68 <icmp_input+0x238>)
 800e988:	f001 fbf2 	bl	8010170 <iprintf>
          goto icmperr;
 800e98c:	e05c      	b.n	800ea48 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e994:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e996:	4619      	mov	r1, r3
 800e998:	6878      	ldr	r0, [r7, #4]
 800e99a:	f7f9 f87d 	bl	8007a98 <pbuf_add_header>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d13c      	bne.n	800ea1e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	681a      	ldr	r2, [r3, #0]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e9b2:	4b29      	ldr	r3, [pc, #164]	@ (800ea58 <icmp_input+0x228>)
 800e9b4:	691a      	ldr	r2, [r3, #16]
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	885b      	ldrh	r3, [r3, #2]
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d907      	bls.n	800e9de <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	885b      	ldrh	r3, [r3, #2]
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	3309      	adds	r3, #9
 800e9d6:	b29a      	uxth	r2, r3
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	805a      	strh	r2, [r3, #2]
 800e9dc:	e006      	b.n	800e9ec <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	885b      	ldrh	r3, [r3, #2]
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	3308      	adds	r3, #8
 800e9e6:	b29a      	uxth	r2, r3
 800e9e8:	693b      	ldr	r3, [r7, #16]
 800e9ea:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	22ff      	movs	r2, #255	@ 0xff
 800e9f0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	729a      	strb	r2, [r3, #10]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	9302      	str	r3, [sp, #8]
 800ea00:	2301      	movs	r3, #1
 800ea02:	9301      	str	r3, [sp, #4]
 800ea04:	2300      	movs	r3, #0
 800ea06:	9300      	str	r3, [sp, #0]
 800ea08:	23ff      	movs	r3, #255	@ 0xff
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	69f9      	ldr	r1, [r7, #28]
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f000 fa80 	bl	800ef14 <ip4_output_if>
 800ea14:	4603      	mov	r3, r0
 800ea16:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800ea18:	e001      	b.n	800ea1e <icmp_input+0x1ee>
      break;
 800ea1a:	bf00      	nop
 800ea1c:	e000      	b.n	800ea20 <icmp_input+0x1f0>
      break;
 800ea1e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f7f9 f8cf 	bl	8007bc4 <pbuf_free>
  return;
 800ea26:	e013      	b.n	800ea50 <icmp_input+0x220>
    goto lenerr;
 800ea28:	bf00      	nop
 800ea2a:	e002      	b.n	800ea32 <icmp_input+0x202>
    goto lenerr;
 800ea2c:	bf00      	nop
 800ea2e:	e000      	b.n	800ea32 <icmp_input+0x202>
        goto lenerr;
 800ea30:	bf00      	nop
lenerr:
  pbuf_free(p);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7f9 f8c6 	bl	8007bc4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ea38:	e00a      	b.n	800ea50 <icmp_input+0x220>
        goto icmperr;
 800ea3a:	bf00      	nop
 800ea3c:	e004      	b.n	800ea48 <icmp_input+0x218>
        goto icmperr;
 800ea3e:	bf00      	nop
 800ea40:	e002      	b.n	800ea48 <icmp_input+0x218>
          goto icmperr;
 800ea42:	bf00      	nop
 800ea44:	e000      	b.n	800ea48 <icmp_input+0x218>
          goto icmperr;
 800ea46:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f7f9 f8bb 	bl	8007bc4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800ea4e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800ea50:	3728      	adds	r7, #40	@ 0x28
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	240002bc 	.word	0x240002bc
 800ea5c:	240002d0 	.word	0x240002d0
 800ea60:	08013640 	.word	0x08013640
 800ea64:	08013678 	.word	0x08013678
 800ea68:	080136b0 	.word	0x080136b0
 800ea6c:	080136d8 	.word	0x080136d8

0800ea70 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
 800ea78:	460b      	mov	r3, r1
 800ea7a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800ea7c:	78fb      	ldrb	r3, [r7, #3]
 800ea7e:	461a      	mov	r2, r3
 800ea80:	2103      	movs	r1, #3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f814 	bl	800eab0 <icmp_send_response>
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800ea9c:	78fb      	ldrb	r3, [r7, #3]
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	210b      	movs	r1, #11
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 f804 	bl	800eab0 <icmp_send_response>
}
 800eaa8:	bf00      	nop
 800eaaa:	3708      	adds	r7, #8
 800eaac:	46bd      	mov	sp, r7
 800eaae:	bd80      	pop	{r7, pc}

0800eab0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b08c      	sub	sp, #48	@ 0x30
 800eab4:	af04      	add	r7, sp, #16
 800eab6:	6078      	str	r0, [r7, #4]
 800eab8:	460b      	mov	r3, r1
 800eaba:	70fb      	strb	r3, [r7, #3]
 800eabc:	4613      	mov	r3, r2
 800eabe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800eac0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eac4:	2124      	movs	r1, #36	@ 0x24
 800eac6:	2022      	movs	r0, #34	@ 0x22
 800eac8:	f7f8 fd98 	bl	80075fc <pbuf_alloc>
 800eacc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d056      	beq.n	800eb82 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	895b      	ldrh	r3, [r3, #10]
 800ead8:	2b23      	cmp	r3, #35	@ 0x23
 800eada:	d806      	bhi.n	800eaea <icmp_send_response+0x3a>
 800eadc:	4b2b      	ldr	r3, [pc, #172]	@ (800eb8c <icmp_send_response+0xdc>)
 800eade:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800eae2:	492b      	ldr	r1, [pc, #172]	@ (800eb90 <icmp_send_response+0xe0>)
 800eae4:	482b      	ldr	r0, [pc, #172]	@ (800eb94 <icmp_send_response+0xe4>)
 800eae6:	f001 fb43 	bl	8010170 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	78fa      	ldrb	r2, [r7, #3]
 800eafa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	78ba      	ldrb	r2, [r7, #2]
 800eb00:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	2200      	movs	r2, #0
 800eb06:	711a      	strb	r2, [r3, #4]
 800eb08:	2200      	movs	r2, #0
 800eb0a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	719a      	strb	r2, [r3, #6]
 800eb12:	2200      	movs	r2, #0
 800eb14:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	685b      	ldr	r3, [r3, #4]
 800eb1a:	f103 0008 	add.w	r0, r3, #8
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	221c      	movs	r2, #28
 800eb24:	4619      	mov	r1, r3
 800eb26:	f001 fcf0 	bl	801050a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	68db      	ldr	r3, [r3, #12]
 800eb2e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800eb30:	f107 030c 	add.w	r3, r7, #12
 800eb34:	4618      	mov	r0, r3
 800eb36:	f000 f82f 	bl	800eb98 <ip4_route>
 800eb3a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d01b      	beq.n	800eb7a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2200      	movs	r2, #0
 800eb46:	709a      	strb	r2, [r3, #2]
 800eb48:	2200      	movs	r2, #0
 800eb4a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	895b      	ldrh	r3, [r3, #10]
 800eb50:	4619      	mov	r1, r3
 800eb52:	6978      	ldr	r0, [r7, #20]
 800eb54:	f7f7 fcab 	bl	80064ae <inet_chksum>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800eb60:	f107 020c 	add.w	r2, r7, #12
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	9302      	str	r3, [sp, #8]
 800eb68:	2301      	movs	r3, #1
 800eb6a:	9301      	str	r3, [sp, #4]
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	23ff      	movs	r3, #255	@ 0xff
 800eb72:	2100      	movs	r1, #0
 800eb74:	69f8      	ldr	r0, [r7, #28]
 800eb76:	f000 f9cd 	bl	800ef14 <ip4_output_if>
  }
  pbuf_free(q);
 800eb7a:	69f8      	ldr	r0, [r7, #28]
 800eb7c:	f7f9 f822 	bl	8007bc4 <pbuf_free>
 800eb80:	e000      	b.n	800eb84 <icmp_send_response+0xd4>
    return;
 800eb82:	bf00      	nop
}
 800eb84:	3720      	adds	r7, #32
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	08013640 	.word	0x08013640
 800eb90:	0801370c 	.word	0x0801370c
 800eb94:	080136b0 	.word	0x080136b0

0800eb98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b085      	sub	sp, #20
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800eba0:	4b33      	ldr	r3, [pc, #204]	@ (800ec70 <ip4_route+0xd8>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	e036      	b.n	800ec16 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ebae:	f003 0301 	and.w	r3, r3, #1
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d02b      	beq.n	800ec10 <ip4_route+0x78>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ebbe:	089b      	lsrs	r3, r3, #2
 800ebc0:	f003 0301 	and.w	r3, r3, #1
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d022      	beq.n	800ec10 <ip4_route+0x78>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	3304      	adds	r3, #4
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d01d      	beq.n	800ec10 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	3304      	adds	r3, #4
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	405a      	eors	r2, r3
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4013      	ands	r3, r2
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d101      	bne.n	800ebf0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	e038      	b.n	800ec62 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ebf6:	f003 0302 	and.w	r3, r3, #2
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d108      	bne.n	800ec10 <ip4_route+0x78>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	330c      	adds	r3, #12
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d101      	bne.n	800ec10 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	e028      	b.n	800ec62 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	60fb      	str	r3, [r7, #12]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1c5      	bne.n	800eba8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ec1c:	4b15      	ldr	r3, [pc, #84]	@ (800ec74 <ip4_route+0xdc>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d01a      	beq.n	800ec5a <ip4_route+0xc2>
 800ec24:	4b13      	ldr	r3, [pc, #76]	@ (800ec74 <ip4_route+0xdc>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ec2c:	f003 0301 	and.w	r3, r3, #1
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d012      	beq.n	800ec5a <ip4_route+0xc2>
 800ec34:	4b0f      	ldr	r3, [pc, #60]	@ (800ec74 <ip4_route+0xdc>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ec3c:	f003 0304 	and.w	r3, r3, #4
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d00a      	beq.n	800ec5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ec44:	4b0b      	ldr	r3, [pc, #44]	@ (800ec74 <ip4_route+0xdc>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	3304      	adds	r3, #4
 800ec4a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d004      	beq.n	800ec5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	2b7f      	cmp	r3, #127	@ 0x7f
 800ec58:	d101      	bne.n	800ec5e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	e001      	b.n	800ec62 <ip4_route+0xca>
  }

  return netif_default;
 800ec5e:	4b05      	ldr	r3, [pc, #20]	@ (800ec74 <ip4_route+0xdc>)
 800ec60:	681b      	ldr	r3, [r3, #0]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3714      	adds	r7, #20
 800ec66:	46bd      	mov	sp, r7
 800ec68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6c:	4770      	bx	lr
 800ec6e:	bf00      	nop
 800ec70:	240031cc 	.word	0x240031cc
 800ec74:	240031d0 	.word	0x240031d0

0800ec78 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ec86:	f003 0301 	and.w	r3, r3, #1
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d016      	beq.n	800ecbe <ip4_input_accept+0x46>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3304      	adds	r3, #4
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d011      	beq.n	800ecbe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ec9a:	4b0b      	ldr	r3, [pc, #44]	@ (800ecc8 <ip4_input_accept+0x50>)
 800ec9c:	695a      	ldr	r2, [r3, #20]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	3304      	adds	r3, #4
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d008      	beq.n	800ecba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800eca8:	4b07      	ldr	r3, [pc, #28]	@ (800ecc8 <ip4_input_accept+0x50>)
 800ecaa:	695b      	ldr	r3, [r3, #20]
 800ecac:	6879      	ldr	r1, [r7, #4]
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f000 fa08 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800ecb4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d001      	beq.n	800ecbe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	e000      	b.n	800ecc0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	3708      	adds	r7, #8
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	bd80      	pop	{r7, pc}
 800ecc8:	240002bc 	.word	0x240002bc

0800eccc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b086      	sub	sp, #24
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
 800ecd4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	685b      	ldr	r3, [r3, #4]
 800ecda:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	091b      	lsrs	r3, r3, #4
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b04      	cmp	r3, #4
 800ece6:	d004      	beq.n	800ecf2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7f8 ff6b 	bl	8007bc4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	e107      	b.n	800ef02 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	f003 030f 	and.w	r3, r3, #15
 800ecfa:	b2db      	uxtb	r3, r3
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	885b      	ldrh	r3, [r3, #2]
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f7f7 fb45 	bl	8006398 <lwip_htons>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	891b      	ldrh	r3, [r3, #8]
 800ed16:	89ba      	ldrh	r2, [r7, #12]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d204      	bcs.n	800ed26 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800ed1c:	89bb      	ldrh	r3, [r7, #12]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f7f8 fdc9 	bl	80078b8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	895b      	ldrh	r3, [r3, #10]
 800ed2a:	89fa      	ldrh	r2, [r7, #14]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d807      	bhi.n	800ed40 <ip4_input+0x74>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	891b      	ldrh	r3, [r3, #8]
 800ed34:	89ba      	ldrh	r2, [r7, #12]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d802      	bhi.n	800ed40 <ip4_input+0x74>
 800ed3a:	89fb      	ldrh	r3, [r7, #14]
 800ed3c:	2b13      	cmp	r3, #19
 800ed3e:	d804      	bhi.n	800ed4a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7f8 ff3f 	bl	8007bc4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800ed46:	2300      	movs	r3, #0
 800ed48:	e0db      	b.n	800ef02 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	691b      	ldr	r3, [r3, #16]
 800ed4e:	4a6f      	ldr	r2, [pc, #444]	@ (800ef0c <ip4_input+0x240>)
 800ed50:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	4a6d      	ldr	r2, [pc, #436]	@ (800ef0c <ip4_input+0x240>)
 800ed58:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ed5a:	4b6c      	ldr	r3, [pc, #432]	@ (800ef0c <ip4_input+0x240>)
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ed62:	2be0      	cmp	r3, #224	@ 0xe0
 800ed64:	d112      	bne.n	800ed8c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ed6c:	f003 0301 	and.w	r3, r3, #1
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d007      	beq.n	800ed86 <ip4_input+0xba>
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	3304      	adds	r3, #4
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <ip4_input+0xba>
      netif = inp;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	613b      	str	r3, [r7, #16]
 800ed84:	e02a      	b.n	800eddc <ip4_input+0x110>
    } else {
      netif = NULL;
 800ed86:	2300      	movs	r3, #0
 800ed88:	613b      	str	r3, [r7, #16]
 800ed8a:	e027      	b.n	800eddc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800ed8c:	6838      	ldr	r0, [r7, #0]
 800ed8e:	f7ff ff73 	bl	800ec78 <ip4_input_accept>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <ip4_input+0xd2>
      netif = inp;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	613b      	str	r3, [r7, #16]
 800ed9c:	e01e      	b.n	800eddc <ip4_input+0x110>
    } else {
      netif = NULL;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800eda2:	4b5a      	ldr	r3, [pc, #360]	@ (800ef0c <ip4_input+0x240>)
 800eda4:	695b      	ldr	r3, [r3, #20]
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b7f      	cmp	r3, #127	@ 0x7f
 800edaa:	d017      	beq.n	800eddc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800edac:	4b58      	ldr	r3, [pc, #352]	@ (800ef10 <ip4_input+0x244>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	613b      	str	r3, [r7, #16]
 800edb2:	e00e      	b.n	800edd2 <ip4_input+0x106>
          if (netif == inp) {
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d006      	beq.n	800edca <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800edbc:	6938      	ldr	r0, [r7, #16]
 800edbe:	f7ff ff5b 	bl	800ec78 <ip4_input_accept>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d108      	bne.n	800edda <ip4_input+0x10e>
 800edc8:	e000      	b.n	800edcc <ip4_input+0x100>
            continue;
 800edca:	bf00      	nop
        NETIF_FOREACH(netif) {
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	613b      	str	r3, [r7, #16]
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1ed      	bne.n	800edb4 <ip4_input+0xe8>
 800edd8:	e000      	b.n	800eddc <ip4_input+0x110>
            break;
 800edda:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800eddc:	4b4b      	ldr	r3, [pc, #300]	@ (800ef0c <ip4_input+0x240>)
 800edde:	691b      	ldr	r3, [r3, #16]
 800ede0:	6839      	ldr	r1, [r7, #0]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f000 f96e 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	d105      	bne.n	800edfa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800edee:	4b47      	ldr	r3, [pc, #284]	@ (800ef0c <ip4_input+0x240>)
 800edf0:	691b      	ldr	r3, [r3, #16]
 800edf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800edf6:	2be0      	cmp	r3, #224	@ 0xe0
 800edf8:	d104      	bne.n	800ee04 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f7f8 fee2 	bl	8007bc4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	e07e      	b.n	800ef02 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800ee04:	693b      	ldr	r3, [r7, #16]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d104      	bne.n	800ee14 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f7f8 feda 	bl	8007bc4 <pbuf_free>
    return ERR_OK;
 800ee10:	2300      	movs	r3, #0
 800ee12:	e076      	b.n	800ef02 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	88db      	ldrh	r3, [r3, #6]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800ee20:	4013      	ands	r3, r2
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d00b      	beq.n	800ee3e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 fc92 	bl	800f750 <ip4_reass>
 800ee2c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d101      	bne.n	800ee38 <ip4_input+0x16c>
      return ERR_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	e064      	b.n	800ef02 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ee3e:	4a33      	ldr	r2, [pc, #204]	@ (800ef0c <ip4_input+0x240>)
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ee44:	4a31      	ldr	r2, [pc, #196]	@ (800ef0c <ip4_input+0x240>)
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ee4a:	4a30      	ldr	r2, [pc, #192]	@ (800ef0c <ip4_input+0x240>)
 800ee4c:	697b      	ldr	r3, [r7, #20]
 800ee4e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ee50:	697b      	ldr	r3, [r7, #20]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 030f 	and.w	r3, r3, #15
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	461a      	mov	r2, r3
 800ee60:	4b2a      	ldr	r3, [pc, #168]	@ (800ef0c <ip4_input+0x240>)
 800ee62:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ee64:	89fb      	ldrh	r3, [r7, #14]
 800ee66:	4619      	mov	r1, r3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f7f8 fe25 	bl	8007ab8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	7a5b      	ldrb	r3, [r3, #9]
 800ee72:	2b11      	cmp	r3, #17
 800ee74:	d006      	beq.n	800ee84 <ip4_input+0x1b8>
 800ee76:	2b11      	cmp	r3, #17
 800ee78:	dc13      	bgt.n	800eea2 <ip4_input+0x1d6>
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d00c      	beq.n	800ee98 <ip4_input+0x1cc>
 800ee7e:	2b06      	cmp	r3, #6
 800ee80:	d005      	beq.n	800ee8e <ip4_input+0x1c2>
 800ee82:	e00e      	b.n	800eea2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ee84:	6839      	ldr	r1, [r7, #0]
 800ee86:	6878      	ldr	r0, [r7, #4]
 800ee88:	f7fe fc42 	bl	800d710 <udp_input>
        break;
 800ee8c:	e026      	b.n	800eedc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ee8e:	6839      	ldr	r1, [r7, #0]
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f7fa fcc1 	bl	8009818 <tcp_input>
        break;
 800ee96:	e021      	b.n	800eedc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ee98:	6839      	ldr	r1, [r7, #0]
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f7ff fcc8 	bl	800e830 <icmp_input>
        break;
 800eea0:	e01c      	b.n	800eedc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eea2:	4b1a      	ldr	r3, [pc, #104]	@ (800ef0c <ip4_input+0x240>)
 800eea4:	695b      	ldr	r3, [r3, #20]
 800eea6:	6939      	ldr	r1, [r7, #16]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f000 f90b 	bl	800f0c4 <ip4_addr_isbroadcast_u32>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10f      	bne.n	800eed4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800eeb4:	4b15      	ldr	r3, [pc, #84]	@ (800ef0c <ip4_input+0x240>)
 800eeb6:	695b      	ldr	r3, [r3, #20]
 800eeb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800eebc:	2be0      	cmp	r3, #224	@ 0xe0
 800eebe:	d009      	beq.n	800eed4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800eec0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800eec4:	4619      	mov	r1, r3
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7f8 fe69 	bl	8007b9e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800eecc:	2102      	movs	r1, #2
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f7ff fdce 	bl	800ea70 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f7f8 fe75 	bl	8007bc4 <pbuf_free>
        break;
 800eeda:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800eedc:	4b0b      	ldr	r3, [pc, #44]	@ (800ef0c <ip4_input+0x240>)
 800eede:	2200      	movs	r2, #0
 800eee0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800eee2:	4b0a      	ldr	r3, [pc, #40]	@ (800ef0c <ip4_input+0x240>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800eee8:	4b08      	ldr	r3, [pc, #32]	@ (800ef0c <ip4_input+0x240>)
 800eeea:	2200      	movs	r2, #0
 800eeec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800eeee:	4b07      	ldr	r3, [pc, #28]	@ (800ef0c <ip4_input+0x240>)
 800eef0:	2200      	movs	r2, #0
 800eef2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eef4:	4b05      	ldr	r3, [pc, #20]	@ (800ef0c <ip4_input+0x240>)
 800eef6:	2200      	movs	r2, #0
 800eef8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800eefa:	4b04      	ldr	r3, [pc, #16]	@ (800ef0c <ip4_input+0x240>)
 800eefc:	2200      	movs	r2, #0
 800eefe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3718      	adds	r7, #24
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	240002bc 	.word	0x240002bc
 800ef10:	240031cc 	.word	0x240031cc

0800ef14 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b08a      	sub	sp, #40	@ 0x28
 800ef18:	af04      	add	r7, sp, #16
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
 800ef20:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d009      	beq.n	800ef40 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d003      	beq.n	800ef3a <ip4_output_if+0x26>
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d102      	bne.n	800ef40 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800ef3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef3c:	3304      	adds	r3, #4
 800ef3e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800ef40:	78fa      	ldrb	r2, [r7, #3]
 800ef42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef44:	9302      	str	r3, [sp, #8]
 800ef46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ef4a:	9301      	str	r3, [sp, #4]
 800ef4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef50:	9300      	str	r3, [sp, #0]
 800ef52:	4613      	mov	r3, r2
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	6979      	ldr	r1, [r7, #20]
 800ef58:	68f8      	ldr	r0, [r7, #12]
 800ef5a:	f000 f805 	bl	800ef68 <ip4_output_if_src>
 800ef5e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3718      	adds	r7, #24
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b088      	sub	sp, #32
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	607a      	str	r2, [r7, #4]
 800ef74:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	7b9b      	ldrb	r3, [r3, #14]
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d006      	beq.n	800ef8c <ip4_output_if_src+0x24>
 800ef7e:	4b4b      	ldr	r3, [pc, #300]	@ (800f0ac <ip4_output_if_src+0x144>)
 800ef80:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800ef84:	494a      	ldr	r1, [pc, #296]	@ (800f0b0 <ip4_output_if_src+0x148>)
 800ef86:	484b      	ldr	r0, [pc, #300]	@ (800f0b4 <ip4_output_if_src+0x14c>)
 800ef88:	f001 f8f2 	bl	8010170 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d060      	beq.n	800f054 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800ef92:	2314      	movs	r3, #20
 800ef94:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800ef96:	2114      	movs	r1, #20
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f7f8 fd7d 	bl	8007a98 <pbuf_add_header>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d002      	beq.n	800efaa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800efa4:	f06f 0301 	mvn.w	r3, #1
 800efa8:	e07c      	b.n	800f0a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	895b      	ldrh	r3, [r3, #10]
 800efb4:	2b13      	cmp	r3, #19
 800efb6:	d806      	bhi.n	800efc6 <ip4_output_if_src+0x5e>
 800efb8:	4b3c      	ldr	r3, [pc, #240]	@ (800f0ac <ip4_output_if_src+0x144>)
 800efba:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800efbe:	493e      	ldr	r1, [pc, #248]	@ (800f0b8 <ip4_output_if_src+0x150>)
 800efc0:	483c      	ldr	r0, [pc, #240]	@ (800f0b4 <ip4_output_if_src+0x14c>)
 800efc2:	f001 f8d5 	bl	8010170 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	78fa      	ldrb	r2, [r7, #3]
 800efca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800efcc:	69fb      	ldr	r3, [r7, #28]
 800efce:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800efd2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681a      	ldr	r2, [r3, #0]
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800efdc:	8b7b      	ldrh	r3, [r7, #26]
 800efde:	089b      	lsrs	r3, r3, #2
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efe8:	b2da      	uxtb	r2, r3
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800efee:	69fb      	ldr	r3, [r7, #28]
 800eff0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800eff4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	891b      	ldrh	r3, [r3, #8]
 800effa:	4618      	mov	r0, r3
 800effc:	f7f7 f9cc 	bl	8006398 <lwip_htons>
 800f000:	4603      	mov	r3, r0
 800f002:	461a      	mov	r2, r3
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f008:	69fb      	ldr	r3, [r7, #28]
 800f00a:	2200      	movs	r2, #0
 800f00c:	719a      	strb	r2, [r3, #6]
 800f00e:	2200      	movs	r2, #0
 800f010:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f012:	4b2a      	ldr	r3, [pc, #168]	@ (800f0bc <ip4_output_if_src+0x154>)
 800f014:	881b      	ldrh	r3, [r3, #0]
 800f016:	4618      	mov	r0, r3
 800f018:	f7f7 f9be 	bl	8006398 <lwip_htons>
 800f01c:	4603      	mov	r3, r0
 800f01e:	461a      	mov	r2, r3
 800f020:	69fb      	ldr	r3, [r7, #28]
 800f022:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f024:	4b25      	ldr	r3, [pc, #148]	@ (800f0bc <ip4_output_if_src+0x154>)
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	3301      	adds	r3, #1
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	4b23      	ldr	r3, [pc, #140]	@ (800f0bc <ip4_output_if_src+0x154>)
 800f02e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d104      	bne.n	800f040 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f036:	4b22      	ldr	r3, [pc, #136]	@ (800f0c0 <ip4_output_if_src+0x158>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	69fb      	ldr	r3, [r7, #28]
 800f03c:	60da      	str	r2, [r3, #12]
 800f03e:	e003      	b.n	800f048 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f048:	69fb      	ldr	r3, [r7, #28]
 800f04a:	2200      	movs	r2, #0
 800f04c:	729a      	strb	r2, [r3, #10]
 800f04e:	2200      	movs	r2, #0
 800f050:	72da      	strb	r2, [r3, #11]
 800f052:	e00f      	b.n	800f074 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	895b      	ldrh	r3, [r3, #10]
 800f058:	2b13      	cmp	r3, #19
 800f05a:	d802      	bhi.n	800f062 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800f05c:	f06f 0301 	mvn.w	r3, #1
 800f060:	e020      	b.n	800f0a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	685b      	ldr	r3, [r3, #4]
 800f066:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	691b      	ldr	r3, [r3, #16]
 800f06c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800f06e:	f107 0314 	add.w	r3, r7, #20
 800f072:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f076:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d00c      	beq.n	800f096 <ip4_output_if_src+0x12e>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	891a      	ldrh	r2, [r3, #8]
 800f080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f082:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f084:	429a      	cmp	r2, r3
 800f086:	d906      	bls.n	800f096 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800f088:	687a      	ldr	r2, [r7, #4]
 800f08a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f000 fd53 	bl	800fb38 <ip4_frag>
 800f092:	4603      	mov	r3, r0
 800f094:	e006      	b.n	800f0a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800f096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f098:	695b      	ldr	r3, [r3, #20]
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	68f9      	ldr	r1, [r7, #12]
 800f09e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f0a0:	4798      	blx	r3
 800f0a2:	4603      	mov	r3, r0
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3720      	adds	r7, #32
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	08013738 	.word	0x08013738
 800f0b0:	0801376c 	.word	0x0801376c
 800f0b4:	08013778 	.word	0x08013778
 800f0b8:	080137a0 	.word	0x080137a0
 800f0bc:	2400332a 	.word	0x2400332a
 800f0c0:	08013b90 	.word	0x08013b90

0800f0c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0d8:	d002      	beq.n	800f0e0 <ip4_addr_isbroadcast_u32+0x1c>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e02a      	b.n	800f13a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f0ea:	f003 0302 	and.w	r3, r3, #2
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d101      	bne.n	800f0f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	e021      	b.n	800f13a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	3304      	adds	r3, #4
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	d101      	bne.n	800f106 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800f102:	2300      	movs	r3, #0
 800f104:	e019      	b.n	800f13a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f106:	68fa      	ldr	r2, [r7, #12]
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	3304      	adds	r3, #4
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	405a      	eors	r2, r3
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	3308      	adds	r3, #8
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4013      	ands	r3, r2
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10d      	bne.n	800f138 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	3308      	adds	r3, #8
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	43da      	mvns	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	3308      	adds	r3, #8
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f130:	429a      	cmp	r2, r3
 800f132:	d101      	bne.n	800f138 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800f134:	2301      	movs	r3, #1
 800f136:	e000      	b.n	800f13a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800f138:	2300      	movs	r3, #0
  }
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3714      	adds	r7, #20
 800f13e:	46bd      	mov	sp, r7
 800f140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f144:	4770      	bx	lr
	...

0800f148 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800f14e:	2300      	movs	r3, #0
 800f150:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800f152:	4b12      	ldr	r3, [pc, #72]	@ (800f19c <ip_reass_tmr+0x54>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800f158:	e018      	b.n	800f18c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	7fdb      	ldrb	r3, [r3, #31]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d00b      	beq.n	800f17a <ip_reass_tmr+0x32>
      r->timer--;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	7fdb      	ldrb	r3, [r3, #31]
 800f166:	3b01      	subs	r3, #1
 800f168:	b2da      	uxtb	r2, r3
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	60fb      	str	r3, [r7, #12]
 800f178:	e008      	b.n	800f18c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800f184:	68b9      	ldr	r1, [r7, #8]
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 f80a 	bl	800f1a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1e3      	bne.n	800f15a <ip_reass_tmr+0x12>
    }
  }
}
 800f192:	bf00      	nop
 800f194:	bf00      	nop
 800f196:	3710      	adds	r7, #16
 800f198:	46bd      	mov	sp, r7
 800f19a:	bd80      	pop	{r7, pc}
 800f19c:	2400332c 	.word	0x2400332c

0800f1a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b088      	sub	sp, #32
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d105      	bne.n	800f1c2 <ip_reass_free_complete_datagram+0x22>
 800f1b6:	4b45      	ldr	r3, [pc, #276]	@ (800f2cc <ip_reass_free_complete_datagram+0x12c>)
 800f1b8:	22ab      	movs	r2, #171	@ 0xab
 800f1ba:	4945      	ldr	r1, [pc, #276]	@ (800f2d0 <ip_reass_free_complete_datagram+0x130>)
 800f1bc:	4845      	ldr	r0, [pc, #276]	@ (800f2d4 <ip_reass_free_complete_datagram+0x134>)
 800f1be:	f000 ffd7 	bl	8010170 <iprintf>
  if (prev != NULL) {
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00a      	beq.n	800f1de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d005      	beq.n	800f1de <ip_reass_free_complete_datagram+0x3e>
 800f1d2:	4b3e      	ldr	r3, [pc, #248]	@ (800f2cc <ip_reass_free_complete_datagram+0x12c>)
 800f1d4:	22ad      	movs	r2, #173	@ 0xad
 800f1d6:	4940      	ldr	r1, [pc, #256]	@ (800f2d8 <ip_reass_free_complete_datagram+0x138>)
 800f1d8:	483e      	ldr	r0, [pc, #248]	@ (800f2d4 <ip_reass_free_complete_datagram+0x134>)
 800f1da:	f000 ffc9 	bl	8010170 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	685b      	ldr	r3, [r3, #4]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	889b      	ldrh	r3, [r3, #4]
 800f1ea:	b29b      	uxth	r3, r3
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d12a      	bne.n	800f246 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	6858      	ldr	r0, [r3, #4]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	3308      	adds	r3, #8
 800f206:	2214      	movs	r2, #20
 800f208:	4619      	mov	r1, r3
 800f20a:	f001 f97e 	bl	801050a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f20e:	2101      	movs	r1, #1
 800f210:	69b8      	ldr	r0, [r7, #24]
 800f212:	f7ff fc3d 	bl	800ea90 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f216:	69b8      	ldr	r0, [r7, #24]
 800f218:	f7f8 fd5c 	bl	8007cd4 <pbuf_clen>
 800f21c:	4603      	mov	r3, r0
 800f21e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f220:	8bfa      	ldrh	r2, [r7, #30]
 800f222:	8a7b      	ldrh	r3, [r7, #18]
 800f224:	4413      	add	r3, r2
 800f226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f22a:	db05      	blt.n	800f238 <ip_reass_free_complete_datagram+0x98>
 800f22c:	4b27      	ldr	r3, [pc, #156]	@ (800f2cc <ip_reass_free_complete_datagram+0x12c>)
 800f22e:	22bc      	movs	r2, #188	@ 0xbc
 800f230:	492a      	ldr	r1, [pc, #168]	@ (800f2dc <ip_reass_free_complete_datagram+0x13c>)
 800f232:	4828      	ldr	r0, [pc, #160]	@ (800f2d4 <ip_reass_free_complete_datagram+0x134>)
 800f234:	f000 ff9c 	bl	8010170 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f238:	8bfa      	ldrh	r2, [r7, #30]
 800f23a:	8a7b      	ldrh	r3, [r7, #18]
 800f23c:	4413      	add	r3, r2
 800f23e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800f240:	69b8      	ldr	r0, [r7, #24]
 800f242:	f7f8 fcbf 	bl	8007bc4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800f24c:	e01f      	b.n	800f28e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	685b      	ldr	r3, [r3, #4]
 800f252:	617b      	str	r3, [r7, #20]
    pcur = p;
 800f254:	69bb      	ldr	r3, [r7, #24]
 800f256:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800f258:	697b      	ldr	r3, [r7, #20]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800f25e:	68f8      	ldr	r0, [r7, #12]
 800f260:	f7f8 fd38 	bl	8007cd4 <pbuf_clen>
 800f264:	4603      	mov	r3, r0
 800f266:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f268:	8bfa      	ldrh	r2, [r7, #30]
 800f26a:	8a7b      	ldrh	r3, [r7, #18]
 800f26c:	4413      	add	r3, r2
 800f26e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f272:	db05      	blt.n	800f280 <ip_reass_free_complete_datagram+0xe0>
 800f274:	4b15      	ldr	r3, [pc, #84]	@ (800f2cc <ip_reass_free_complete_datagram+0x12c>)
 800f276:	22cc      	movs	r2, #204	@ 0xcc
 800f278:	4918      	ldr	r1, [pc, #96]	@ (800f2dc <ip_reass_free_complete_datagram+0x13c>)
 800f27a:	4816      	ldr	r0, [pc, #88]	@ (800f2d4 <ip_reass_free_complete_datagram+0x134>)
 800f27c:	f000 ff78 	bl	8010170 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800f280:	8bfa      	ldrh	r2, [r7, #30]
 800f282:	8a7b      	ldrh	r3, [r7, #18]
 800f284:	4413      	add	r3, r2
 800f286:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f7f8 fc9b 	bl	8007bc4 <pbuf_free>
  while (p != NULL) {
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1dc      	bne.n	800f24e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800f294:	6839      	ldr	r1, [r7, #0]
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 f8c2 	bl	800f420 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800f29c:	4b10      	ldr	r3, [pc, #64]	@ (800f2e0 <ip_reass_free_complete_datagram+0x140>)
 800f29e:	881b      	ldrh	r3, [r3, #0]
 800f2a0:	8bfa      	ldrh	r2, [r7, #30]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d905      	bls.n	800f2b2 <ip_reass_free_complete_datagram+0x112>
 800f2a6:	4b09      	ldr	r3, [pc, #36]	@ (800f2cc <ip_reass_free_complete_datagram+0x12c>)
 800f2a8:	22d2      	movs	r2, #210	@ 0xd2
 800f2aa:	490e      	ldr	r1, [pc, #56]	@ (800f2e4 <ip_reass_free_complete_datagram+0x144>)
 800f2ac:	4809      	ldr	r0, [pc, #36]	@ (800f2d4 <ip_reass_free_complete_datagram+0x134>)
 800f2ae:	f000 ff5f 	bl	8010170 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800f2b2:	4b0b      	ldr	r3, [pc, #44]	@ (800f2e0 <ip_reass_free_complete_datagram+0x140>)
 800f2b4:	881a      	ldrh	r2, [r3, #0]
 800f2b6:	8bfb      	ldrh	r3, [r7, #30]
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	4b08      	ldr	r3, [pc, #32]	@ (800f2e0 <ip_reass_free_complete_datagram+0x140>)
 800f2be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800f2c0:	8bfb      	ldrh	r3, [r7, #30]
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3720      	adds	r7, #32
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	080137d0 	.word	0x080137d0
 800f2d0:	0801380c 	.word	0x0801380c
 800f2d4:	08013818 	.word	0x08013818
 800f2d8:	08013840 	.word	0x08013840
 800f2dc:	08013854 	.word	0x08013854
 800f2e0:	24003330 	.word	0x24003330
 800f2e4:	08013874 	.word	0x08013874

0800f2e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b08a      	sub	sp, #40	@ 0x28
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800f2fe:	2300      	movs	r3, #0
 800f300:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800f302:	2300      	movs	r3, #0
 800f304:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800f306:	4b28      	ldr	r3, [pc, #160]	@ (800f3a8 <ip_reass_remove_oldest_datagram+0xc0>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f30c:	e030      	b.n	800f370 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f310:	695a      	ldr	r2, [r3, #20]
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	429a      	cmp	r2, r3
 800f318:	d10c      	bne.n	800f334 <ip_reass_remove_oldest_datagram+0x4c>
 800f31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f31c:	699a      	ldr	r2, [r3, #24]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	691b      	ldr	r3, [r3, #16]
 800f322:	429a      	cmp	r2, r3
 800f324:	d106      	bne.n	800f334 <ip_reass_remove_oldest_datagram+0x4c>
 800f326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f328:	899a      	ldrh	r2, [r3, #12]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	889b      	ldrh	r3, [r3, #4]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	429a      	cmp	r2, r3
 800f332:	d014      	beq.n	800f35e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800f334:	693b      	ldr	r3, [r7, #16]
 800f336:	3301      	adds	r3, #1
 800f338:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800f33a:	6a3b      	ldr	r3, [r7, #32]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d104      	bne.n	800f34a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800f340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f342:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	61bb      	str	r3, [r7, #24]
 800f348:	e009      	b.n	800f35e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800f34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f34c:	7fda      	ldrb	r2, [r3, #31]
 800f34e:	6a3b      	ldr	r3, [r7, #32]
 800f350:	7fdb      	ldrb	r3, [r3, #31]
 800f352:	429a      	cmp	r2, r3
 800f354:	d803      	bhi.n	800f35e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800f356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f358:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800f35e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d001      	beq.n	800f36a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800f366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f368:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800f36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800f370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1cb      	bne.n	800f30e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800f376:	6a3b      	ldr	r3, [r7, #32]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d008      	beq.n	800f38e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f37c:	69b9      	ldr	r1, [r7, #24]
 800f37e:	6a38      	ldr	r0, [r7, #32]
 800f380:	f7ff ff0e 	bl	800f1a0 <ip_reass_free_complete_datagram>
 800f384:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	4413      	add	r3, r2
 800f38c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	429a      	cmp	r2, r3
 800f394:	da02      	bge.n	800f39c <ip_reass_remove_oldest_datagram+0xb4>
 800f396:	693b      	ldr	r3, [r7, #16]
 800f398:	2b01      	cmp	r3, #1
 800f39a:	dcac      	bgt.n	800f2f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800f39c:	697b      	ldr	r3, [r7, #20]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3728      	adds	r7, #40	@ 0x28
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
 800f3a6:	bf00      	nop
 800f3a8:	2400332c 	.word	0x2400332c

0800f3ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f3b6:	2004      	movs	r0, #4
 800f3b8:	f7f7 fd1e 	bl	8006df8 <memp_malloc>
 800f3bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d110      	bne.n	800f3e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f3c4:	6839      	ldr	r1, [r7, #0]
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7ff ff8e 	bl	800f2e8 <ip_reass_remove_oldest_datagram>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	4293      	cmp	r3, r2
 800f3d2:	dc03      	bgt.n	800f3dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f3d4:	2004      	movs	r0, #4
 800f3d6:	f7f7 fd0f 	bl	8006df8 <memp_malloc>
 800f3da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d101      	bne.n	800f3e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	e016      	b.n	800f414 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f3e6:	2220      	movs	r2, #32
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f001 f818 	bl	8010420 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	220f      	movs	r2, #15
 800f3f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800f3f6:	4b09      	ldr	r3, [pc, #36]	@ (800f41c <ip_reass_enqueue_new_datagram+0x70>)
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800f3fe:	4a07      	ldr	r2, [pc, #28]	@ (800f41c <ip_reass_enqueue_new_datagram+0x70>)
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	3308      	adds	r3, #8
 800f408:	2214      	movs	r2, #20
 800f40a:	6879      	ldr	r1, [r7, #4]
 800f40c:	4618      	mov	r0, r3
 800f40e:	f001 f87c 	bl	801050a <memcpy>
  return ipr;
 800f412:	68fb      	ldr	r3, [r7, #12]
}
 800f414:	4618      	mov	r0, r3
 800f416:	3710      	adds	r7, #16
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	2400332c 	.word	0x2400332c

0800f420 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f42a:	4b10      	ldr	r3, [pc, #64]	@ (800f46c <ip_reass_dequeue_datagram+0x4c>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	429a      	cmp	r2, r3
 800f432:	d104      	bne.n	800f43e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4a0c      	ldr	r2, [pc, #48]	@ (800f46c <ip_reass_dequeue_datagram+0x4c>)
 800f43a:	6013      	str	r3, [r2, #0]
 800f43c:	e00d      	b.n	800f45a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d106      	bne.n	800f452 <ip_reass_dequeue_datagram+0x32>
 800f444:	4b0a      	ldr	r3, [pc, #40]	@ (800f470 <ip_reass_dequeue_datagram+0x50>)
 800f446:	f240 1245 	movw	r2, #325	@ 0x145
 800f44a:	490a      	ldr	r1, [pc, #40]	@ (800f474 <ip_reass_dequeue_datagram+0x54>)
 800f44c:	480a      	ldr	r0, [pc, #40]	@ (800f478 <ip_reass_dequeue_datagram+0x58>)
 800f44e:	f000 fe8f 	bl	8010170 <iprintf>
    prev->next = ipr->next;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f45a:	6879      	ldr	r1, [r7, #4]
 800f45c:	2004      	movs	r0, #4
 800f45e:	f7f7 fd3b 	bl	8006ed8 <memp_free>
}
 800f462:	bf00      	nop
 800f464:	3708      	adds	r7, #8
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	2400332c 	.word	0x2400332c
 800f470:	080137d0 	.word	0x080137d0
 800f474:	08013898 	.word	0x08013898
 800f478:	08013818 	.word	0x08013818

0800f47c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b08c      	sub	sp, #48	@ 0x30
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f488:	2300      	movs	r3, #0
 800f48a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f48c:	2301      	movs	r3, #1
 800f48e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	685b      	ldr	r3, [r3, #4]
 800f494:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	885b      	ldrh	r3, [r3, #2]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7f6 ff7b 	bl	8006398 <lwip_htons>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f4a6:	69fb      	ldr	r3, [r7, #28]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	f003 030f 	and.w	r3, r3, #15
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	009b      	lsls	r3, r3, #2
 800f4b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f4b4:	7e7b      	ldrb	r3, [r7, #25]
 800f4b6:	b29b      	uxth	r3, r3
 800f4b8:	8b7a      	ldrh	r2, [r7, #26]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d202      	bcs.n	800f4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f4be:	f04f 33ff 	mov.w	r3, #4294967295
 800f4c2:	e135      	b.n	800f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f4c4:	7e7b      	ldrb	r3, [r7, #25]
 800f4c6:	b29b      	uxth	r3, r3
 800f4c8:	8b7a      	ldrh	r2, [r7, #26]
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	88db      	ldrh	r3, [r3, #6]
 800f4d2:	b29b      	uxth	r3, r3
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7f6 ff5f 	bl	8006398 <lwip_htons>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	00db      	lsls	r3, r3, #3
 800f4e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f4e6:	68bb      	ldr	r3, [r7, #8]
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800f4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	701a      	strb	r2, [r3, #0]
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	705a      	strb	r2, [r3, #1]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	709a      	strb	r2, [r3, #2]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f500:	8afa      	ldrh	r2, [r7, #22]
 800f502:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f504:	8afa      	ldrh	r2, [r7, #22]
 800f506:	8b7b      	ldrh	r3, [r7, #26]
 800f508:	4413      	add	r3, r2
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f50e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f512:	88db      	ldrh	r3, [r3, #6]
 800f514:	b29b      	uxth	r3, r3
 800f516:	8afa      	ldrh	r2, [r7, #22]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d902      	bls.n	800f522 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f51c:	f04f 33ff 	mov.w	r3, #4294967295
 800f520:	e106      	b.n	800f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	627b      	str	r3, [r7, #36]	@ 0x24
 800f528:	e068      	b.n	800f5fc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f52c:	685b      	ldr	r3, [r3, #4]
 800f52e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f532:	889b      	ldrh	r3, [r3, #4]
 800f534:	b29a      	uxth	r2, r3
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	889b      	ldrh	r3, [r3, #4]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d235      	bcs.n	800f5ac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f544:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d020      	beq.n	800f58e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f54e:	889b      	ldrh	r3, [r3, #4]
 800f550:	b29a      	uxth	r2, r3
 800f552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f554:	88db      	ldrh	r3, [r3, #6]
 800f556:	b29b      	uxth	r3, r3
 800f558:	429a      	cmp	r2, r3
 800f55a:	d307      	bcc.n	800f56c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f55e:	88db      	ldrh	r3, [r3, #6]
 800f560:	b29a      	uxth	r2, r3
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	889b      	ldrh	r3, [r3, #4]
 800f566:	b29b      	uxth	r3, r3
 800f568:	429a      	cmp	r2, r3
 800f56a:	d902      	bls.n	800f572 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f56c:	f04f 33ff 	mov.w	r3, #4294967295
 800f570:	e0de      	b.n	800f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f574:	68ba      	ldr	r2, [r7, #8]
 800f576:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f57a:	88db      	ldrh	r3, [r3, #6]
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f580:	889b      	ldrh	r3, [r3, #4]
 800f582:	b29b      	uxth	r3, r3
 800f584:	429a      	cmp	r2, r3
 800f586:	d03d      	beq.n	800f604 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f588:	2300      	movs	r3, #0
 800f58a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f58c:	e03a      	b.n	800f604 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f590:	88db      	ldrh	r3, [r3, #6]
 800f592:	b29a      	uxth	r2, r3
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	889b      	ldrh	r3, [r3, #4]
 800f598:	b29b      	uxth	r3, r3
 800f59a:	429a      	cmp	r2, r3
 800f59c:	d902      	bls.n	800f5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f59e:	f04f 33ff 	mov.w	r3, #4294967295
 800f5a2:	e0c5      	b.n	800f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	68ba      	ldr	r2, [r7, #8]
 800f5a8:	605a      	str	r2, [r3, #4]
      break;
 800f5aa:	e02b      	b.n	800f604 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ae:	889b      	ldrh	r3, [r3, #4]
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	693b      	ldr	r3, [r7, #16]
 800f5b4:	889b      	ldrh	r3, [r3, #4]
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d102      	bne.n	800f5c2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c0:	e0b6      	b.n	800f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f5c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5c4:	889b      	ldrh	r3, [r3, #4]
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	88db      	ldrh	r3, [r3, #6]
 800f5cc:	b29b      	uxth	r3, r3
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d202      	bcs.n	800f5d8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d6:	e0ab      	b.n	800f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d009      	beq.n	800f5f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5e0:	88db      	ldrh	r3, [r3, #6]
 800f5e2:	b29a      	uxth	r2, r3
 800f5e4:	693b      	ldr	r3, [r7, #16]
 800f5e6:	889b      	ldrh	r3, [r3, #4]
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d001      	beq.n	800f5f2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d193      	bne.n	800f52a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f602:	e000      	b.n	800f606 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f604:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d12d      	bne.n	800f668 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d01c      	beq.n	800f64c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f614:	88db      	ldrh	r3, [r3, #6]
 800f616:	b29a      	uxth	r2, r3
 800f618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f61a:	889b      	ldrh	r3, [r3, #4]
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	429a      	cmp	r2, r3
 800f620:	d906      	bls.n	800f630 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f622:	4b45      	ldr	r3, [pc, #276]	@ (800f738 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f624:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800f628:	4944      	ldr	r1, [pc, #272]	@ (800f73c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f62a:	4845      	ldr	r0, [pc, #276]	@ (800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f62c:	f000 fda0 	bl	8010170 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f638:	88db      	ldrh	r3, [r3, #6]
 800f63a:	b29a      	uxth	r2, r3
 800f63c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f63e:	889b      	ldrh	r3, [r3, #4]
 800f640:	b29b      	uxth	r3, r3
 800f642:	429a      	cmp	r2, r3
 800f644:	d010      	beq.n	800f668 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	623b      	str	r3, [r7, #32]
 800f64a:	e00d      	b.n	800f668 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	685b      	ldr	r3, [r3, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d006      	beq.n	800f662 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f654:	4b38      	ldr	r3, [pc, #224]	@ (800f738 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f656:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800f65a:	493a      	ldr	r1, [pc, #232]	@ (800f744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f65c:	4838      	ldr	r0, [pc, #224]	@ (800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f65e:	f000 fd87 	bl	8010170 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	68ba      	ldr	r2, [r7, #8]
 800f666:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d105      	bne.n	800f67a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	7f9b      	ldrb	r3, [r3, #30]
 800f672:	f003 0301 	and.w	r3, r3, #1
 800f676:	2b00      	cmp	r3, #0
 800f678:	d059      	beq.n	800f72e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f67a:	6a3b      	ldr	r3, [r7, #32]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d04f      	beq.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	685b      	ldr	r3, [r3, #4]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d006      	beq.n	800f696 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	685b      	ldr	r3, [r3, #4]
 800f68e:	889b      	ldrh	r3, [r3, #4]
 800f690:	b29b      	uxth	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d002      	beq.n	800f69c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	623b      	str	r3, [r7, #32]
 800f69a:	e041      	b.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f69e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800f6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f6a6:	e012      	b.n	800f6ce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800f6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6b0:	88db      	ldrh	r3, [r3, #6]
 800f6b2:	b29a      	uxth	r2, r3
 800f6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6b6:	889b      	ldrh	r3, [r3, #4]
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d002      	beq.n	800f6c4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	623b      	str	r3, [r7, #32]
            break;
 800f6c2:	e007      	b.n	800f6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800f6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800f6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d1e9      	bne.n	800f6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f6d4:	6a3b      	ldr	r3, [r7, #32]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d022      	beq.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	685b      	ldr	r3, [r3, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d106      	bne.n	800f6f0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f6e2:	4b15      	ldr	r3, [pc, #84]	@ (800f738 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f6e4:	f240 12df 	movw	r2, #479	@ 0x1df
 800f6e8:	4917      	ldr	r1, [pc, #92]	@ (800f748 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f6ea:	4815      	ldr	r0, [pc, #84]	@ (800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f6ec:	f000 fd40 	bl	8010170 <iprintf>
          LWIP_ASSERT("sanity check",
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d106      	bne.n	800f70a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f6fc:	4b0e      	ldr	r3, [pc, #56]	@ (800f738 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f6fe:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f702:	4911      	ldr	r1, [pc, #68]	@ (800f748 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f704:	480e      	ldr	r0, [pc, #56]	@ (800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f706:	f000 fd33 	bl	8010170 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f70a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d006      	beq.n	800f720 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f712:	4b09      	ldr	r3, [pc, #36]	@ (800f738 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f714:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800f718:	490c      	ldr	r1, [pc, #48]	@ (800f74c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f71a:	4809      	ldr	r0, [pc, #36]	@ (800f740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f71c:	f000 fd28 	bl	8010170 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f720:	6a3b      	ldr	r3, [r7, #32]
 800f722:	2b00      	cmp	r3, #0
 800f724:	bf14      	ite	ne
 800f726:	2301      	movne	r3, #1
 800f728:	2300      	moveq	r3, #0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	e000      	b.n	800f730 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f72e:	2300      	movs	r3, #0
}
 800f730:	4618      	mov	r0, r3
 800f732:	3730      	adds	r7, #48	@ 0x30
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	080137d0 	.word	0x080137d0
 800f73c:	080138b4 	.word	0x080138b4
 800f740:	08013818 	.word	0x08013818
 800f744:	080138d4 	.word	0x080138d4
 800f748:	0801390c 	.word	0x0801390c
 800f74c:	0801391c 	.word	0x0801391c

0800f750 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08e      	sub	sp, #56	@ 0x38
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	f003 030f 	and.w	r3, r3, #15
 800f766:	b2db      	uxtb	r3, r3
 800f768:	009b      	lsls	r3, r3, #2
 800f76a:	b2db      	uxtb	r3, r3
 800f76c:	2b14      	cmp	r3, #20
 800f76e:	f040 8171 	bne.w	800fa54 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f774:	88db      	ldrh	r3, [r3, #6]
 800f776:	b29b      	uxth	r3, r3
 800f778:	4618      	mov	r0, r3
 800f77a:	f7f6 fe0d 	bl	8006398 <lwip_htons>
 800f77e:	4603      	mov	r3, r0
 800f780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f784:	b29b      	uxth	r3, r3
 800f786:	00db      	lsls	r3, r3, #3
 800f788:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78c:	885b      	ldrh	r3, [r3, #2]
 800f78e:	b29b      	uxth	r3, r3
 800f790:	4618      	mov	r0, r3
 800f792:	f7f6 fe01 	bl	8006398 <lwip_htons>
 800f796:	4603      	mov	r3, r0
 800f798:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	f003 030f 	and.w	r3, r3, #15
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800f7aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f7ae:	b29b      	uxth	r3, r3
 800f7b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	f0c0 8150 	bcc.w	800fa58 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f7b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800f7c0:	1ad3      	subs	r3, r2, r3
 800f7c2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f7f8 fa85 	bl	8007cd4 <pbuf_clen>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f7ce:	4b8c      	ldr	r3, [pc, #560]	@ (800fa00 <ip4_reass+0x2b0>)
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	8c3b      	ldrh	r3, [r7, #32]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	2b0a      	cmp	r3, #10
 800f7da:	dd10      	ble.n	800f7fe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f7dc:	8c3b      	ldrh	r3, [r7, #32]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f7e2:	f7ff fd81 	bl	800f2e8 <ip_reass_remove_oldest_datagram>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 8137 	beq.w	800fa5c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f7ee:	4b84      	ldr	r3, [pc, #528]	@ (800fa00 <ip4_reass+0x2b0>)
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	8c3b      	ldrh	r3, [r7, #32]
 800f7f6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f7f8:	2b0a      	cmp	r3, #10
 800f7fa:	f300 812f 	bgt.w	800fa5c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f7fe:	4b81      	ldr	r3, [pc, #516]	@ (800fa04 <ip4_reass+0x2b4>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	633b      	str	r3, [r7, #48]	@ 0x30
 800f804:	e015      	b.n	800f832 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f808:	695a      	ldr	r2, [r3, #20]
 800f80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d10c      	bne.n	800f82c <ip4_reass+0xdc>
 800f812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f814:	699a      	ldr	r2, [r3, #24]
 800f816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f818:	691b      	ldr	r3, [r3, #16]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d106      	bne.n	800f82c <ip4_reass+0xdc>
 800f81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f820:	899a      	ldrh	r2, [r3, #12]
 800f822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f824:	889b      	ldrh	r3, [r3, #4]
 800f826:	b29b      	uxth	r3, r3
 800f828:	429a      	cmp	r2, r3
 800f82a:	d006      	beq.n	800f83a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	633b      	str	r3, [r7, #48]	@ 0x30
 800f832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f834:	2b00      	cmp	r3, #0
 800f836:	d1e6      	bne.n	800f806 <ip4_reass+0xb6>
 800f838:	e000      	b.n	800f83c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f83a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d109      	bne.n	800f856 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f842:	8c3b      	ldrh	r3, [r7, #32]
 800f844:	4619      	mov	r1, r3
 800f846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f848:	f7ff fdb0 	bl	800f3ac <ip_reass_enqueue_new_datagram>
 800f84c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f850:	2b00      	cmp	r3, #0
 800f852:	d11c      	bne.n	800f88e <ip4_reass+0x13e>
      goto nullreturn;
 800f854:	e105      	b.n	800fa62 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f858:	88db      	ldrh	r3, [r3, #6]
 800f85a:	b29b      	uxth	r3, r3
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7f6 fd9b 	bl	8006398 <lwip_htons>
 800f862:	4603      	mov	r3, r0
 800f864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d110      	bne.n	800f88e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f86e:	89db      	ldrh	r3, [r3, #14]
 800f870:	4618      	mov	r0, r3
 800f872:	f7f6 fd91 	bl	8006398 <lwip_htons>
 800f876:	4603      	mov	r3, r0
 800f878:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d006      	beq.n	800f88e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f882:	3308      	adds	r3, #8
 800f884:	2214      	movs	r2, #20
 800f886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f888:	4618      	mov	r0, r3
 800f88a:	f000 fe3e 	bl	801050a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f890:	88db      	ldrh	r3, [r3, #6]
 800f892:	b29b      	uxth	r3, r3
 800f894:	f003 0320 	and.w	r3, r3, #32
 800f898:	2b00      	cmp	r3, #0
 800f89a:	bf0c      	ite	eq
 800f89c:	2301      	moveq	r3, #1
 800f89e:	2300      	movne	r3, #0
 800f8a0:	b2db      	uxtb	r3, r3
 800f8a2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00e      	beq.n	800f8c8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f8aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f8ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8ae:	4413      	add	r3, r2
 800f8b0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f8b2:	8b7a      	ldrh	r2, [r7, #26]
 800f8b4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800f8b6:	429a      	cmp	r2, r3
 800f8b8:	f0c0 80a0 	bcc.w	800f9fc <ip4_reass+0x2ac>
 800f8bc:	8b7b      	ldrh	r3, [r7, #26]
 800f8be:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	f200 809a 	bhi.w	800f9fc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f8c8:	69fa      	ldr	r2, [r7, #28]
 800f8ca:	6879      	ldr	r1, [r7, #4]
 800f8cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f8ce:	f7ff fdd5 	bl	800f47c <ip_reass_chain_frag_into_datagram_and_validate>
 800f8d2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8da:	f000 809b 	beq.w	800fa14 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f8de:	4b48      	ldr	r3, [pc, #288]	@ (800fa00 <ip4_reass+0x2b0>)
 800f8e0:	881a      	ldrh	r2, [r3, #0]
 800f8e2:	8c3b      	ldrh	r3, [r7, #32]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	4b45      	ldr	r3, [pc, #276]	@ (800fa00 <ip4_reass+0x2b0>)
 800f8ea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f8ec:	69fb      	ldr	r3, [r7, #28]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d00d      	beq.n	800f90e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f8f2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f8f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f8f6:	4413      	add	r3, r2
 800f8f8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8fc:	8a7a      	ldrh	r2, [r7, #18]
 800f8fe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f902:	7f9b      	ldrb	r3, [r3, #30]
 800f904:	f043 0301 	orr.w	r3, r3, #1
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f90c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	2b01      	cmp	r3, #1
 800f912:	d171      	bne.n	800f9f8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f916:	8b9b      	ldrh	r3, [r3, #28]
 800f918:	3314      	adds	r3, #20
 800f91a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f930:	3308      	adds	r3, #8
 800f932:	2214      	movs	r2, #20
 800f934:	4619      	mov	r1, r3
 800f936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f938:	f000 fde7 	bl	801050a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f93c:	8a3b      	ldrh	r3, [r7, #16]
 800f93e:	4618      	mov	r0, r3
 800f940:	f7f6 fd2a 	bl	8006398 <lwip_htons>
 800f944:	4603      	mov	r3, r0
 800f946:	461a      	mov	r2, r3
 800f948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94e:	2200      	movs	r2, #0
 800f950:	719a      	strb	r2, [r3, #6]
 800f952:	2200      	movs	r2, #0
 800f954:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f958:	2200      	movs	r2, #0
 800f95a:	729a      	strb	r2, [r3, #10]
 800f95c:	2200      	movs	r2, #0
 800f95e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f966:	e00d      	b.n	800f984 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f96a:	685b      	ldr	r3, [r3, #4]
 800f96c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f96e:	2114      	movs	r1, #20
 800f970:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800f972:	f7f8 f8a1 	bl	8007ab8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f976:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f7f8 f9e5 	bl	8007d48 <pbuf_cat>
      r = iprh->next_pbuf;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800f984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f986:	2b00      	cmp	r3, #0
 800f988:	d1ee      	bne.n	800f968 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f98a:	4b1e      	ldr	r3, [pc, #120]	@ (800fa04 <ip4_reass+0x2b4>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f990:	429a      	cmp	r2, r3
 800f992:	d102      	bne.n	800f99a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f994:	2300      	movs	r3, #0
 800f996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f998:	e010      	b.n	800f9bc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f99a:	4b1a      	ldr	r3, [pc, #104]	@ (800fa04 <ip4_reass+0x2b4>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f9a0:	e007      	b.n	800f9b2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d006      	beq.n	800f9ba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f9ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1f4      	bne.n	800f9a2 <ip4_reass+0x252>
 800f9b8:	e000      	b.n	800f9bc <ip4_reass+0x26c>
          break;
 800f9ba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f9bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f9be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800f9c0:	f7ff fd2e 	bl	800f420 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7f8 f985 	bl	8007cd4 <pbuf_clen>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f9ce:	4b0c      	ldr	r3, [pc, #48]	@ (800fa00 <ip4_reass+0x2b0>)
 800f9d0:	881b      	ldrh	r3, [r3, #0]
 800f9d2:	8c3a      	ldrh	r2, [r7, #32]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d906      	bls.n	800f9e6 <ip4_reass+0x296>
 800f9d8:	4b0b      	ldr	r3, [pc, #44]	@ (800fa08 <ip4_reass+0x2b8>)
 800f9da:	f240 229b 	movw	r2, #667	@ 0x29b
 800f9de:	490b      	ldr	r1, [pc, #44]	@ (800fa0c <ip4_reass+0x2bc>)
 800f9e0:	480b      	ldr	r0, [pc, #44]	@ (800fa10 <ip4_reass+0x2c0>)
 800f9e2:	f000 fbc5 	bl	8010170 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f9e6:	4b06      	ldr	r3, [pc, #24]	@ (800fa00 <ip4_reass+0x2b0>)
 800f9e8:	881a      	ldrh	r2, [r3, #0]
 800f9ea:	8c3b      	ldrh	r3, [r7, #32]
 800f9ec:	1ad3      	subs	r3, r2, r3
 800f9ee:	b29a      	uxth	r2, r3
 800f9f0:	4b03      	ldr	r3, [pc, #12]	@ (800fa00 <ip4_reass+0x2b0>)
 800f9f2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	e038      	b.n	800fa6a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	e036      	b.n	800fa6a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f9fc:	bf00      	nop
 800f9fe:	e00a      	b.n	800fa16 <ip4_reass+0x2c6>
 800fa00:	24003330 	.word	0x24003330
 800fa04:	2400332c 	.word	0x2400332c
 800fa08:	080137d0 	.word	0x080137d0
 800fa0c:	08013940 	.word	0x08013940
 800fa10:	08013818 	.word	0x08013818
    goto nullreturn_ipr;
 800fa14:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800fa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d106      	bne.n	800fa2a <ip4_reass+0x2da>
 800fa1c:	4b15      	ldr	r3, [pc, #84]	@ (800fa74 <ip4_reass+0x324>)
 800fa1e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800fa22:	4915      	ldr	r1, [pc, #84]	@ (800fa78 <ip4_reass+0x328>)
 800fa24:	4815      	ldr	r0, [pc, #84]	@ (800fa7c <ip4_reass+0x32c>)
 800fa26:	f000 fba3 	bl	8010170 <iprintf>
  if (ipr->p == NULL) {
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d116      	bne.n	800fa60 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800fa32:	4b13      	ldr	r3, [pc, #76]	@ (800fa80 <ip4_reass+0x330>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d006      	beq.n	800fa4a <ip4_reass+0x2fa>
 800fa3c:	4b0d      	ldr	r3, [pc, #52]	@ (800fa74 <ip4_reass+0x324>)
 800fa3e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800fa42:	4910      	ldr	r1, [pc, #64]	@ (800fa84 <ip4_reass+0x334>)
 800fa44:	480d      	ldr	r0, [pc, #52]	@ (800fa7c <ip4_reass+0x32c>)
 800fa46:	f000 fb93 	bl	8010170 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800fa4a:	2100      	movs	r1, #0
 800fa4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fa4e:	f7ff fce7 	bl	800f420 <ip_reass_dequeue_datagram>
 800fa52:	e006      	b.n	800fa62 <ip4_reass+0x312>
    goto nullreturn;
 800fa54:	bf00      	nop
 800fa56:	e004      	b.n	800fa62 <ip4_reass+0x312>
    goto nullreturn;
 800fa58:	bf00      	nop
 800fa5a:	e002      	b.n	800fa62 <ip4_reass+0x312>
      goto nullreturn;
 800fa5c:	bf00      	nop
 800fa5e:	e000      	b.n	800fa62 <ip4_reass+0x312>
  }

nullreturn:
 800fa60:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7f8 f8ae 	bl	8007bc4 <pbuf_free>
  return NULL;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3738      	adds	r7, #56	@ 0x38
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	080137d0 	.word	0x080137d0
 800fa78:	0801395c 	.word	0x0801395c
 800fa7c:	08013818 	.word	0x08013818
 800fa80:	2400332c 	.word	0x2400332c
 800fa84:	08013968 	.word	0x08013968

0800fa88 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800fa8c:	2005      	movs	r0, #5
 800fa8e:	f7f7 f9b3 	bl	8006df8 <memp_malloc>
 800fa92:	4603      	mov	r3, r0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d106      	bne.n	800fab4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800faa6:	4b07      	ldr	r3, [pc, #28]	@ (800fac4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800faa8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800faac:	4906      	ldr	r1, [pc, #24]	@ (800fac8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800faae:	4807      	ldr	r0, [pc, #28]	@ (800facc <ip_frag_free_pbuf_custom_ref+0x34>)
 800fab0:	f000 fb5e 	bl	8010170 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800fab4:	6879      	ldr	r1, [r7, #4]
 800fab6:	2005      	movs	r0, #5
 800fab8:	f7f7 fa0e 	bl	8006ed8 <memp_free>
}
 800fabc:	bf00      	nop
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	080137d0 	.word	0x080137d0
 800fac8:	08013988 	.word	0x08013988
 800facc:	08013818 	.word	0x08013818

0800fad0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d106      	bne.n	800faf0 <ipfrag_free_pbuf_custom+0x20>
 800fae2:	4b11      	ldr	r3, [pc, #68]	@ (800fb28 <ipfrag_free_pbuf_custom+0x58>)
 800fae4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800fae8:	4910      	ldr	r1, [pc, #64]	@ (800fb2c <ipfrag_free_pbuf_custom+0x5c>)
 800faea:	4811      	ldr	r0, [pc, #68]	@ (800fb30 <ipfrag_free_pbuf_custom+0x60>)
 800faec:	f000 fb40 	bl	8010170 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d006      	beq.n	800fb06 <ipfrag_free_pbuf_custom+0x36>
 800faf8:	4b0b      	ldr	r3, [pc, #44]	@ (800fb28 <ipfrag_free_pbuf_custom+0x58>)
 800fafa:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800fafe:	490d      	ldr	r1, [pc, #52]	@ (800fb34 <ipfrag_free_pbuf_custom+0x64>)
 800fb00:	480b      	ldr	r0, [pc, #44]	@ (800fb30 <ipfrag_free_pbuf_custom+0x60>)
 800fb02:	f000 fb35 	bl	8010170 <iprintf>
  if (pcr->original != NULL) {
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	695b      	ldr	r3, [r3, #20]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d004      	beq.n	800fb18 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	695b      	ldr	r3, [r3, #20]
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7f8 f856 	bl	8007bc4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800fb18:	68f8      	ldr	r0, [r7, #12]
 800fb1a:	f7ff ffbd 	bl	800fa98 <ip_frag_free_pbuf_custom_ref>
}
 800fb1e:	bf00      	nop
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	080137d0 	.word	0x080137d0
 800fb2c:	08013994 	.word	0x08013994
 800fb30:	08013818 	.word	0x08013818
 800fb34:	080139a0 	.word	0x080139a0

0800fb38 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b094      	sub	sp, #80	@ 0x50
 800fb3c:	af02      	add	r7, sp, #8
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800fb44:	2300      	movs	r3, #0
 800fb46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fb4e:	3b14      	subs	r3, #20
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	da00      	bge.n	800fb56 <ip4_frag+0x1e>
 800fb54:	3307      	adds	r3, #7
 800fb56:	10db      	asrs	r3, r3, #3
 800fb58:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800fb5a:	2314      	movs	r3, #20
 800fb5c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800fb64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb66:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800fb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f003 030f 	and.w	r3, r3, #15
 800fb70:	b2db      	uxtb	r3, r3
 800fb72:	009b      	lsls	r3, r3, #2
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	2b14      	cmp	r3, #20
 800fb78:	d002      	beq.n	800fb80 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800fb7a:	f06f 0305 	mvn.w	r3, #5
 800fb7e:	e110      	b.n	800fda2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	895b      	ldrh	r3, [r3, #10]
 800fb84:	2b13      	cmp	r3, #19
 800fb86:	d809      	bhi.n	800fb9c <ip4_frag+0x64>
 800fb88:	4b88      	ldr	r3, [pc, #544]	@ (800fdac <ip4_frag+0x274>)
 800fb8a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800fb8e:	4988      	ldr	r1, [pc, #544]	@ (800fdb0 <ip4_frag+0x278>)
 800fb90:	4888      	ldr	r0, [pc, #544]	@ (800fdb4 <ip4_frag+0x27c>)
 800fb92:	f000 faed 	bl	8010170 <iprintf>
 800fb96:	f06f 0305 	mvn.w	r3, #5
 800fb9a:	e102      	b.n	800fda2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb9e:	88db      	ldrh	r3, [r3, #6]
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7f6 fbf8 	bl	8006398 <lwip_htons>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800fbac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fbae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbb2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800fbb6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fbb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fbbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	891b      	ldrh	r3, [r3, #8]
 800fbc2:	3b14      	subs	r3, #20
 800fbc4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800fbc8:	e0e1      	b.n	800fd8e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800fbca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fbcc:	00db      	lsls	r3, r3, #3
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	bf28      	it	cs
 800fbd8:	4613      	movcs	r3, r2
 800fbda:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fbdc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fbe0:	2114      	movs	r1, #20
 800fbe2:	200e      	movs	r0, #14
 800fbe4:	f7f7 fd0a 	bl	80075fc <pbuf_alloc>
 800fbe8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800fbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f000 80d5 	beq.w	800fd9c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf4:	895b      	ldrh	r3, [r3, #10]
 800fbf6:	2b13      	cmp	r3, #19
 800fbf8:	d806      	bhi.n	800fc08 <ip4_frag+0xd0>
 800fbfa:	4b6c      	ldr	r3, [pc, #432]	@ (800fdac <ip4_frag+0x274>)
 800fbfc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800fc00:	496d      	ldr	r1, [pc, #436]	@ (800fdb8 <ip4_frag+0x280>)
 800fc02:	486c      	ldr	r0, [pc, #432]	@ (800fdb4 <ip4_frag+0x27c>)
 800fc04:	f000 fab4 	bl	8010170 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	2214      	movs	r2, #20
 800fc0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fc10:	4618      	mov	r0, r3
 800fc12:	f000 fc7a 	bl	801050a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800fc1c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fc1e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800fc22:	e064      	b.n	800fcee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	895a      	ldrh	r2, [r3, #10]
 800fc28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fc2a:	1ad3      	subs	r3, r2, r3
 800fc2c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	895b      	ldrh	r3, [r3, #10]
 800fc32:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d906      	bls.n	800fc46 <ip4_frag+0x10e>
 800fc38:	4b5c      	ldr	r3, [pc, #368]	@ (800fdac <ip4_frag+0x274>)
 800fc3a:	f240 322d 	movw	r2, #813	@ 0x32d
 800fc3e:	495f      	ldr	r1, [pc, #380]	@ (800fdbc <ip4_frag+0x284>)
 800fc40:	485c      	ldr	r0, [pc, #368]	@ (800fdb4 <ip4_frag+0x27c>)
 800fc42:	f000 fa95 	bl	8010170 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fc46:	8bfa      	ldrh	r2, [r7, #30]
 800fc48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	bf28      	it	cs
 800fc50:	4613      	movcs	r3, r2
 800fc52:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800fc56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d105      	bne.n	800fc6a <ip4_frag+0x132>
        poff = 0;
 800fc5e:	2300      	movs	r3, #0
 800fc60:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	60fb      	str	r3, [r7, #12]
        continue;
 800fc68:	e041      	b.n	800fcee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800fc6a:	f7ff ff0d 	bl	800fa88 <ip_frag_alloc_pbuf_custom_ref>
 800fc6e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800fc70:	69bb      	ldr	r3, [r7, #24]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d103      	bne.n	800fc7e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800fc76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fc78:	f7f7 ffa4 	bl	8007bc4 <pbuf_free>
        goto memerr;
 800fc7c:	e08f      	b.n	800fd9e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc7e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fc84:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800fc86:	4413      	add	r3, r2
 800fc88:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800fc8c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800fc90:	9201      	str	r2, [sp, #4]
 800fc92:	9300      	str	r3, [sp, #0]
 800fc94:	4603      	mov	r3, r0
 800fc96:	2241      	movs	r2, #65	@ 0x41
 800fc98:	2000      	movs	r0, #0
 800fc9a:	f7f7 fdd9 	bl	8007850 <pbuf_alloced_custom>
 800fc9e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fca6:	69b8      	ldr	r0, [r7, #24]
 800fca8:	f7ff fef6 	bl	800fa98 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800fcac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fcae:	f7f7 ff89 	bl	8007bc4 <pbuf_free>
        goto memerr;
 800fcb2:	e074      	b.n	800fd9e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800fcb4:	68f8      	ldr	r0, [r7, #12]
 800fcb6:	f7f8 f825 	bl	8007d04 <pbuf_ref>
      pcr->original = p;
 800fcba:	69bb      	ldr	r3, [r7, #24]
 800fcbc:	68fa      	ldr	r2, [r7, #12]
 800fcbe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	4a3f      	ldr	r2, [pc, #252]	@ (800fdc0 <ip4_frag+0x288>)
 800fcc4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800fcc6:	6979      	ldr	r1, [r7, #20]
 800fcc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fcca:	f7f8 f83d 	bl	8007d48 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800fcce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800fcd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800fcdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d004      	beq.n	800fcee <ip4_frag+0x1b6>
        poff = 0;
 800fce4:	2300      	movs	r3, #0
 800fce6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800fcee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d196      	bne.n	800fc24 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800fcf6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800fcf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800fcfc:	4413      	add	r3, r2
 800fcfe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fd04:	f1a3 0213 	sub.w	r2, r3, #19
 800fd08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	bfcc      	ite	gt
 800fd10:	2301      	movgt	r3, #1
 800fd12:	2300      	movle	r3, #0
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800fd18:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800fd1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd20:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800fd22:	6a3b      	ldr	r3, [r7, #32]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d002      	beq.n	800fd2e <ip4_frag+0x1f6>
 800fd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d003      	beq.n	800fd36 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800fd2e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fd30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800fd34:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fd36:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7f6 fb2d 	bl	8006398 <lwip_htons>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	461a      	mov	r2, r3
 800fd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd44:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800fd46:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd48:	3314      	adds	r3, #20
 800fd4a:	b29b      	uxth	r3, r3
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7f6 fb23 	bl	8006398 <lwip_htons>
 800fd52:	4603      	mov	r3, r0
 800fd54:	461a      	mov	r2, r3
 800fd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd58:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800fd5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	729a      	strb	r2, [r3, #10]
 800fd60:	2200      	movs	r2, #0
 800fd62:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	695b      	ldr	r3, [r3, #20]
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fd6c:	68b8      	ldr	r0, [r7, #8]
 800fd6e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800fd70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fd72:	f7f7 ff27 	bl	8007bc4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800fd76:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fd7a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800fd7c:	1ad3      	subs	r3, r2, r3
 800fd7e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800fd82:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800fd86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800fd88:	4413      	add	r3, r2
 800fd8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800fd8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	f47f af19 	bne.w	800fbca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800fd98:	2300      	movs	r3, #0
 800fd9a:	e002      	b.n	800fda2 <ip4_frag+0x26a>
      goto memerr;
 800fd9c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800fd9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3748      	adds	r7, #72	@ 0x48
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	080137d0 	.word	0x080137d0
 800fdb0:	080139ac 	.word	0x080139ac
 800fdb4:	08013818 	.word	0x08013818
 800fdb8:	080139c8 	.word	0x080139c8
 800fdbc:	080139e8 	.word	0x080139e8
 800fdc0:	0800fad1 	.word	0x0800fad1

0800fdc4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
 800fdcc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800fdce:	230e      	movs	r3, #14
 800fdd0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	895b      	ldrh	r3, [r3, #10]
 800fdd6:	2b0e      	cmp	r3, #14
 800fdd8:	d96e      	bls.n	800feb8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	7bdb      	ldrb	r3, [r3, #15]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d106      	bne.n	800fdf0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fde8:	3301      	adds	r3, #1
 800fdea:	b2da      	uxtb	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	685b      	ldr	r3, [r3, #4]
 800fdf4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800fdf6:	693b      	ldr	r3, [r7, #16]
 800fdf8:	7b1a      	ldrb	r2, [r3, #12]
 800fdfa:	7b5b      	ldrb	r3, [r3, #13]
 800fdfc:	021b      	lsls	r3, r3, #8
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	f003 0301 	and.w	r3, r3, #1
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d023      	beq.n	800fe56 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d10f      	bne.n	800fe36 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fe16:	693b      	ldr	r3, [r7, #16]
 800fe18:	785b      	ldrb	r3, [r3, #1]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d11b      	bne.n	800fe56 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fe22:	2b5e      	cmp	r3, #94	@ 0x5e
 800fe24:	d117      	bne.n	800fe56 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	7b5b      	ldrb	r3, [r3, #13]
 800fe2a:	f043 0310 	orr.w	r3, r3, #16
 800fe2e:	b2da      	uxtb	r2, r3
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	735a      	strb	r2, [r3, #13]
 800fe34:	e00f      	b.n	800fe56 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fe36:	693b      	ldr	r3, [r7, #16]
 800fe38:	2206      	movs	r2, #6
 800fe3a:	4928      	ldr	r1, [pc, #160]	@ (800fedc <ethernet_input+0x118>)
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f000 fadf 	bl	8010400 <memcmp>
 800fe42:	4603      	mov	r3, r0
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d106      	bne.n	800fe56 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	7b5b      	ldrb	r3, [r3, #13]
 800fe4c:	f043 0308 	orr.w	r3, r3, #8
 800fe50:	b2da      	uxtb	r2, r3
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fe56:	89fb      	ldrh	r3, [r7, #14]
 800fe58:	2b08      	cmp	r3, #8
 800fe5a:	d003      	beq.n	800fe64 <ethernet_input+0xa0>
 800fe5c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800fe60:	d014      	beq.n	800fe8c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fe62:	e032      	b.n	800feca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe64:	683b      	ldr	r3, [r7, #0]
 800fe66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe6a:	f003 0308 	and.w	r3, r3, #8
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d024      	beq.n	800febc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fe72:	8afb      	ldrh	r3, [r7, #22]
 800fe74:	4619      	mov	r1, r3
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f7f7 fe1e 	bl	8007ab8 <pbuf_remove_header>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d11e      	bne.n	800fec0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fe82:	6839      	ldr	r1, [r7, #0]
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f7fe ff21 	bl	800eccc <ip4_input>
      break;
 800fe8a:	e013      	b.n	800feb4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800fe92:	f003 0308 	and.w	r3, r3, #8
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d014      	beq.n	800fec4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fe9a:	8afb      	ldrh	r3, [r7, #22]
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f7f7 fe0a 	bl	8007ab8 <pbuf_remove_header>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10e      	bne.n	800fec8 <ethernet_input+0x104>
        etharp_input(p, netif);
 800feaa:	6839      	ldr	r1, [r7, #0]
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7fe f89b 	bl	800dfe8 <etharp_input>
      break;
 800feb2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800feb4:	2300      	movs	r3, #0
 800feb6:	e00c      	b.n	800fed2 <ethernet_input+0x10e>
    goto free_and_return;
 800feb8:	bf00      	nop
 800feba:	e006      	b.n	800feca <ethernet_input+0x106>
        goto free_and_return;
 800febc:	bf00      	nop
 800febe:	e004      	b.n	800feca <ethernet_input+0x106>
        goto free_and_return;
 800fec0:	bf00      	nop
 800fec2:	e002      	b.n	800feca <ethernet_input+0x106>
        goto free_and_return;
 800fec4:	bf00      	nop
 800fec6:	e000      	b.n	800feca <ethernet_input+0x106>
        goto free_and_return;
 800fec8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7f7 fe7a 	bl	8007bc4 <pbuf_free>
  return ERR_OK;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3718      	adds	r7, #24
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	08013b94 	.word	0x08013b94

0800fee0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b086      	sub	sp, #24
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800feee:	8c3b      	ldrh	r3, [r7, #32]
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7f6 fa51 	bl	8006398 <lwip_htons>
 800fef6:	4603      	mov	r3, r0
 800fef8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fefa:	210e      	movs	r1, #14
 800fefc:	68b8      	ldr	r0, [r7, #8]
 800fefe:	f7f7 fdcb 	bl	8007a98 <pbuf_add_header>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d125      	bne.n	800ff54 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	8afa      	ldrh	r2, [r7, #22]
 800ff12:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	2206      	movs	r2, #6
 800ff18:	6839      	ldr	r1, [r7, #0]
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f000 faf5 	bl	801050a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	3306      	adds	r3, #6
 800ff24:	2206      	movs	r2, #6
 800ff26:	6879      	ldr	r1, [r7, #4]
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 faee 	bl	801050a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ff34:	2b06      	cmp	r3, #6
 800ff36:	d006      	beq.n	800ff46 <ethernet_output+0x66>
 800ff38:	4b0a      	ldr	r3, [pc, #40]	@ (800ff64 <ethernet_output+0x84>)
 800ff3a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800ff3e:	490a      	ldr	r1, [pc, #40]	@ (800ff68 <ethernet_output+0x88>)
 800ff40:	480a      	ldr	r0, [pc, #40]	@ (800ff6c <ethernet_output+0x8c>)
 800ff42:	f000 f915 	bl	8010170 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	699b      	ldr	r3, [r3, #24]
 800ff4a:	68b9      	ldr	r1, [r7, #8]
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	4798      	blx	r3
 800ff50:	4603      	mov	r3, r0
 800ff52:	e002      	b.n	800ff5a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800ff54:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800ff56:	f06f 0301 	mvn.w	r3, #1
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3718      	adds	r7, #24
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	080139f8 	.word	0x080139f8
 800ff68:	08013a30 	.word	0x08013a30
 800ff6c:	08013a64 	.word	0x08013a64

0800ff70 <rand>:
 800ff70:	4b16      	ldr	r3, [pc, #88]	@ (800ffcc <rand+0x5c>)
 800ff72:	b510      	push	{r4, lr}
 800ff74:	681c      	ldr	r4, [r3, #0]
 800ff76:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ff78:	b9b3      	cbnz	r3, 800ffa8 <rand+0x38>
 800ff7a:	2018      	movs	r0, #24
 800ff7c:	f000 fb3c 	bl	80105f8 <malloc>
 800ff80:	4602      	mov	r2, r0
 800ff82:	6320      	str	r0, [r4, #48]	@ 0x30
 800ff84:	b920      	cbnz	r0, 800ff90 <rand+0x20>
 800ff86:	4b12      	ldr	r3, [pc, #72]	@ (800ffd0 <rand+0x60>)
 800ff88:	4812      	ldr	r0, [pc, #72]	@ (800ffd4 <rand+0x64>)
 800ff8a:	2152      	movs	r1, #82	@ 0x52
 800ff8c:	f000 facc 	bl	8010528 <__assert_func>
 800ff90:	4911      	ldr	r1, [pc, #68]	@ (800ffd8 <rand+0x68>)
 800ff92:	4b12      	ldr	r3, [pc, #72]	@ (800ffdc <rand+0x6c>)
 800ff94:	e9c0 1300 	strd	r1, r3, [r0]
 800ff98:	4b11      	ldr	r3, [pc, #68]	@ (800ffe0 <rand+0x70>)
 800ff9a:	6083      	str	r3, [r0, #8]
 800ff9c:	230b      	movs	r3, #11
 800ff9e:	8183      	strh	r3, [r0, #12]
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	2001      	movs	r0, #1
 800ffa4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ffa8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ffaa:	480e      	ldr	r0, [pc, #56]	@ (800ffe4 <rand+0x74>)
 800ffac:	690b      	ldr	r3, [r1, #16]
 800ffae:	694c      	ldr	r4, [r1, #20]
 800ffb0:	4a0d      	ldr	r2, [pc, #52]	@ (800ffe8 <rand+0x78>)
 800ffb2:	4358      	muls	r0, r3
 800ffb4:	fb02 0004 	mla	r0, r2, r4, r0
 800ffb8:	fba3 3202 	umull	r3, r2, r3, r2
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	eb40 0002 	adc.w	r0, r0, r2
 800ffc2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800ffc6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ffca:	bd10      	pop	{r4, pc}
 800ffcc:	24000040 	.word	0x24000040
 800ffd0:	08013ba2 	.word	0x08013ba2
 800ffd4:	08013bb9 	.word	0x08013bb9
 800ffd8:	abcd330e 	.word	0xabcd330e
 800ffdc:	e66d1234 	.word	0xe66d1234
 800ffe0:	0005deec 	.word	0x0005deec
 800ffe4:	5851f42d 	.word	0x5851f42d
 800ffe8:	4c957f2d 	.word	0x4c957f2d

0800ffec <std>:
 800ffec:	2300      	movs	r3, #0
 800ffee:	b510      	push	{r4, lr}
 800fff0:	4604      	mov	r4, r0
 800fff2:	e9c0 3300 	strd	r3, r3, [r0]
 800fff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fffa:	6083      	str	r3, [r0, #8]
 800fffc:	8181      	strh	r1, [r0, #12]
 800fffe:	6643      	str	r3, [r0, #100]	@ 0x64
 8010000:	81c2      	strh	r2, [r0, #14]
 8010002:	6183      	str	r3, [r0, #24]
 8010004:	4619      	mov	r1, r3
 8010006:	2208      	movs	r2, #8
 8010008:	305c      	adds	r0, #92	@ 0x5c
 801000a:	f000 fa09 	bl	8010420 <memset>
 801000e:	4b0d      	ldr	r3, [pc, #52]	@ (8010044 <std+0x58>)
 8010010:	6263      	str	r3, [r4, #36]	@ 0x24
 8010012:	4b0d      	ldr	r3, [pc, #52]	@ (8010048 <std+0x5c>)
 8010014:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010016:	4b0d      	ldr	r3, [pc, #52]	@ (801004c <std+0x60>)
 8010018:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801001a:	4b0d      	ldr	r3, [pc, #52]	@ (8010050 <std+0x64>)
 801001c:	6323      	str	r3, [r4, #48]	@ 0x30
 801001e:	4b0d      	ldr	r3, [pc, #52]	@ (8010054 <std+0x68>)
 8010020:	6224      	str	r4, [r4, #32]
 8010022:	429c      	cmp	r4, r3
 8010024:	d006      	beq.n	8010034 <std+0x48>
 8010026:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801002a:	4294      	cmp	r4, r2
 801002c:	d002      	beq.n	8010034 <std+0x48>
 801002e:	33d0      	adds	r3, #208	@ 0xd0
 8010030:	429c      	cmp	r4, r3
 8010032:	d105      	bne.n	8010040 <std+0x54>
 8010034:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801003c:	f000 ba62 	b.w	8010504 <__retarget_lock_init_recursive>
 8010040:	bd10      	pop	{r4, pc}
 8010042:	bf00      	nop
 8010044:	08010251 	.word	0x08010251
 8010048:	08010273 	.word	0x08010273
 801004c:	080102ab 	.word	0x080102ab
 8010050:	080102cf 	.word	0x080102cf
 8010054:	24003334 	.word	0x24003334

08010058 <stdio_exit_handler>:
 8010058:	4a02      	ldr	r2, [pc, #8]	@ (8010064 <stdio_exit_handler+0xc>)
 801005a:	4903      	ldr	r1, [pc, #12]	@ (8010068 <stdio_exit_handler+0x10>)
 801005c:	4803      	ldr	r0, [pc, #12]	@ (801006c <stdio_exit_handler+0x14>)
 801005e:	f000 b869 	b.w	8010134 <_fwalk_sglue>
 8010062:	bf00      	nop
 8010064:	24000034 	.word	0x24000034
 8010068:	08010e0d 	.word	0x08010e0d
 801006c:	24000044 	.word	0x24000044

08010070 <cleanup_stdio>:
 8010070:	6841      	ldr	r1, [r0, #4]
 8010072:	4b0c      	ldr	r3, [pc, #48]	@ (80100a4 <cleanup_stdio+0x34>)
 8010074:	4299      	cmp	r1, r3
 8010076:	b510      	push	{r4, lr}
 8010078:	4604      	mov	r4, r0
 801007a:	d001      	beq.n	8010080 <cleanup_stdio+0x10>
 801007c:	f000 fec6 	bl	8010e0c <_fflush_r>
 8010080:	68a1      	ldr	r1, [r4, #8]
 8010082:	4b09      	ldr	r3, [pc, #36]	@ (80100a8 <cleanup_stdio+0x38>)
 8010084:	4299      	cmp	r1, r3
 8010086:	d002      	beq.n	801008e <cleanup_stdio+0x1e>
 8010088:	4620      	mov	r0, r4
 801008a:	f000 febf 	bl	8010e0c <_fflush_r>
 801008e:	68e1      	ldr	r1, [r4, #12]
 8010090:	4b06      	ldr	r3, [pc, #24]	@ (80100ac <cleanup_stdio+0x3c>)
 8010092:	4299      	cmp	r1, r3
 8010094:	d004      	beq.n	80100a0 <cleanup_stdio+0x30>
 8010096:	4620      	mov	r0, r4
 8010098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801009c:	f000 beb6 	b.w	8010e0c <_fflush_r>
 80100a0:	bd10      	pop	{r4, pc}
 80100a2:	bf00      	nop
 80100a4:	24003334 	.word	0x24003334
 80100a8:	2400339c 	.word	0x2400339c
 80100ac:	24003404 	.word	0x24003404

080100b0 <global_stdio_init.part.0>:
 80100b0:	b510      	push	{r4, lr}
 80100b2:	4b0b      	ldr	r3, [pc, #44]	@ (80100e0 <global_stdio_init.part.0+0x30>)
 80100b4:	4c0b      	ldr	r4, [pc, #44]	@ (80100e4 <global_stdio_init.part.0+0x34>)
 80100b6:	4a0c      	ldr	r2, [pc, #48]	@ (80100e8 <global_stdio_init.part.0+0x38>)
 80100b8:	601a      	str	r2, [r3, #0]
 80100ba:	4620      	mov	r0, r4
 80100bc:	2200      	movs	r2, #0
 80100be:	2104      	movs	r1, #4
 80100c0:	f7ff ff94 	bl	800ffec <std>
 80100c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100c8:	2201      	movs	r2, #1
 80100ca:	2109      	movs	r1, #9
 80100cc:	f7ff ff8e 	bl	800ffec <std>
 80100d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100d4:	2202      	movs	r2, #2
 80100d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100da:	2112      	movs	r1, #18
 80100dc:	f7ff bf86 	b.w	800ffec <std>
 80100e0:	2400346c 	.word	0x2400346c
 80100e4:	24003334 	.word	0x24003334
 80100e8:	08010059 	.word	0x08010059

080100ec <__sfp_lock_acquire>:
 80100ec:	4801      	ldr	r0, [pc, #4]	@ (80100f4 <__sfp_lock_acquire+0x8>)
 80100ee:	f000 ba0a 	b.w	8010506 <__retarget_lock_acquire_recursive>
 80100f2:	bf00      	nop
 80100f4:	24003475 	.word	0x24003475

080100f8 <__sfp_lock_release>:
 80100f8:	4801      	ldr	r0, [pc, #4]	@ (8010100 <__sfp_lock_release+0x8>)
 80100fa:	f000 ba05 	b.w	8010508 <__retarget_lock_release_recursive>
 80100fe:	bf00      	nop
 8010100:	24003475 	.word	0x24003475

08010104 <__sinit>:
 8010104:	b510      	push	{r4, lr}
 8010106:	4604      	mov	r4, r0
 8010108:	f7ff fff0 	bl	80100ec <__sfp_lock_acquire>
 801010c:	6a23      	ldr	r3, [r4, #32]
 801010e:	b11b      	cbz	r3, 8010118 <__sinit+0x14>
 8010110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010114:	f7ff bff0 	b.w	80100f8 <__sfp_lock_release>
 8010118:	4b04      	ldr	r3, [pc, #16]	@ (801012c <__sinit+0x28>)
 801011a:	6223      	str	r3, [r4, #32]
 801011c:	4b04      	ldr	r3, [pc, #16]	@ (8010130 <__sinit+0x2c>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1f5      	bne.n	8010110 <__sinit+0xc>
 8010124:	f7ff ffc4 	bl	80100b0 <global_stdio_init.part.0>
 8010128:	e7f2      	b.n	8010110 <__sinit+0xc>
 801012a:	bf00      	nop
 801012c:	08010071 	.word	0x08010071
 8010130:	2400346c 	.word	0x2400346c

08010134 <_fwalk_sglue>:
 8010134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010138:	4607      	mov	r7, r0
 801013a:	4688      	mov	r8, r1
 801013c:	4614      	mov	r4, r2
 801013e:	2600      	movs	r6, #0
 8010140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010144:	f1b9 0901 	subs.w	r9, r9, #1
 8010148:	d505      	bpl.n	8010156 <_fwalk_sglue+0x22>
 801014a:	6824      	ldr	r4, [r4, #0]
 801014c:	2c00      	cmp	r4, #0
 801014e:	d1f7      	bne.n	8010140 <_fwalk_sglue+0xc>
 8010150:	4630      	mov	r0, r6
 8010152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010156:	89ab      	ldrh	r3, [r5, #12]
 8010158:	2b01      	cmp	r3, #1
 801015a:	d907      	bls.n	801016c <_fwalk_sglue+0x38>
 801015c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010160:	3301      	adds	r3, #1
 8010162:	d003      	beq.n	801016c <_fwalk_sglue+0x38>
 8010164:	4629      	mov	r1, r5
 8010166:	4638      	mov	r0, r7
 8010168:	47c0      	blx	r8
 801016a:	4306      	orrs	r6, r0
 801016c:	3568      	adds	r5, #104	@ 0x68
 801016e:	e7e9      	b.n	8010144 <_fwalk_sglue+0x10>

08010170 <iprintf>:
 8010170:	b40f      	push	{r0, r1, r2, r3}
 8010172:	b507      	push	{r0, r1, r2, lr}
 8010174:	4906      	ldr	r1, [pc, #24]	@ (8010190 <iprintf+0x20>)
 8010176:	ab04      	add	r3, sp, #16
 8010178:	6808      	ldr	r0, [r1, #0]
 801017a:	f853 2b04 	ldr.w	r2, [r3], #4
 801017e:	6881      	ldr	r1, [r0, #8]
 8010180:	9301      	str	r3, [sp, #4]
 8010182:	f000 fb19 	bl	80107b8 <_vfiprintf_r>
 8010186:	b003      	add	sp, #12
 8010188:	f85d eb04 	ldr.w	lr, [sp], #4
 801018c:	b004      	add	sp, #16
 801018e:	4770      	bx	lr
 8010190:	24000040 	.word	0x24000040

08010194 <_puts_r>:
 8010194:	6a03      	ldr	r3, [r0, #32]
 8010196:	b570      	push	{r4, r5, r6, lr}
 8010198:	6884      	ldr	r4, [r0, #8]
 801019a:	4605      	mov	r5, r0
 801019c:	460e      	mov	r6, r1
 801019e:	b90b      	cbnz	r3, 80101a4 <_puts_r+0x10>
 80101a0:	f7ff ffb0 	bl	8010104 <__sinit>
 80101a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101a6:	07db      	lsls	r3, r3, #31
 80101a8:	d405      	bmi.n	80101b6 <_puts_r+0x22>
 80101aa:	89a3      	ldrh	r3, [r4, #12]
 80101ac:	0598      	lsls	r0, r3, #22
 80101ae:	d402      	bmi.n	80101b6 <_puts_r+0x22>
 80101b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101b2:	f000 f9a8 	bl	8010506 <__retarget_lock_acquire_recursive>
 80101b6:	89a3      	ldrh	r3, [r4, #12]
 80101b8:	0719      	lsls	r1, r3, #28
 80101ba:	d502      	bpl.n	80101c2 <_puts_r+0x2e>
 80101bc:	6923      	ldr	r3, [r4, #16]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d135      	bne.n	801022e <_puts_r+0x9a>
 80101c2:	4621      	mov	r1, r4
 80101c4:	4628      	mov	r0, r5
 80101c6:	f000 f8c5 	bl	8010354 <__swsetup_r>
 80101ca:	b380      	cbz	r0, 801022e <_puts_r+0x9a>
 80101cc:	f04f 35ff 	mov.w	r5, #4294967295
 80101d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80101d2:	07da      	lsls	r2, r3, #31
 80101d4:	d405      	bmi.n	80101e2 <_puts_r+0x4e>
 80101d6:	89a3      	ldrh	r3, [r4, #12]
 80101d8:	059b      	lsls	r3, r3, #22
 80101da:	d402      	bmi.n	80101e2 <_puts_r+0x4e>
 80101dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80101de:	f000 f993 	bl	8010508 <__retarget_lock_release_recursive>
 80101e2:	4628      	mov	r0, r5
 80101e4:	bd70      	pop	{r4, r5, r6, pc}
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	da04      	bge.n	80101f4 <_puts_r+0x60>
 80101ea:	69a2      	ldr	r2, [r4, #24]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	dc17      	bgt.n	8010220 <_puts_r+0x8c>
 80101f0:	290a      	cmp	r1, #10
 80101f2:	d015      	beq.n	8010220 <_puts_r+0x8c>
 80101f4:	6823      	ldr	r3, [r4, #0]
 80101f6:	1c5a      	adds	r2, r3, #1
 80101f8:	6022      	str	r2, [r4, #0]
 80101fa:	7019      	strb	r1, [r3, #0]
 80101fc:	68a3      	ldr	r3, [r4, #8]
 80101fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010202:	3b01      	subs	r3, #1
 8010204:	60a3      	str	r3, [r4, #8]
 8010206:	2900      	cmp	r1, #0
 8010208:	d1ed      	bne.n	80101e6 <_puts_r+0x52>
 801020a:	2b00      	cmp	r3, #0
 801020c:	da11      	bge.n	8010232 <_puts_r+0x9e>
 801020e:	4622      	mov	r2, r4
 8010210:	210a      	movs	r1, #10
 8010212:	4628      	mov	r0, r5
 8010214:	f000 f85f 	bl	80102d6 <__swbuf_r>
 8010218:	3001      	adds	r0, #1
 801021a:	d0d7      	beq.n	80101cc <_puts_r+0x38>
 801021c:	250a      	movs	r5, #10
 801021e:	e7d7      	b.n	80101d0 <_puts_r+0x3c>
 8010220:	4622      	mov	r2, r4
 8010222:	4628      	mov	r0, r5
 8010224:	f000 f857 	bl	80102d6 <__swbuf_r>
 8010228:	3001      	adds	r0, #1
 801022a:	d1e7      	bne.n	80101fc <_puts_r+0x68>
 801022c:	e7ce      	b.n	80101cc <_puts_r+0x38>
 801022e:	3e01      	subs	r6, #1
 8010230:	e7e4      	b.n	80101fc <_puts_r+0x68>
 8010232:	6823      	ldr	r3, [r4, #0]
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	6022      	str	r2, [r4, #0]
 8010238:	220a      	movs	r2, #10
 801023a:	701a      	strb	r2, [r3, #0]
 801023c:	e7ee      	b.n	801021c <_puts_r+0x88>
	...

08010240 <puts>:
 8010240:	4b02      	ldr	r3, [pc, #8]	@ (801024c <puts+0xc>)
 8010242:	4601      	mov	r1, r0
 8010244:	6818      	ldr	r0, [r3, #0]
 8010246:	f7ff bfa5 	b.w	8010194 <_puts_r>
 801024a:	bf00      	nop
 801024c:	24000040 	.word	0x24000040

08010250 <__sread>:
 8010250:	b510      	push	{r4, lr}
 8010252:	460c      	mov	r4, r1
 8010254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010258:	f000 f90c 	bl	8010474 <_read_r>
 801025c:	2800      	cmp	r0, #0
 801025e:	bfab      	itete	ge
 8010260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010262:	89a3      	ldrhlt	r3, [r4, #12]
 8010264:	181b      	addge	r3, r3, r0
 8010266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801026a:	bfac      	ite	ge
 801026c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801026e:	81a3      	strhlt	r3, [r4, #12]
 8010270:	bd10      	pop	{r4, pc}

08010272 <__swrite>:
 8010272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010276:	461f      	mov	r7, r3
 8010278:	898b      	ldrh	r3, [r1, #12]
 801027a:	05db      	lsls	r3, r3, #23
 801027c:	4605      	mov	r5, r0
 801027e:	460c      	mov	r4, r1
 8010280:	4616      	mov	r6, r2
 8010282:	d505      	bpl.n	8010290 <__swrite+0x1e>
 8010284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010288:	2302      	movs	r3, #2
 801028a:	2200      	movs	r2, #0
 801028c:	f000 f8e0 	bl	8010450 <_lseek_r>
 8010290:	89a3      	ldrh	r3, [r4, #12]
 8010292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801029a:	81a3      	strh	r3, [r4, #12]
 801029c:	4632      	mov	r2, r6
 801029e:	463b      	mov	r3, r7
 80102a0:	4628      	mov	r0, r5
 80102a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102a6:	f000 b8f7 	b.w	8010498 <_write_r>

080102aa <__sseek>:
 80102aa:	b510      	push	{r4, lr}
 80102ac:	460c      	mov	r4, r1
 80102ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b2:	f000 f8cd 	bl	8010450 <_lseek_r>
 80102b6:	1c43      	adds	r3, r0, #1
 80102b8:	89a3      	ldrh	r3, [r4, #12]
 80102ba:	bf15      	itete	ne
 80102bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80102be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80102c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80102c6:	81a3      	strheq	r3, [r4, #12]
 80102c8:	bf18      	it	ne
 80102ca:	81a3      	strhne	r3, [r4, #12]
 80102cc:	bd10      	pop	{r4, pc}

080102ce <__sclose>:
 80102ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102d2:	f000 b8ad 	b.w	8010430 <_close_r>

080102d6 <__swbuf_r>:
 80102d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102d8:	460e      	mov	r6, r1
 80102da:	4614      	mov	r4, r2
 80102dc:	4605      	mov	r5, r0
 80102de:	b118      	cbz	r0, 80102e8 <__swbuf_r+0x12>
 80102e0:	6a03      	ldr	r3, [r0, #32]
 80102e2:	b90b      	cbnz	r3, 80102e8 <__swbuf_r+0x12>
 80102e4:	f7ff ff0e 	bl	8010104 <__sinit>
 80102e8:	69a3      	ldr	r3, [r4, #24]
 80102ea:	60a3      	str	r3, [r4, #8]
 80102ec:	89a3      	ldrh	r3, [r4, #12]
 80102ee:	071a      	lsls	r2, r3, #28
 80102f0:	d501      	bpl.n	80102f6 <__swbuf_r+0x20>
 80102f2:	6923      	ldr	r3, [r4, #16]
 80102f4:	b943      	cbnz	r3, 8010308 <__swbuf_r+0x32>
 80102f6:	4621      	mov	r1, r4
 80102f8:	4628      	mov	r0, r5
 80102fa:	f000 f82b 	bl	8010354 <__swsetup_r>
 80102fe:	b118      	cbz	r0, 8010308 <__swbuf_r+0x32>
 8010300:	f04f 37ff 	mov.w	r7, #4294967295
 8010304:	4638      	mov	r0, r7
 8010306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010308:	6823      	ldr	r3, [r4, #0]
 801030a:	6922      	ldr	r2, [r4, #16]
 801030c:	1a98      	subs	r0, r3, r2
 801030e:	6963      	ldr	r3, [r4, #20]
 8010310:	b2f6      	uxtb	r6, r6
 8010312:	4283      	cmp	r3, r0
 8010314:	4637      	mov	r7, r6
 8010316:	dc05      	bgt.n	8010324 <__swbuf_r+0x4e>
 8010318:	4621      	mov	r1, r4
 801031a:	4628      	mov	r0, r5
 801031c:	f000 fd76 	bl	8010e0c <_fflush_r>
 8010320:	2800      	cmp	r0, #0
 8010322:	d1ed      	bne.n	8010300 <__swbuf_r+0x2a>
 8010324:	68a3      	ldr	r3, [r4, #8]
 8010326:	3b01      	subs	r3, #1
 8010328:	60a3      	str	r3, [r4, #8]
 801032a:	6823      	ldr	r3, [r4, #0]
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	6022      	str	r2, [r4, #0]
 8010330:	701e      	strb	r6, [r3, #0]
 8010332:	6962      	ldr	r2, [r4, #20]
 8010334:	1c43      	adds	r3, r0, #1
 8010336:	429a      	cmp	r2, r3
 8010338:	d004      	beq.n	8010344 <__swbuf_r+0x6e>
 801033a:	89a3      	ldrh	r3, [r4, #12]
 801033c:	07db      	lsls	r3, r3, #31
 801033e:	d5e1      	bpl.n	8010304 <__swbuf_r+0x2e>
 8010340:	2e0a      	cmp	r6, #10
 8010342:	d1df      	bne.n	8010304 <__swbuf_r+0x2e>
 8010344:	4621      	mov	r1, r4
 8010346:	4628      	mov	r0, r5
 8010348:	f000 fd60 	bl	8010e0c <_fflush_r>
 801034c:	2800      	cmp	r0, #0
 801034e:	d0d9      	beq.n	8010304 <__swbuf_r+0x2e>
 8010350:	e7d6      	b.n	8010300 <__swbuf_r+0x2a>
	...

08010354 <__swsetup_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4b29      	ldr	r3, [pc, #164]	@ (80103fc <__swsetup_r+0xa8>)
 8010358:	4605      	mov	r5, r0
 801035a:	6818      	ldr	r0, [r3, #0]
 801035c:	460c      	mov	r4, r1
 801035e:	b118      	cbz	r0, 8010368 <__swsetup_r+0x14>
 8010360:	6a03      	ldr	r3, [r0, #32]
 8010362:	b90b      	cbnz	r3, 8010368 <__swsetup_r+0x14>
 8010364:	f7ff fece 	bl	8010104 <__sinit>
 8010368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801036c:	0719      	lsls	r1, r3, #28
 801036e:	d422      	bmi.n	80103b6 <__swsetup_r+0x62>
 8010370:	06da      	lsls	r2, r3, #27
 8010372:	d407      	bmi.n	8010384 <__swsetup_r+0x30>
 8010374:	2209      	movs	r2, #9
 8010376:	602a      	str	r2, [r5, #0]
 8010378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801037c:	81a3      	strh	r3, [r4, #12]
 801037e:	f04f 30ff 	mov.w	r0, #4294967295
 8010382:	e033      	b.n	80103ec <__swsetup_r+0x98>
 8010384:	0758      	lsls	r0, r3, #29
 8010386:	d512      	bpl.n	80103ae <__swsetup_r+0x5a>
 8010388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801038a:	b141      	cbz	r1, 801039e <__swsetup_r+0x4a>
 801038c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010390:	4299      	cmp	r1, r3
 8010392:	d002      	beq.n	801039a <__swsetup_r+0x46>
 8010394:	4628      	mov	r0, r5
 8010396:	f000 f8e5 	bl	8010564 <_free_r>
 801039a:	2300      	movs	r3, #0
 801039c:	6363      	str	r3, [r4, #52]	@ 0x34
 801039e:	89a3      	ldrh	r3, [r4, #12]
 80103a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80103a4:	81a3      	strh	r3, [r4, #12]
 80103a6:	2300      	movs	r3, #0
 80103a8:	6063      	str	r3, [r4, #4]
 80103aa:	6923      	ldr	r3, [r4, #16]
 80103ac:	6023      	str	r3, [r4, #0]
 80103ae:	89a3      	ldrh	r3, [r4, #12]
 80103b0:	f043 0308 	orr.w	r3, r3, #8
 80103b4:	81a3      	strh	r3, [r4, #12]
 80103b6:	6923      	ldr	r3, [r4, #16]
 80103b8:	b94b      	cbnz	r3, 80103ce <__swsetup_r+0x7a>
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80103c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80103c4:	d003      	beq.n	80103ce <__swsetup_r+0x7a>
 80103c6:	4621      	mov	r1, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	f000 fd7f 	bl	8010ecc <__smakebuf_r>
 80103ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103d2:	f013 0201 	ands.w	r2, r3, #1
 80103d6:	d00a      	beq.n	80103ee <__swsetup_r+0x9a>
 80103d8:	2200      	movs	r2, #0
 80103da:	60a2      	str	r2, [r4, #8]
 80103dc:	6962      	ldr	r2, [r4, #20]
 80103de:	4252      	negs	r2, r2
 80103e0:	61a2      	str	r2, [r4, #24]
 80103e2:	6922      	ldr	r2, [r4, #16]
 80103e4:	b942      	cbnz	r2, 80103f8 <__swsetup_r+0xa4>
 80103e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80103ea:	d1c5      	bne.n	8010378 <__swsetup_r+0x24>
 80103ec:	bd38      	pop	{r3, r4, r5, pc}
 80103ee:	0799      	lsls	r1, r3, #30
 80103f0:	bf58      	it	pl
 80103f2:	6962      	ldrpl	r2, [r4, #20]
 80103f4:	60a2      	str	r2, [r4, #8]
 80103f6:	e7f4      	b.n	80103e2 <__swsetup_r+0x8e>
 80103f8:	2000      	movs	r0, #0
 80103fa:	e7f7      	b.n	80103ec <__swsetup_r+0x98>
 80103fc:	24000040 	.word	0x24000040

08010400 <memcmp>:
 8010400:	b510      	push	{r4, lr}
 8010402:	3901      	subs	r1, #1
 8010404:	4402      	add	r2, r0
 8010406:	4290      	cmp	r0, r2
 8010408:	d101      	bne.n	801040e <memcmp+0xe>
 801040a:	2000      	movs	r0, #0
 801040c:	e005      	b.n	801041a <memcmp+0x1a>
 801040e:	7803      	ldrb	r3, [r0, #0]
 8010410:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010414:	42a3      	cmp	r3, r4
 8010416:	d001      	beq.n	801041c <memcmp+0x1c>
 8010418:	1b18      	subs	r0, r3, r4
 801041a:	bd10      	pop	{r4, pc}
 801041c:	3001      	adds	r0, #1
 801041e:	e7f2      	b.n	8010406 <memcmp+0x6>

08010420 <memset>:
 8010420:	4402      	add	r2, r0
 8010422:	4603      	mov	r3, r0
 8010424:	4293      	cmp	r3, r2
 8010426:	d100      	bne.n	801042a <memset+0xa>
 8010428:	4770      	bx	lr
 801042a:	f803 1b01 	strb.w	r1, [r3], #1
 801042e:	e7f9      	b.n	8010424 <memset+0x4>

08010430 <_close_r>:
 8010430:	b538      	push	{r3, r4, r5, lr}
 8010432:	4d06      	ldr	r5, [pc, #24]	@ (801044c <_close_r+0x1c>)
 8010434:	2300      	movs	r3, #0
 8010436:	4604      	mov	r4, r0
 8010438:	4608      	mov	r0, r1
 801043a:	602b      	str	r3, [r5, #0]
 801043c:	f7f0 fbbe 	bl	8000bbc <_close>
 8010440:	1c43      	adds	r3, r0, #1
 8010442:	d102      	bne.n	801044a <_close_r+0x1a>
 8010444:	682b      	ldr	r3, [r5, #0]
 8010446:	b103      	cbz	r3, 801044a <_close_r+0x1a>
 8010448:	6023      	str	r3, [r4, #0]
 801044a:	bd38      	pop	{r3, r4, r5, pc}
 801044c:	24003470 	.word	0x24003470

08010450 <_lseek_r>:
 8010450:	b538      	push	{r3, r4, r5, lr}
 8010452:	4d07      	ldr	r5, [pc, #28]	@ (8010470 <_lseek_r+0x20>)
 8010454:	4604      	mov	r4, r0
 8010456:	4608      	mov	r0, r1
 8010458:	4611      	mov	r1, r2
 801045a:	2200      	movs	r2, #0
 801045c:	602a      	str	r2, [r5, #0]
 801045e:	461a      	mov	r2, r3
 8010460:	f7f0 fbd3 	bl	8000c0a <_lseek>
 8010464:	1c43      	adds	r3, r0, #1
 8010466:	d102      	bne.n	801046e <_lseek_r+0x1e>
 8010468:	682b      	ldr	r3, [r5, #0]
 801046a:	b103      	cbz	r3, 801046e <_lseek_r+0x1e>
 801046c:	6023      	str	r3, [r4, #0]
 801046e:	bd38      	pop	{r3, r4, r5, pc}
 8010470:	24003470 	.word	0x24003470

08010474 <_read_r>:
 8010474:	b538      	push	{r3, r4, r5, lr}
 8010476:	4d07      	ldr	r5, [pc, #28]	@ (8010494 <_read_r+0x20>)
 8010478:	4604      	mov	r4, r0
 801047a:	4608      	mov	r0, r1
 801047c:	4611      	mov	r1, r2
 801047e:	2200      	movs	r2, #0
 8010480:	602a      	str	r2, [r5, #0]
 8010482:	461a      	mov	r2, r3
 8010484:	f7f0 fb61 	bl	8000b4a <_read>
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	d102      	bne.n	8010492 <_read_r+0x1e>
 801048c:	682b      	ldr	r3, [r5, #0]
 801048e:	b103      	cbz	r3, 8010492 <_read_r+0x1e>
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	bd38      	pop	{r3, r4, r5, pc}
 8010494:	24003470 	.word	0x24003470

08010498 <_write_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d07      	ldr	r5, [pc, #28]	@ (80104b8 <_write_r+0x20>)
 801049c:	4604      	mov	r4, r0
 801049e:	4608      	mov	r0, r1
 80104a0:	4611      	mov	r1, r2
 80104a2:	2200      	movs	r2, #0
 80104a4:	602a      	str	r2, [r5, #0]
 80104a6:	461a      	mov	r2, r3
 80104a8:	f7f0 fb6c 	bl	8000b84 <_write>
 80104ac:	1c43      	adds	r3, r0, #1
 80104ae:	d102      	bne.n	80104b6 <_write_r+0x1e>
 80104b0:	682b      	ldr	r3, [r5, #0]
 80104b2:	b103      	cbz	r3, 80104b6 <_write_r+0x1e>
 80104b4:	6023      	str	r3, [r4, #0]
 80104b6:	bd38      	pop	{r3, r4, r5, pc}
 80104b8:	24003470 	.word	0x24003470

080104bc <__libc_init_array>:
 80104bc:	b570      	push	{r4, r5, r6, lr}
 80104be:	4d0d      	ldr	r5, [pc, #52]	@ (80104f4 <__libc_init_array+0x38>)
 80104c0:	4c0d      	ldr	r4, [pc, #52]	@ (80104f8 <__libc_init_array+0x3c>)
 80104c2:	1b64      	subs	r4, r4, r5
 80104c4:	10a4      	asrs	r4, r4, #2
 80104c6:	2600      	movs	r6, #0
 80104c8:	42a6      	cmp	r6, r4
 80104ca:	d109      	bne.n	80104e0 <__libc_init_array+0x24>
 80104cc:	4d0b      	ldr	r5, [pc, #44]	@ (80104fc <__libc_init_array+0x40>)
 80104ce:	4c0c      	ldr	r4, [pc, #48]	@ (8010500 <__libc_init_array+0x44>)
 80104d0:	f000 fdb6 	bl	8011040 <_init>
 80104d4:	1b64      	subs	r4, r4, r5
 80104d6:	10a4      	asrs	r4, r4, #2
 80104d8:	2600      	movs	r6, #0
 80104da:	42a6      	cmp	r6, r4
 80104dc:	d105      	bne.n	80104ea <__libc_init_array+0x2e>
 80104de:	bd70      	pop	{r4, r5, r6, pc}
 80104e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80104e4:	4798      	blx	r3
 80104e6:	3601      	adds	r6, #1
 80104e8:	e7ee      	b.n	80104c8 <__libc_init_array+0xc>
 80104ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80104ee:	4798      	blx	r3
 80104f0:	3601      	adds	r6, #1
 80104f2:	e7f2      	b.n	80104da <__libc_init_array+0x1e>
 80104f4:	08013c88 	.word	0x08013c88
 80104f8:	08013c88 	.word	0x08013c88
 80104fc:	08013c88 	.word	0x08013c88
 8010500:	08013c8c 	.word	0x08013c8c

08010504 <__retarget_lock_init_recursive>:
 8010504:	4770      	bx	lr

08010506 <__retarget_lock_acquire_recursive>:
 8010506:	4770      	bx	lr

08010508 <__retarget_lock_release_recursive>:
 8010508:	4770      	bx	lr

0801050a <memcpy>:
 801050a:	440a      	add	r2, r1
 801050c:	4291      	cmp	r1, r2
 801050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8010512:	d100      	bne.n	8010516 <memcpy+0xc>
 8010514:	4770      	bx	lr
 8010516:	b510      	push	{r4, lr}
 8010518:	f811 4b01 	ldrb.w	r4, [r1], #1
 801051c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010520:	4291      	cmp	r1, r2
 8010522:	d1f9      	bne.n	8010518 <memcpy+0xe>
 8010524:	bd10      	pop	{r4, pc}
	...

08010528 <__assert_func>:
 8010528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801052a:	4614      	mov	r4, r2
 801052c:	461a      	mov	r2, r3
 801052e:	4b09      	ldr	r3, [pc, #36]	@ (8010554 <__assert_func+0x2c>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4605      	mov	r5, r0
 8010534:	68d8      	ldr	r0, [r3, #12]
 8010536:	b954      	cbnz	r4, 801054e <__assert_func+0x26>
 8010538:	4b07      	ldr	r3, [pc, #28]	@ (8010558 <__assert_func+0x30>)
 801053a:	461c      	mov	r4, r3
 801053c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010540:	9100      	str	r1, [sp, #0]
 8010542:	462b      	mov	r3, r5
 8010544:	4905      	ldr	r1, [pc, #20]	@ (801055c <__assert_func+0x34>)
 8010546:	f000 fc89 	bl	8010e5c <fiprintf>
 801054a:	f000 fd2d 	bl	8010fa8 <abort>
 801054e:	4b04      	ldr	r3, [pc, #16]	@ (8010560 <__assert_func+0x38>)
 8010550:	e7f4      	b.n	801053c <__assert_func+0x14>
 8010552:	bf00      	nop
 8010554:	24000040 	.word	0x24000040
 8010558:	08013c4c 	.word	0x08013c4c
 801055c:	08013c1e 	.word	0x08013c1e
 8010560:	08013c11 	.word	0x08013c11

08010564 <_free_r>:
 8010564:	b538      	push	{r3, r4, r5, lr}
 8010566:	4605      	mov	r5, r0
 8010568:	2900      	cmp	r1, #0
 801056a:	d041      	beq.n	80105f0 <_free_r+0x8c>
 801056c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010570:	1f0c      	subs	r4, r1, #4
 8010572:	2b00      	cmp	r3, #0
 8010574:	bfb8      	it	lt
 8010576:	18e4      	addlt	r4, r4, r3
 8010578:	f000 f8e8 	bl	801074c <__malloc_lock>
 801057c:	4a1d      	ldr	r2, [pc, #116]	@ (80105f4 <_free_r+0x90>)
 801057e:	6813      	ldr	r3, [r2, #0]
 8010580:	b933      	cbnz	r3, 8010590 <_free_r+0x2c>
 8010582:	6063      	str	r3, [r4, #4]
 8010584:	6014      	str	r4, [r2, #0]
 8010586:	4628      	mov	r0, r5
 8010588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801058c:	f000 b8e4 	b.w	8010758 <__malloc_unlock>
 8010590:	42a3      	cmp	r3, r4
 8010592:	d908      	bls.n	80105a6 <_free_r+0x42>
 8010594:	6820      	ldr	r0, [r4, #0]
 8010596:	1821      	adds	r1, r4, r0
 8010598:	428b      	cmp	r3, r1
 801059a:	bf01      	itttt	eq
 801059c:	6819      	ldreq	r1, [r3, #0]
 801059e:	685b      	ldreq	r3, [r3, #4]
 80105a0:	1809      	addeq	r1, r1, r0
 80105a2:	6021      	streq	r1, [r4, #0]
 80105a4:	e7ed      	b.n	8010582 <_free_r+0x1e>
 80105a6:	461a      	mov	r2, r3
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	b10b      	cbz	r3, 80105b0 <_free_r+0x4c>
 80105ac:	42a3      	cmp	r3, r4
 80105ae:	d9fa      	bls.n	80105a6 <_free_r+0x42>
 80105b0:	6811      	ldr	r1, [r2, #0]
 80105b2:	1850      	adds	r0, r2, r1
 80105b4:	42a0      	cmp	r0, r4
 80105b6:	d10b      	bne.n	80105d0 <_free_r+0x6c>
 80105b8:	6820      	ldr	r0, [r4, #0]
 80105ba:	4401      	add	r1, r0
 80105bc:	1850      	adds	r0, r2, r1
 80105be:	4283      	cmp	r3, r0
 80105c0:	6011      	str	r1, [r2, #0]
 80105c2:	d1e0      	bne.n	8010586 <_free_r+0x22>
 80105c4:	6818      	ldr	r0, [r3, #0]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	6053      	str	r3, [r2, #4]
 80105ca:	4408      	add	r0, r1
 80105cc:	6010      	str	r0, [r2, #0]
 80105ce:	e7da      	b.n	8010586 <_free_r+0x22>
 80105d0:	d902      	bls.n	80105d8 <_free_r+0x74>
 80105d2:	230c      	movs	r3, #12
 80105d4:	602b      	str	r3, [r5, #0]
 80105d6:	e7d6      	b.n	8010586 <_free_r+0x22>
 80105d8:	6820      	ldr	r0, [r4, #0]
 80105da:	1821      	adds	r1, r4, r0
 80105dc:	428b      	cmp	r3, r1
 80105de:	bf04      	itt	eq
 80105e0:	6819      	ldreq	r1, [r3, #0]
 80105e2:	685b      	ldreq	r3, [r3, #4]
 80105e4:	6063      	str	r3, [r4, #4]
 80105e6:	bf04      	itt	eq
 80105e8:	1809      	addeq	r1, r1, r0
 80105ea:	6021      	streq	r1, [r4, #0]
 80105ec:	6054      	str	r4, [r2, #4]
 80105ee:	e7ca      	b.n	8010586 <_free_r+0x22>
 80105f0:	bd38      	pop	{r3, r4, r5, pc}
 80105f2:	bf00      	nop
 80105f4:	2400347c 	.word	0x2400347c

080105f8 <malloc>:
 80105f8:	4b02      	ldr	r3, [pc, #8]	@ (8010604 <malloc+0xc>)
 80105fa:	4601      	mov	r1, r0
 80105fc:	6818      	ldr	r0, [r3, #0]
 80105fe:	f000 b825 	b.w	801064c <_malloc_r>
 8010602:	bf00      	nop
 8010604:	24000040 	.word	0x24000040

08010608 <sbrk_aligned>:
 8010608:	b570      	push	{r4, r5, r6, lr}
 801060a:	4e0f      	ldr	r6, [pc, #60]	@ (8010648 <sbrk_aligned+0x40>)
 801060c:	460c      	mov	r4, r1
 801060e:	6831      	ldr	r1, [r6, #0]
 8010610:	4605      	mov	r5, r0
 8010612:	b911      	cbnz	r1, 801061a <sbrk_aligned+0x12>
 8010614:	f000 fcb8 	bl	8010f88 <_sbrk_r>
 8010618:	6030      	str	r0, [r6, #0]
 801061a:	4621      	mov	r1, r4
 801061c:	4628      	mov	r0, r5
 801061e:	f000 fcb3 	bl	8010f88 <_sbrk_r>
 8010622:	1c43      	adds	r3, r0, #1
 8010624:	d103      	bne.n	801062e <sbrk_aligned+0x26>
 8010626:	f04f 34ff 	mov.w	r4, #4294967295
 801062a:	4620      	mov	r0, r4
 801062c:	bd70      	pop	{r4, r5, r6, pc}
 801062e:	1cc4      	adds	r4, r0, #3
 8010630:	f024 0403 	bic.w	r4, r4, #3
 8010634:	42a0      	cmp	r0, r4
 8010636:	d0f8      	beq.n	801062a <sbrk_aligned+0x22>
 8010638:	1a21      	subs	r1, r4, r0
 801063a:	4628      	mov	r0, r5
 801063c:	f000 fca4 	bl	8010f88 <_sbrk_r>
 8010640:	3001      	adds	r0, #1
 8010642:	d1f2      	bne.n	801062a <sbrk_aligned+0x22>
 8010644:	e7ef      	b.n	8010626 <sbrk_aligned+0x1e>
 8010646:	bf00      	nop
 8010648:	24003478 	.word	0x24003478

0801064c <_malloc_r>:
 801064c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010650:	1ccd      	adds	r5, r1, #3
 8010652:	f025 0503 	bic.w	r5, r5, #3
 8010656:	3508      	adds	r5, #8
 8010658:	2d0c      	cmp	r5, #12
 801065a:	bf38      	it	cc
 801065c:	250c      	movcc	r5, #12
 801065e:	2d00      	cmp	r5, #0
 8010660:	4606      	mov	r6, r0
 8010662:	db01      	blt.n	8010668 <_malloc_r+0x1c>
 8010664:	42a9      	cmp	r1, r5
 8010666:	d904      	bls.n	8010672 <_malloc_r+0x26>
 8010668:	230c      	movs	r3, #12
 801066a:	6033      	str	r3, [r6, #0]
 801066c:	2000      	movs	r0, #0
 801066e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010672:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010748 <_malloc_r+0xfc>
 8010676:	f000 f869 	bl	801074c <__malloc_lock>
 801067a:	f8d8 3000 	ldr.w	r3, [r8]
 801067e:	461c      	mov	r4, r3
 8010680:	bb44      	cbnz	r4, 80106d4 <_malloc_r+0x88>
 8010682:	4629      	mov	r1, r5
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff ffbf 	bl	8010608 <sbrk_aligned>
 801068a:	1c43      	adds	r3, r0, #1
 801068c:	4604      	mov	r4, r0
 801068e:	d158      	bne.n	8010742 <_malloc_r+0xf6>
 8010690:	f8d8 4000 	ldr.w	r4, [r8]
 8010694:	4627      	mov	r7, r4
 8010696:	2f00      	cmp	r7, #0
 8010698:	d143      	bne.n	8010722 <_malloc_r+0xd6>
 801069a:	2c00      	cmp	r4, #0
 801069c:	d04b      	beq.n	8010736 <_malloc_r+0xea>
 801069e:	6823      	ldr	r3, [r4, #0]
 80106a0:	4639      	mov	r1, r7
 80106a2:	4630      	mov	r0, r6
 80106a4:	eb04 0903 	add.w	r9, r4, r3
 80106a8:	f000 fc6e 	bl	8010f88 <_sbrk_r>
 80106ac:	4581      	cmp	r9, r0
 80106ae:	d142      	bne.n	8010736 <_malloc_r+0xea>
 80106b0:	6821      	ldr	r1, [r4, #0]
 80106b2:	1a6d      	subs	r5, r5, r1
 80106b4:	4629      	mov	r1, r5
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ff ffa6 	bl	8010608 <sbrk_aligned>
 80106bc:	3001      	adds	r0, #1
 80106be:	d03a      	beq.n	8010736 <_malloc_r+0xea>
 80106c0:	6823      	ldr	r3, [r4, #0]
 80106c2:	442b      	add	r3, r5
 80106c4:	6023      	str	r3, [r4, #0]
 80106c6:	f8d8 3000 	ldr.w	r3, [r8]
 80106ca:	685a      	ldr	r2, [r3, #4]
 80106cc:	bb62      	cbnz	r2, 8010728 <_malloc_r+0xdc>
 80106ce:	f8c8 7000 	str.w	r7, [r8]
 80106d2:	e00f      	b.n	80106f4 <_malloc_r+0xa8>
 80106d4:	6822      	ldr	r2, [r4, #0]
 80106d6:	1b52      	subs	r2, r2, r5
 80106d8:	d420      	bmi.n	801071c <_malloc_r+0xd0>
 80106da:	2a0b      	cmp	r2, #11
 80106dc:	d917      	bls.n	801070e <_malloc_r+0xc2>
 80106de:	1961      	adds	r1, r4, r5
 80106e0:	42a3      	cmp	r3, r4
 80106e2:	6025      	str	r5, [r4, #0]
 80106e4:	bf18      	it	ne
 80106e6:	6059      	strne	r1, [r3, #4]
 80106e8:	6863      	ldr	r3, [r4, #4]
 80106ea:	bf08      	it	eq
 80106ec:	f8c8 1000 	streq.w	r1, [r8]
 80106f0:	5162      	str	r2, [r4, r5]
 80106f2:	604b      	str	r3, [r1, #4]
 80106f4:	4630      	mov	r0, r6
 80106f6:	f000 f82f 	bl	8010758 <__malloc_unlock>
 80106fa:	f104 000b 	add.w	r0, r4, #11
 80106fe:	1d23      	adds	r3, r4, #4
 8010700:	f020 0007 	bic.w	r0, r0, #7
 8010704:	1ac2      	subs	r2, r0, r3
 8010706:	bf1c      	itt	ne
 8010708:	1a1b      	subne	r3, r3, r0
 801070a:	50a3      	strne	r3, [r4, r2]
 801070c:	e7af      	b.n	801066e <_malloc_r+0x22>
 801070e:	6862      	ldr	r2, [r4, #4]
 8010710:	42a3      	cmp	r3, r4
 8010712:	bf0c      	ite	eq
 8010714:	f8c8 2000 	streq.w	r2, [r8]
 8010718:	605a      	strne	r2, [r3, #4]
 801071a:	e7eb      	b.n	80106f4 <_malloc_r+0xa8>
 801071c:	4623      	mov	r3, r4
 801071e:	6864      	ldr	r4, [r4, #4]
 8010720:	e7ae      	b.n	8010680 <_malloc_r+0x34>
 8010722:	463c      	mov	r4, r7
 8010724:	687f      	ldr	r7, [r7, #4]
 8010726:	e7b6      	b.n	8010696 <_malloc_r+0x4a>
 8010728:	461a      	mov	r2, r3
 801072a:	685b      	ldr	r3, [r3, #4]
 801072c:	42a3      	cmp	r3, r4
 801072e:	d1fb      	bne.n	8010728 <_malloc_r+0xdc>
 8010730:	2300      	movs	r3, #0
 8010732:	6053      	str	r3, [r2, #4]
 8010734:	e7de      	b.n	80106f4 <_malloc_r+0xa8>
 8010736:	230c      	movs	r3, #12
 8010738:	6033      	str	r3, [r6, #0]
 801073a:	4630      	mov	r0, r6
 801073c:	f000 f80c 	bl	8010758 <__malloc_unlock>
 8010740:	e794      	b.n	801066c <_malloc_r+0x20>
 8010742:	6005      	str	r5, [r0, #0]
 8010744:	e7d6      	b.n	80106f4 <_malloc_r+0xa8>
 8010746:	bf00      	nop
 8010748:	2400347c 	.word	0x2400347c

0801074c <__malloc_lock>:
 801074c:	4801      	ldr	r0, [pc, #4]	@ (8010754 <__malloc_lock+0x8>)
 801074e:	f7ff beda 	b.w	8010506 <__retarget_lock_acquire_recursive>
 8010752:	bf00      	nop
 8010754:	24003474 	.word	0x24003474

08010758 <__malloc_unlock>:
 8010758:	4801      	ldr	r0, [pc, #4]	@ (8010760 <__malloc_unlock+0x8>)
 801075a:	f7ff bed5 	b.w	8010508 <__retarget_lock_release_recursive>
 801075e:	bf00      	nop
 8010760:	24003474 	.word	0x24003474

08010764 <__sfputc_r>:
 8010764:	6893      	ldr	r3, [r2, #8]
 8010766:	3b01      	subs	r3, #1
 8010768:	2b00      	cmp	r3, #0
 801076a:	b410      	push	{r4}
 801076c:	6093      	str	r3, [r2, #8]
 801076e:	da08      	bge.n	8010782 <__sfputc_r+0x1e>
 8010770:	6994      	ldr	r4, [r2, #24]
 8010772:	42a3      	cmp	r3, r4
 8010774:	db01      	blt.n	801077a <__sfputc_r+0x16>
 8010776:	290a      	cmp	r1, #10
 8010778:	d103      	bne.n	8010782 <__sfputc_r+0x1e>
 801077a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801077e:	f7ff bdaa 	b.w	80102d6 <__swbuf_r>
 8010782:	6813      	ldr	r3, [r2, #0]
 8010784:	1c58      	adds	r0, r3, #1
 8010786:	6010      	str	r0, [r2, #0]
 8010788:	7019      	strb	r1, [r3, #0]
 801078a:	4608      	mov	r0, r1
 801078c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010790:	4770      	bx	lr

08010792 <__sfputs_r>:
 8010792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010794:	4606      	mov	r6, r0
 8010796:	460f      	mov	r7, r1
 8010798:	4614      	mov	r4, r2
 801079a:	18d5      	adds	r5, r2, r3
 801079c:	42ac      	cmp	r4, r5
 801079e:	d101      	bne.n	80107a4 <__sfputs_r+0x12>
 80107a0:	2000      	movs	r0, #0
 80107a2:	e007      	b.n	80107b4 <__sfputs_r+0x22>
 80107a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107a8:	463a      	mov	r2, r7
 80107aa:	4630      	mov	r0, r6
 80107ac:	f7ff ffda 	bl	8010764 <__sfputc_r>
 80107b0:	1c43      	adds	r3, r0, #1
 80107b2:	d1f3      	bne.n	801079c <__sfputs_r+0xa>
 80107b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080107b8 <_vfiprintf_r>:
 80107b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107bc:	460d      	mov	r5, r1
 80107be:	b09d      	sub	sp, #116	@ 0x74
 80107c0:	4614      	mov	r4, r2
 80107c2:	4698      	mov	r8, r3
 80107c4:	4606      	mov	r6, r0
 80107c6:	b118      	cbz	r0, 80107d0 <_vfiprintf_r+0x18>
 80107c8:	6a03      	ldr	r3, [r0, #32]
 80107ca:	b90b      	cbnz	r3, 80107d0 <_vfiprintf_r+0x18>
 80107cc:	f7ff fc9a 	bl	8010104 <__sinit>
 80107d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107d2:	07d9      	lsls	r1, r3, #31
 80107d4:	d405      	bmi.n	80107e2 <_vfiprintf_r+0x2a>
 80107d6:	89ab      	ldrh	r3, [r5, #12]
 80107d8:	059a      	lsls	r2, r3, #22
 80107da:	d402      	bmi.n	80107e2 <_vfiprintf_r+0x2a>
 80107dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80107de:	f7ff fe92 	bl	8010506 <__retarget_lock_acquire_recursive>
 80107e2:	89ab      	ldrh	r3, [r5, #12]
 80107e4:	071b      	lsls	r3, r3, #28
 80107e6:	d501      	bpl.n	80107ec <_vfiprintf_r+0x34>
 80107e8:	692b      	ldr	r3, [r5, #16]
 80107ea:	b99b      	cbnz	r3, 8010814 <_vfiprintf_r+0x5c>
 80107ec:	4629      	mov	r1, r5
 80107ee:	4630      	mov	r0, r6
 80107f0:	f7ff fdb0 	bl	8010354 <__swsetup_r>
 80107f4:	b170      	cbz	r0, 8010814 <_vfiprintf_r+0x5c>
 80107f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80107f8:	07dc      	lsls	r4, r3, #31
 80107fa:	d504      	bpl.n	8010806 <_vfiprintf_r+0x4e>
 80107fc:	f04f 30ff 	mov.w	r0, #4294967295
 8010800:	b01d      	add	sp, #116	@ 0x74
 8010802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010806:	89ab      	ldrh	r3, [r5, #12]
 8010808:	0598      	lsls	r0, r3, #22
 801080a:	d4f7      	bmi.n	80107fc <_vfiprintf_r+0x44>
 801080c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801080e:	f7ff fe7b 	bl	8010508 <__retarget_lock_release_recursive>
 8010812:	e7f3      	b.n	80107fc <_vfiprintf_r+0x44>
 8010814:	2300      	movs	r3, #0
 8010816:	9309      	str	r3, [sp, #36]	@ 0x24
 8010818:	2320      	movs	r3, #32
 801081a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801081e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010822:	2330      	movs	r3, #48	@ 0x30
 8010824:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80109d4 <_vfiprintf_r+0x21c>
 8010828:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801082c:	f04f 0901 	mov.w	r9, #1
 8010830:	4623      	mov	r3, r4
 8010832:	469a      	mov	sl, r3
 8010834:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010838:	b10a      	cbz	r2, 801083e <_vfiprintf_r+0x86>
 801083a:	2a25      	cmp	r2, #37	@ 0x25
 801083c:	d1f9      	bne.n	8010832 <_vfiprintf_r+0x7a>
 801083e:	ebba 0b04 	subs.w	fp, sl, r4
 8010842:	d00b      	beq.n	801085c <_vfiprintf_r+0xa4>
 8010844:	465b      	mov	r3, fp
 8010846:	4622      	mov	r2, r4
 8010848:	4629      	mov	r1, r5
 801084a:	4630      	mov	r0, r6
 801084c:	f7ff ffa1 	bl	8010792 <__sfputs_r>
 8010850:	3001      	adds	r0, #1
 8010852:	f000 80a7 	beq.w	80109a4 <_vfiprintf_r+0x1ec>
 8010856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010858:	445a      	add	r2, fp
 801085a:	9209      	str	r2, [sp, #36]	@ 0x24
 801085c:	f89a 3000 	ldrb.w	r3, [sl]
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 809f 	beq.w	80109a4 <_vfiprintf_r+0x1ec>
 8010866:	2300      	movs	r3, #0
 8010868:	f04f 32ff 	mov.w	r2, #4294967295
 801086c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010870:	f10a 0a01 	add.w	sl, sl, #1
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	9307      	str	r3, [sp, #28]
 8010878:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801087c:	931a      	str	r3, [sp, #104]	@ 0x68
 801087e:	4654      	mov	r4, sl
 8010880:	2205      	movs	r2, #5
 8010882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010886:	4853      	ldr	r0, [pc, #332]	@ (80109d4 <_vfiprintf_r+0x21c>)
 8010888:	f7ef fd42 	bl	8000310 <memchr>
 801088c:	9a04      	ldr	r2, [sp, #16]
 801088e:	b9d8      	cbnz	r0, 80108c8 <_vfiprintf_r+0x110>
 8010890:	06d1      	lsls	r1, r2, #27
 8010892:	bf44      	itt	mi
 8010894:	2320      	movmi	r3, #32
 8010896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801089a:	0713      	lsls	r3, r2, #28
 801089c:	bf44      	itt	mi
 801089e:	232b      	movmi	r3, #43	@ 0x2b
 80108a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80108a4:	f89a 3000 	ldrb.w	r3, [sl]
 80108a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80108aa:	d015      	beq.n	80108d8 <_vfiprintf_r+0x120>
 80108ac:	9a07      	ldr	r2, [sp, #28]
 80108ae:	4654      	mov	r4, sl
 80108b0:	2000      	movs	r0, #0
 80108b2:	f04f 0c0a 	mov.w	ip, #10
 80108b6:	4621      	mov	r1, r4
 80108b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80108bc:	3b30      	subs	r3, #48	@ 0x30
 80108be:	2b09      	cmp	r3, #9
 80108c0:	d94b      	bls.n	801095a <_vfiprintf_r+0x1a2>
 80108c2:	b1b0      	cbz	r0, 80108f2 <_vfiprintf_r+0x13a>
 80108c4:	9207      	str	r2, [sp, #28]
 80108c6:	e014      	b.n	80108f2 <_vfiprintf_r+0x13a>
 80108c8:	eba0 0308 	sub.w	r3, r0, r8
 80108cc:	fa09 f303 	lsl.w	r3, r9, r3
 80108d0:	4313      	orrs	r3, r2
 80108d2:	9304      	str	r3, [sp, #16]
 80108d4:	46a2      	mov	sl, r4
 80108d6:	e7d2      	b.n	801087e <_vfiprintf_r+0xc6>
 80108d8:	9b03      	ldr	r3, [sp, #12]
 80108da:	1d19      	adds	r1, r3, #4
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	9103      	str	r1, [sp, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	bfbb      	ittet	lt
 80108e4:	425b      	neglt	r3, r3
 80108e6:	f042 0202 	orrlt.w	r2, r2, #2
 80108ea:	9307      	strge	r3, [sp, #28]
 80108ec:	9307      	strlt	r3, [sp, #28]
 80108ee:	bfb8      	it	lt
 80108f0:	9204      	strlt	r2, [sp, #16]
 80108f2:	7823      	ldrb	r3, [r4, #0]
 80108f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80108f6:	d10a      	bne.n	801090e <_vfiprintf_r+0x156>
 80108f8:	7863      	ldrb	r3, [r4, #1]
 80108fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80108fc:	d132      	bne.n	8010964 <_vfiprintf_r+0x1ac>
 80108fe:	9b03      	ldr	r3, [sp, #12]
 8010900:	1d1a      	adds	r2, r3, #4
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	9203      	str	r2, [sp, #12]
 8010906:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801090a:	3402      	adds	r4, #2
 801090c:	9305      	str	r3, [sp, #20]
 801090e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80109e4 <_vfiprintf_r+0x22c>
 8010912:	7821      	ldrb	r1, [r4, #0]
 8010914:	2203      	movs	r2, #3
 8010916:	4650      	mov	r0, sl
 8010918:	f7ef fcfa 	bl	8000310 <memchr>
 801091c:	b138      	cbz	r0, 801092e <_vfiprintf_r+0x176>
 801091e:	9b04      	ldr	r3, [sp, #16]
 8010920:	eba0 000a 	sub.w	r0, r0, sl
 8010924:	2240      	movs	r2, #64	@ 0x40
 8010926:	4082      	lsls	r2, r0
 8010928:	4313      	orrs	r3, r2
 801092a:	3401      	adds	r4, #1
 801092c:	9304      	str	r3, [sp, #16]
 801092e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010932:	4829      	ldr	r0, [pc, #164]	@ (80109d8 <_vfiprintf_r+0x220>)
 8010934:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010938:	2206      	movs	r2, #6
 801093a:	f7ef fce9 	bl	8000310 <memchr>
 801093e:	2800      	cmp	r0, #0
 8010940:	d03f      	beq.n	80109c2 <_vfiprintf_r+0x20a>
 8010942:	4b26      	ldr	r3, [pc, #152]	@ (80109dc <_vfiprintf_r+0x224>)
 8010944:	bb1b      	cbnz	r3, 801098e <_vfiprintf_r+0x1d6>
 8010946:	9b03      	ldr	r3, [sp, #12]
 8010948:	3307      	adds	r3, #7
 801094a:	f023 0307 	bic.w	r3, r3, #7
 801094e:	3308      	adds	r3, #8
 8010950:	9303      	str	r3, [sp, #12]
 8010952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010954:	443b      	add	r3, r7
 8010956:	9309      	str	r3, [sp, #36]	@ 0x24
 8010958:	e76a      	b.n	8010830 <_vfiprintf_r+0x78>
 801095a:	fb0c 3202 	mla	r2, ip, r2, r3
 801095e:	460c      	mov	r4, r1
 8010960:	2001      	movs	r0, #1
 8010962:	e7a8      	b.n	80108b6 <_vfiprintf_r+0xfe>
 8010964:	2300      	movs	r3, #0
 8010966:	3401      	adds	r4, #1
 8010968:	9305      	str	r3, [sp, #20]
 801096a:	4619      	mov	r1, r3
 801096c:	f04f 0c0a 	mov.w	ip, #10
 8010970:	4620      	mov	r0, r4
 8010972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010976:	3a30      	subs	r2, #48	@ 0x30
 8010978:	2a09      	cmp	r2, #9
 801097a:	d903      	bls.n	8010984 <_vfiprintf_r+0x1cc>
 801097c:	2b00      	cmp	r3, #0
 801097e:	d0c6      	beq.n	801090e <_vfiprintf_r+0x156>
 8010980:	9105      	str	r1, [sp, #20]
 8010982:	e7c4      	b.n	801090e <_vfiprintf_r+0x156>
 8010984:	fb0c 2101 	mla	r1, ip, r1, r2
 8010988:	4604      	mov	r4, r0
 801098a:	2301      	movs	r3, #1
 801098c:	e7f0      	b.n	8010970 <_vfiprintf_r+0x1b8>
 801098e:	ab03      	add	r3, sp, #12
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	462a      	mov	r2, r5
 8010994:	4b12      	ldr	r3, [pc, #72]	@ (80109e0 <_vfiprintf_r+0x228>)
 8010996:	a904      	add	r1, sp, #16
 8010998:	4630      	mov	r0, r6
 801099a:	f3af 8000 	nop.w
 801099e:	4607      	mov	r7, r0
 80109a0:	1c78      	adds	r0, r7, #1
 80109a2:	d1d6      	bne.n	8010952 <_vfiprintf_r+0x19a>
 80109a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109a6:	07d9      	lsls	r1, r3, #31
 80109a8:	d405      	bmi.n	80109b6 <_vfiprintf_r+0x1fe>
 80109aa:	89ab      	ldrh	r3, [r5, #12]
 80109ac:	059a      	lsls	r2, r3, #22
 80109ae:	d402      	bmi.n	80109b6 <_vfiprintf_r+0x1fe>
 80109b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109b2:	f7ff fda9 	bl	8010508 <__retarget_lock_release_recursive>
 80109b6:	89ab      	ldrh	r3, [r5, #12]
 80109b8:	065b      	lsls	r3, r3, #25
 80109ba:	f53f af1f 	bmi.w	80107fc <_vfiprintf_r+0x44>
 80109be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80109c0:	e71e      	b.n	8010800 <_vfiprintf_r+0x48>
 80109c2:	ab03      	add	r3, sp, #12
 80109c4:	9300      	str	r3, [sp, #0]
 80109c6:	462a      	mov	r2, r5
 80109c8:	4b05      	ldr	r3, [pc, #20]	@ (80109e0 <_vfiprintf_r+0x228>)
 80109ca:	a904      	add	r1, sp, #16
 80109cc:	4630      	mov	r0, r6
 80109ce:	f000 f879 	bl	8010ac4 <_printf_i>
 80109d2:	e7e4      	b.n	801099e <_vfiprintf_r+0x1e6>
 80109d4:	08013c4d 	.word	0x08013c4d
 80109d8:	08013c57 	.word	0x08013c57
 80109dc:	00000000 	.word	0x00000000
 80109e0:	08010793 	.word	0x08010793
 80109e4:	08013c53 	.word	0x08013c53

080109e8 <_printf_common>:
 80109e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	4616      	mov	r6, r2
 80109ee:	4698      	mov	r8, r3
 80109f0:	688a      	ldr	r2, [r1, #8]
 80109f2:	690b      	ldr	r3, [r1, #16]
 80109f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80109f8:	4293      	cmp	r3, r2
 80109fa:	bfb8      	it	lt
 80109fc:	4613      	movlt	r3, r2
 80109fe:	6033      	str	r3, [r6, #0]
 8010a00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010a04:	4607      	mov	r7, r0
 8010a06:	460c      	mov	r4, r1
 8010a08:	b10a      	cbz	r2, 8010a0e <_printf_common+0x26>
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	6033      	str	r3, [r6, #0]
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	0699      	lsls	r1, r3, #26
 8010a12:	bf42      	ittt	mi
 8010a14:	6833      	ldrmi	r3, [r6, #0]
 8010a16:	3302      	addmi	r3, #2
 8010a18:	6033      	strmi	r3, [r6, #0]
 8010a1a:	6825      	ldr	r5, [r4, #0]
 8010a1c:	f015 0506 	ands.w	r5, r5, #6
 8010a20:	d106      	bne.n	8010a30 <_printf_common+0x48>
 8010a22:	f104 0a19 	add.w	sl, r4, #25
 8010a26:	68e3      	ldr	r3, [r4, #12]
 8010a28:	6832      	ldr	r2, [r6, #0]
 8010a2a:	1a9b      	subs	r3, r3, r2
 8010a2c:	42ab      	cmp	r3, r5
 8010a2e:	dc26      	bgt.n	8010a7e <_printf_common+0x96>
 8010a30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010a34:	6822      	ldr	r2, [r4, #0]
 8010a36:	3b00      	subs	r3, #0
 8010a38:	bf18      	it	ne
 8010a3a:	2301      	movne	r3, #1
 8010a3c:	0692      	lsls	r2, r2, #26
 8010a3e:	d42b      	bmi.n	8010a98 <_printf_common+0xb0>
 8010a40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010a44:	4641      	mov	r1, r8
 8010a46:	4638      	mov	r0, r7
 8010a48:	47c8      	blx	r9
 8010a4a:	3001      	adds	r0, #1
 8010a4c:	d01e      	beq.n	8010a8c <_printf_common+0xa4>
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	6922      	ldr	r2, [r4, #16]
 8010a52:	f003 0306 	and.w	r3, r3, #6
 8010a56:	2b04      	cmp	r3, #4
 8010a58:	bf02      	ittt	eq
 8010a5a:	68e5      	ldreq	r5, [r4, #12]
 8010a5c:	6833      	ldreq	r3, [r6, #0]
 8010a5e:	1aed      	subeq	r5, r5, r3
 8010a60:	68a3      	ldr	r3, [r4, #8]
 8010a62:	bf0c      	ite	eq
 8010a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a68:	2500      	movne	r5, #0
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	bfc4      	itt	gt
 8010a6e:	1a9b      	subgt	r3, r3, r2
 8010a70:	18ed      	addgt	r5, r5, r3
 8010a72:	2600      	movs	r6, #0
 8010a74:	341a      	adds	r4, #26
 8010a76:	42b5      	cmp	r5, r6
 8010a78:	d11a      	bne.n	8010ab0 <_printf_common+0xc8>
 8010a7a:	2000      	movs	r0, #0
 8010a7c:	e008      	b.n	8010a90 <_printf_common+0xa8>
 8010a7e:	2301      	movs	r3, #1
 8010a80:	4652      	mov	r2, sl
 8010a82:	4641      	mov	r1, r8
 8010a84:	4638      	mov	r0, r7
 8010a86:	47c8      	blx	r9
 8010a88:	3001      	adds	r0, #1
 8010a8a:	d103      	bne.n	8010a94 <_printf_common+0xac>
 8010a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a94:	3501      	adds	r5, #1
 8010a96:	e7c6      	b.n	8010a26 <_printf_common+0x3e>
 8010a98:	18e1      	adds	r1, r4, r3
 8010a9a:	1c5a      	adds	r2, r3, #1
 8010a9c:	2030      	movs	r0, #48	@ 0x30
 8010a9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010aa2:	4422      	add	r2, r4
 8010aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010aa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010aac:	3302      	adds	r3, #2
 8010aae:	e7c7      	b.n	8010a40 <_printf_common+0x58>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	4622      	mov	r2, r4
 8010ab4:	4641      	mov	r1, r8
 8010ab6:	4638      	mov	r0, r7
 8010ab8:	47c8      	blx	r9
 8010aba:	3001      	adds	r0, #1
 8010abc:	d0e6      	beq.n	8010a8c <_printf_common+0xa4>
 8010abe:	3601      	adds	r6, #1
 8010ac0:	e7d9      	b.n	8010a76 <_printf_common+0x8e>
	...

08010ac4 <_printf_i>:
 8010ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac8:	7e0f      	ldrb	r7, [r1, #24]
 8010aca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010acc:	2f78      	cmp	r7, #120	@ 0x78
 8010ace:	4691      	mov	r9, r2
 8010ad0:	4680      	mov	r8, r0
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	469a      	mov	sl, r3
 8010ad6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ada:	d807      	bhi.n	8010aec <_printf_i+0x28>
 8010adc:	2f62      	cmp	r7, #98	@ 0x62
 8010ade:	d80a      	bhi.n	8010af6 <_printf_i+0x32>
 8010ae0:	2f00      	cmp	r7, #0
 8010ae2:	f000 80d2 	beq.w	8010c8a <_printf_i+0x1c6>
 8010ae6:	2f58      	cmp	r7, #88	@ 0x58
 8010ae8:	f000 80b9 	beq.w	8010c5e <_printf_i+0x19a>
 8010aec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010af0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010af4:	e03a      	b.n	8010b6c <_printf_i+0xa8>
 8010af6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010afa:	2b15      	cmp	r3, #21
 8010afc:	d8f6      	bhi.n	8010aec <_printf_i+0x28>
 8010afe:	a101      	add	r1, pc, #4	@ (adr r1, 8010b04 <_printf_i+0x40>)
 8010b00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010b04:	08010b5d 	.word	0x08010b5d
 8010b08:	08010b71 	.word	0x08010b71
 8010b0c:	08010aed 	.word	0x08010aed
 8010b10:	08010aed 	.word	0x08010aed
 8010b14:	08010aed 	.word	0x08010aed
 8010b18:	08010aed 	.word	0x08010aed
 8010b1c:	08010b71 	.word	0x08010b71
 8010b20:	08010aed 	.word	0x08010aed
 8010b24:	08010aed 	.word	0x08010aed
 8010b28:	08010aed 	.word	0x08010aed
 8010b2c:	08010aed 	.word	0x08010aed
 8010b30:	08010c71 	.word	0x08010c71
 8010b34:	08010b9b 	.word	0x08010b9b
 8010b38:	08010c2b 	.word	0x08010c2b
 8010b3c:	08010aed 	.word	0x08010aed
 8010b40:	08010aed 	.word	0x08010aed
 8010b44:	08010c93 	.word	0x08010c93
 8010b48:	08010aed 	.word	0x08010aed
 8010b4c:	08010b9b 	.word	0x08010b9b
 8010b50:	08010aed 	.word	0x08010aed
 8010b54:	08010aed 	.word	0x08010aed
 8010b58:	08010c33 	.word	0x08010c33
 8010b5c:	6833      	ldr	r3, [r6, #0]
 8010b5e:	1d1a      	adds	r2, r3, #4
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	6032      	str	r2, [r6, #0]
 8010b64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e09d      	b.n	8010cac <_printf_i+0x1e8>
 8010b70:	6833      	ldr	r3, [r6, #0]
 8010b72:	6820      	ldr	r0, [r4, #0]
 8010b74:	1d19      	adds	r1, r3, #4
 8010b76:	6031      	str	r1, [r6, #0]
 8010b78:	0606      	lsls	r6, r0, #24
 8010b7a:	d501      	bpl.n	8010b80 <_printf_i+0xbc>
 8010b7c:	681d      	ldr	r5, [r3, #0]
 8010b7e:	e003      	b.n	8010b88 <_printf_i+0xc4>
 8010b80:	0645      	lsls	r5, r0, #25
 8010b82:	d5fb      	bpl.n	8010b7c <_printf_i+0xb8>
 8010b84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010b88:	2d00      	cmp	r5, #0
 8010b8a:	da03      	bge.n	8010b94 <_printf_i+0xd0>
 8010b8c:	232d      	movs	r3, #45	@ 0x2d
 8010b8e:	426d      	negs	r5, r5
 8010b90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b94:	4859      	ldr	r0, [pc, #356]	@ (8010cfc <_printf_i+0x238>)
 8010b96:	230a      	movs	r3, #10
 8010b98:	e011      	b.n	8010bbe <_printf_i+0xfa>
 8010b9a:	6821      	ldr	r1, [r4, #0]
 8010b9c:	6833      	ldr	r3, [r6, #0]
 8010b9e:	0608      	lsls	r0, r1, #24
 8010ba0:	f853 5b04 	ldr.w	r5, [r3], #4
 8010ba4:	d402      	bmi.n	8010bac <_printf_i+0xe8>
 8010ba6:	0649      	lsls	r1, r1, #25
 8010ba8:	bf48      	it	mi
 8010baa:	b2ad      	uxthmi	r5, r5
 8010bac:	2f6f      	cmp	r7, #111	@ 0x6f
 8010bae:	4853      	ldr	r0, [pc, #332]	@ (8010cfc <_printf_i+0x238>)
 8010bb0:	6033      	str	r3, [r6, #0]
 8010bb2:	bf14      	ite	ne
 8010bb4:	230a      	movne	r3, #10
 8010bb6:	2308      	moveq	r3, #8
 8010bb8:	2100      	movs	r1, #0
 8010bba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010bbe:	6866      	ldr	r6, [r4, #4]
 8010bc0:	60a6      	str	r6, [r4, #8]
 8010bc2:	2e00      	cmp	r6, #0
 8010bc4:	bfa2      	ittt	ge
 8010bc6:	6821      	ldrge	r1, [r4, #0]
 8010bc8:	f021 0104 	bicge.w	r1, r1, #4
 8010bcc:	6021      	strge	r1, [r4, #0]
 8010bce:	b90d      	cbnz	r5, 8010bd4 <_printf_i+0x110>
 8010bd0:	2e00      	cmp	r6, #0
 8010bd2:	d04b      	beq.n	8010c6c <_printf_i+0x1a8>
 8010bd4:	4616      	mov	r6, r2
 8010bd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8010bda:	fb03 5711 	mls	r7, r3, r1, r5
 8010bde:	5dc7      	ldrb	r7, [r0, r7]
 8010be0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010be4:	462f      	mov	r7, r5
 8010be6:	42bb      	cmp	r3, r7
 8010be8:	460d      	mov	r5, r1
 8010bea:	d9f4      	bls.n	8010bd6 <_printf_i+0x112>
 8010bec:	2b08      	cmp	r3, #8
 8010bee:	d10b      	bne.n	8010c08 <_printf_i+0x144>
 8010bf0:	6823      	ldr	r3, [r4, #0]
 8010bf2:	07df      	lsls	r7, r3, #31
 8010bf4:	d508      	bpl.n	8010c08 <_printf_i+0x144>
 8010bf6:	6923      	ldr	r3, [r4, #16]
 8010bf8:	6861      	ldr	r1, [r4, #4]
 8010bfa:	4299      	cmp	r1, r3
 8010bfc:	bfde      	ittt	le
 8010bfe:	2330      	movle	r3, #48	@ 0x30
 8010c00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010c04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010c08:	1b92      	subs	r2, r2, r6
 8010c0a:	6122      	str	r2, [r4, #16]
 8010c0c:	f8cd a000 	str.w	sl, [sp]
 8010c10:	464b      	mov	r3, r9
 8010c12:	aa03      	add	r2, sp, #12
 8010c14:	4621      	mov	r1, r4
 8010c16:	4640      	mov	r0, r8
 8010c18:	f7ff fee6 	bl	80109e8 <_printf_common>
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	d14a      	bne.n	8010cb6 <_printf_i+0x1f2>
 8010c20:	f04f 30ff 	mov.w	r0, #4294967295
 8010c24:	b004      	add	sp, #16
 8010c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c2a:	6823      	ldr	r3, [r4, #0]
 8010c2c:	f043 0320 	orr.w	r3, r3, #32
 8010c30:	6023      	str	r3, [r4, #0]
 8010c32:	4833      	ldr	r0, [pc, #204]	@ (8010d00 <_printf_i+0x23c>)
 8010c34:	2778      	movs	r7, #120	@ 0x78
 8010c36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010c3a:	6823      	ldr	r3, [r4, #0]
 8010c3c:	6831      	ldr	r1, [r6, #0]
 8010c3e:	061f      	lsls	r7, r3, #24
 8010c40:	f851 5b04 	ldr.w	r5, [r1], #4
 8010c44:	d402      	bmi.n	8010c4c <_printf_i+0x188>
 8010c46:	065f      	lsls	r7, r3, #25
 8010c48:	bf48      	it	mi
 8010c4a:	b2ad      	uxthmi	r5, r5
 8010c4c:	6031      	str	r1, [r6, #0]
 8010c4e:	07d9      	lsls	r1, r3, #31
 8010c50:	bf44      	itt	mi
 8010c52:	f043 0320 	orrmi.w	r3, r3, #32
 8010c56:	6023      	strmi	r3, [r4, #0]
 8010c58:	b11d      	cbz	r5, 8010c62 <_printf_i+0x19e>
 8010c5a:	2310      	movs	r3, #16
 8010c5c:	e7ac      	b.n	8010bb8 <_printf_i+0xf4>
 8010c5e:	4827      	ldr	r0, [pc, #156]	@ (8010cfc <_printf_i+0x238>)
 8010c60:	e7e9      	b.n	8010c36 <_printf_i+0x172>
 8010c62:	6823      	ldr	r3, [r4, #0]
 8010c64:	f023 0320 	bic.w	r3, r3, #32
 8010c68:	6023      	str	r3, [r4, #0]
 8010c6a:	e7f6      	b.n	8010c5a <_printf_i+0x196>
 8010c6c:	4616      	mov	r6, r2
 8010c6e:	e7bd      	b.n	8010bec <_printf_i+0x128>
 8010c70:	6833      	ldr	r3, [r6, #0]
 8010c72:	6825      	ldr	r5, [r4, #0]
 8010c74:	6961      	ldr	r1, [r4, #20]
 8010c76:	1d18      	adds	r0, r3, #4
 8010c78:	6030      	str	r0, [r6, #0]
 8010c7a:	062e      	lsls	r6, r5, #24
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	d501      	bpl.n	8010c84 <_printf_i+0x1c0>
 8010c80:	6019      	str	r1, [r3, #0]
 8010c82:	e002      	b.n	8010c8a <_printf_i+0x1c6>
 8010c84:	0668      	lsls	r0, r5, #25
 8010c86:	d5fb      	bpl.n	8010c80 <_printf_i+0x1bc>
 8010c88:	8019      	strh	r1, [r3, #0]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	6123      	str	r3, [r4, #16]
 8010c8e:	4616      	mov	r6, r2
 8010c90:	e7bc      	b.n	8010c0c <_printf_i+0x148>
 8010c92:	6833      	ldr	r3, [r6, #0]
 8010c94:	1d1a      	adds	r2, r3, #4
 8010c96:	6032      	str	r2, [r6, #0]
 8010c98:	681e      	ldr	r6, [r3, #0]
 8010c9a:	6862      	ldr	r2, [r4, #4]
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	f7ef fb36 	bl	8000310 <memchr>
 8010ca4:	b108      	cbz	r0, 8010caa <_printf_i+0x1e6>
 8010ca6:	1b80      	subs	r0, r0, r6
 8010ca8:	6060      	str	r0, [r4, #4]
 8010caa:	6863      	ldr	r3, [r4, #4]
 8010cac:	6123      	str	r3, [r4, #16]
 8010cae:	2300      	movs	r3, #0
 8010cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cb4:	e7aa      	b.n	8010c0c <_printf_i+0x148>
 8010cb6:	6923      	ldr	r3, [r4, #16]
 8010cb8:	4632      	mov	r2, r6
 8010cba:	4649      	mov	r1, r9
 8010cbc:	4640      	mov	r0, r8
 8010cbe:	47d0      	blx	sl
 8010cc0:	3001      	adds	r0, #1
 8010cc2:	d0ad      	beq.n	8010c20 <_printf_i+0x15c>
 8010cc4:	6823      	ldr	r3, [r4, #0]
 8010cc6:	079b      	lsls	r3, r3, #30
 8010cc8:	d413      	bmi.n	8010cf2 <_printf_i+0x22e>
 8010cca:	68e0      	ldr	r0, [r4, #12]
 8010ccc:	9b03      	ldr	r3, [sp, #12]
 8010cce:	4298      	cmp	r0, r3
 8010cd0:	bfb8      	it	lt
 8010cd2:	4618      	movlt	r0, r3
 8010cd4:	e7a6      	b.n	8010c24 <_printf_i+0x160>
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	4632      	mov	r2, r6
 8010cda:	4649      	mov	r1, r9
 8010cdc:	4640      	mov	r0, r8
 8010cde:	47d0      	blx	sl
 8010ce0:	3001      	adds	r0, #1
 8010ce2:	d09d      	beq.n	8010c20 <_printf_i+0x15c>
 8010ce4:	3501      	adds	r5, #1
 8010ce6:	68e3      	ldr	r3, [r4, #12]
 8010ce8:	9903      	ldr	r1, [sp, #12]
 8010cea:	1a5b      	subs	r3, r3, r1
 8010cec:	42ab      	cmp	r3, r5
 8010cee:	dcf2      	bgt.n	8010cd6 <_printf_i+0x212>
 8010cf0:	e7eb      	b.n	8010cca <_printf_i+0x206>
 8010cf2:	2500      	movs	r5, #0
 8010cf4:	f104 0619 	add.w	r6, r4, #25
 8010cf8:	e7f5      	b.n	8010ce6 <_printf_i+0x222>
 8010cfa:	bf00      	nop
 8010cfc:	08013c5e 	.word	0x08013c5e
 8010d00:	08013c6f 	.word	0x08013c6f

08010d04 <__sflush_r>:
 8010d04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d0c:	0716      	lsls	r6, r2, #28
 8010d0e:	4605      	mov	r5, r0
 8010d10:	460c      	mov	r4, r1
 8010d12:	d454      	bmi.n	8010dbe <__sflush_r+0xba>
 8010d14:	684b      	ldr	r3, [r1, #4]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	dc02      	bgt.n	8010d20 <__sflush_r+0x1c>
 8010d1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	dd48      	ble.n	8010db2 <__sflush_r+0xae>
 8010d20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d22:	2e00      	cmp	r6, #0
 8010d24:	d045      	beq.n	8010db2 <__sflush_r+0xae>
 8010d26:	2300      	movs	r3, #0
 8010d28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010d2c:	682f      	ldr	r7, [r5, #0]
 8010d2e:	6a21      	ldr	r1, [r4, #32]
 8010d30:	602b      	str	r3, [r5, #0]
 8010d32:	d030      	beq.n	8010d96 <__sflush_r+0x92>
 8010d34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010d36:	89a3      	ldrh	r3, [r4, #12]
 8010d38:	0759      	lsls	r1, r3, #29
 8010d3a:	d505      	bpl.n	8010d48 <__sflush_r+0x44>
 8010d3c:	6863      	ldr	r3, [r4, #4]
 8010d3e:	1ad2      	subs	r2, r2, r3
 8010d40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010d42:	b10b      	cbz	r3, 8010d48 <__sflush_r+0x44>
 8010d44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d46:	1ad2      	subs	r2, r2, r3
 8010d48:	2300      	movs	r3, #0
 8010d4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010d4c:	6a21      	ldr	r1, [r4, #32]
 8010d4e:	4628      	mov	r0, r5
 8010d50:	47b0      	blx	r6
 8010d52:	1c43      	adds	r3, r0, #1
 8010d54:	89a3      	ldrh	r3, [r4, #12]
 8010d56:	d106      	bne.n	8010d66 <__sflush_r+0x62>
 8010d58:	6829      	ldr	r1, [r5, #0]
 8010d5a:	291d      	cmp	r1, #29
 8010d5c:	d82b      	bhi.n	8010db6 <__sflush_r+0xb2>
 8010d5e:	4a2a      	ldr	r2, [pc, #168]	@ (8010e08 <__sflush_r+0x104>)
 8010d60:	410a      	asrs	r2, r1
 8010d62:	07d6      	lsls	r6, r2, #31
 8010d64:	d427      	bmi.n	8010db6 <__sflush_r+0xb2>
 8010d66:	2200      	movs	r2, #0
 8010d68:	6062      	str	r2, [r4, #4]
 8010d6a:	04d9      	lsls	r1, r3, #19
 8010d6c:	6922      	ldr	r2, [r4, #16]
 8010d6e:	6022      	str	r2, [r4, #0]
 8010d70:	d504      	bpl.n	8010d7c <__sflush_r+0x78>
 8010d72:	1c42      	adds	r2, r0, #1
 8010d74:	d101      	bne.n	8010d7a <__sflush_r+0x76>
 8010d76:	682b      	ldr	r3, [r5, #0]
 8010d78:	b903      	cbnz	r3, 8010d7c <__sflush_r+0x78>
 8010d7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8010d7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010d7e:	602f      	str	r7, [r5, #0]
 8010d80:	b1b9      	cbz	r1, 8010db2 <__sflush_r+0xae>
 8010d82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d86:	4299      	cmp	r1, r3
 8010d88:	d002      	beq.n	8010d90 <__sflush_r+0x8c>
 8010d8a:	4628      	mov	r0, r5
 8010d8c:	f7ff fbea 	bl	8010564 <_free_r>
 8010d90:	2300      	movs	r3, #0
 8010d92:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d94:	e00d      	b.n	8010db2 <__sflush_r+0xae>
 8010d96:	2301      	movs	r3, #1
 8010d98:	4628      	mov	r0, r5
 8010d9a:	47b0      	blx	r6
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	1c50      	adds	r0, r2, #1
 8010da0:	d1c9      	bne.n	8010d36 <__sflush_r+0x32>
 8010da2:	682b      	ldr	r3, [r5, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d0c6      	beq.n	8010d36 <__sflush_r+0x32>
 8010da8:	2b1d      	cmp	r3, #29
 8010daa:	d001      	beq.n	8010db0 <__sflush_r+0xac>
 8010dac:	2b16      	cmp	r3, #22
 8010dae:	d11e      	bne.n	8010dee <__sflush_r+0xea>
 8010db0:	602f      	str	r7, [r5, #0]
 8010db2:	2000      	movs	r0, #0
 8010db4:	e022      	b.n	8010dfc <__sflush_r+0xf8>
 8010db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dba:	b21b      	sxth	r3, r3
 8010dbc:	e01b      	b.n	8010df6 <__sflush_r+0xf2>
 8010dbe:	690f      	ldr	r7, [r1, #16]
 8010dc0:	2f00      	cmp	r7, #0
 8010dc2:	d0f6      	beq.n	8010db2 <__sflush_r+0xae>
 8010dc4:	0793      	lsls	r3, r2, #30
 8010dc6:	680e      	ldr	r6, [r1, #0]
 8010dc8:	bf08      	it	eq
 8010dca:	694b      	ldreq	r3, [r1, #20]
 8010dcc:	600f      	str	r7, [r1, #0]
 8010dce:	bf18      	it	ne
 8010dd0:	2300      	movne	r3, #0
 8010dd2:	eba6 0807 	sub.w	r8, r6, r7
 8010dd6:	608b      	str	r3, [r1, #8]
 8010dd8:	f1b8 0f00 	cmp.w	r8, #0
 8010ddc:	dde9      	ble.n	8010db2 <__sflush_r+0xae>
 8010dde:	6a21      	ldr	r1, [r4, #32]
 8010de0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010de2:	4643      	mov	r3, r8
 8010de4:	463a      	mov	r2, r7
 8010de6:	4628      	mov	r0, r5
 8010de8:	47b0      	blx	r6
 8010dea:	2800      	cmp	r0, #0
 8010dec:	dc08      	bgt.n	8010e00 <__sflush_r+0xfc>
 8010dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010df6:	81a3      	strh	r3, [r4, #12]
 8010df8:	f04f 30ff 	mov.w	r0, #4294967295
 8010dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e00:	4407      	add	r7, r0
 8010e02:	eba8 0800 	sub.w	r8, r8, r0
 8010e06:	e7e7      	b.n	8010dd8 <__sflush_r+0xd4>
 8010e08:	dfbffffe 	.word	0xdfbffffe

08010e0c <_fflush_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	690b      	ldr	r3, [r1, #16]
 8010e10:	4605      	mov	r5, r0
 8010e12:	460c      	mov	r4, r1
 8010e14:	b913      	cbnz	r3, 8010e1c <_fflush_r+0x10>
 8010e16:	2500      	movs	r5, #0
 8010e18:	4628      	mov	r0, r5
 8010e1a:	bd38      	pop	{r3, r4, r5, pc}
 8010e1c:	b118      	cbz	r0, 8010e26 <_fflush_r+0x1a>
 8010e1e:	6a03      	ldr	r3, [r0, #32]
 8010e20:	b90b      	cbnz	r3, 8010e26 <_fflush_r+0x1a>
 8010e22:	f7ff f96f 	bl	8010104 <__sinit>
 8010e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d0f3      	beq.n	8010e16 <_fflush_r+0xa>
 8010e2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010e30:	07d0      	lsls	r0, r2, #31
 8010e32:	d404      	bmi.n	8010e3e <_fflush_r+0x32>
 8010e34:	0599      	lsls	r1, r3, #22
 8010e36:	d402      	bmi.n	8010e3e <_fflush_r+0x32>
 8010e38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e3a:	f7ff fb64 	bl	8010506 <__retarget_lock_acquire_recursive>
 8010e3e:	4628      	mov	r0, r5
 8010e40:	4621      	mov	r1, r4
 8010e42:	f7ff ff5f 	bl	8010d04 <__sflush_r>
 8010e46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e48:	07da      	lsls	r2, r3, #31
 8010e4a:	4605      	mov	r5, r0
 8010e4c:	d4e4      	bmi.n	8010e18 <_fflush_r+0xc>
 8010e4e:	89a3      	ldrh	r3, [r4, #12]
 8010e50:	059b      	lsls	r3, r3, #22
 8010e52:	d4e1      	bmi.n	8010e18 <_fflush_r+0xc>
 8010e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e56:	f7ff fb57 	bl	8010508 <__retarget_lock_release_recursive>
 8010e5a:	e7dd      	b.n	8010e18 <_fflush_r+0xc>

08010e5c <fiprintf>:
 8010e5c:	b40e      	push	{r1, r2, r3}
 8010e5e:	b503      	push	{r0, r1, lr}
 8010e60:	4601      	mov	r1, r0
 8010e62:	ab03      	add	r3, sp, #12
 8010e64:	4805      	ldr	r0, [pc, #20]	@ (8010e7c <fiprintf+0x20>)
 8010e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e6a:	6800      	ldr	r0, [r0, #0]
 8010e6c:	9301      	str	r3, [sp, #4]
 8010e6e:	f7ff fca3 	bl	80107b8 <_vfiprintf_r>
 8010e72:	b002      	add	sp, #8
 8010e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e78:	b003      	add	sp, #12
 8010e7a:	4770      	bx	lr
 8010e7c:	24000040 	.word	0x24000040

08010e80 <__swhatbuf_r>:
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	460c      	mov	r4, r1
 8010e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e88:	2900      	cmp	r1, #0
 8010e8a:	b096      	sub	sp, #88	@ 0x58
 8010e8c:	4615      	mov	r5, r2
 8010e8e:	461e      	mov	r6, r3
 8010e90:	da0d      	bge.n	8010eae <__swhatbuf_r+0x2e>
 8010e92:	89a3      	ldrh	r3, [r4, #12]
 8010e94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e98:	f04f 0100 	mov.w	r1, #0
 8010e9c:	bf14      	ite	ne
 8010e9e:	2340      	movne	r3, #64	@ 0x40
 8010ea0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	6031      	str	r1, [r6, #0]
 8010ea8:	602b      	str	r3, [r5, #0]
 8010eaa:	b016      	add	sp, #88	@ 0x58
 8010eac:	bd70      	pop	{r4, r5, r6, pc}
 8010eae:	466a      	mov	r2, sp
 8010eb0:	f000 f848 	bl	8010f44 <_fstat_r>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	dbec      	blt.n	8010e92 <__swhatbuf_r+0x12>
 8010eb8:	9901      	ldr	r1, [sp, #4]
 8010eba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010ebe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010ec2:	4259      	negs	r1, r3
 8010ec4:	4159      	adcs	r1, r3
 8010ec6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010eca:	e7eb      	b.n	8010ea4 <__swhatbuf_r+0x24>

08010ecc <__smakebuf_r>:
 8010ecc:	898b      	ldrh	r3, [r1, #12]
 8010ece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ed0:	079d      	lsls	r5, r3, #30
 8010ed2:	4606      	mov	r6, r0
 8010ed4:	460c      	mov	r4, r1
 8010ed6:	d507      	bpl.n	8010ee8 <__smakebuf_r+0x1c>
 8010ed8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010edc:	6023      	str	r3, [r4, #0]
 8010ede:	6123      	str	r3, [r4, #16]
 8010ee0:	2301      	movs	r3, #1
 8010ee2:	6163      	str	r3, [r4, #20]
 8010ee4:	b003      	add	sp, #12
 8010ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ee8:	ab01      	add	r3, sp, #4
 8010eea:	466a      	mov	r2, sp
 8010eec:	f7ff ffc8 	bl	8010e80 <__swhatbuf_r>
 8010ef0:	9f00      	ldr	r7, [sp, #0]
 8010ef2:	4605      	mov	r5, r0
 8010ef4:	4639      	mov	r1, r7
 8010ef6:	4630      	mov	r0, r6
 8010ef8:	f7ff fba8 	bl	801064c <_malloc_r>
 8010efc:	b948      	cbnz	r0, 8010f12 <__smakebuf_r+0x46>
 8010efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f02:	059a      	lsls	r2, r3, #22
 8010f04:	d4ee      	bmi.n	8010ee4 <__smakebuf_r+0x18>
 8010f06:	f023 0303 	bic.w	r3, r3, #3
 8010f0a:	f043 0302 	orr.w	r3, r3, #2
 8010f0e:	81a3      	strh	r3, [r4, #12]
 8010f10:	e7e2      	b.n	8010ed8 <__smakebuf_r+0xc>
 8010f12:	89a3      	ldrh	r3, [r4, #12]
 8010f14:	6020      	str	r0, [r4, #0]
 8010f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f1a:	81a3      	strh	r3, [r4, #12]
 8010f1c:	9b01      	ldr	r3, [sp, #4]
 8010f1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010f22:	b15b      	cbz	r3, 8010f3c <__smakebuf_r+0x70>
 8010f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f000 f81d 	bl	8010f68 <_isatty_r>
 8010f2e:	b128      	cbz	r0, 8010f3c <__smakebuf_r+0x70>
 8010f30:	89a3      	ldrh	r3, [r4, #12]
 8010f32:	f023 0303 	bic.w	r3, r3, #3
 8010f36:	f043 0301 	orr.w	r3, r3, #1
 8010f3a:	81a3      	strh	r3, [r4, #12]
 8010f3c:	89a3      	ldrh	r3, [r4, #12]
 8010f3e:	431d      	orrs	r5, r3
 8010f40:	81a5      	strh	r5, [r4, #12]
 8010f42:	e7cf      	b.n	8010ee4 <__smakebuf_r+0x18>

08010f44 <_fstat_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4d07      	ldr	r5, [pc, #28]	@ (8010f64 <_fstat_r+0x20>)
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	4608      	mov	r0, r1
 8010f4e:	4611      	mov	r1, r2
 8010f50:	602b      	str	r3, [r5, #0]
 8010f52:	f7ef fe3f 	bl	8000bd4 <_fstat>
 8010f56:	1c43      	adds	r3, r0, #1
 8010f58:	d102      	bne.n	8010f60 <_fstat_r+0x1c>
 8010f5a:	682b      	ldr	r3, [r5, #0]
 8010f5c:	b103      	cbz	r3, 8010f60 <_fstat_r+0x1c>
 8010f5e:	6023      	str	r3, [r4, #0]
 8010f60:	bd38      	pop	{r3, r4, r5, pc}
 8010f62:	bf00      	nop
 8010f64:	24003470 	.word	0x24003470

08010f68 <_isatty_r>:
 8010f68:	b538      	push	{r3, r4, r5, lr}
 8010f6a:	4d06      	ldr	r5, [pc, #24]	@ (8010f84 <_isatty_r+0x1c>)
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	4604      	mov	r4, r0
 8010f70:	4608      	mov	r0, r1
 8010f72:	602b      	str	r3, [r5, #0]
 8010f74:	f7ef fe3e 	bl	8000bf4 <_isatty>
 8010f78:	1c43      	adds	r3, r0, #1
 8010f7a:	d102      	bne.n	8010f82 <_isatty_r+0x1a>
 8010f7c:	682b      	ldr	r3, [r5, #0]
 8010f7e:	b103      	cbz	r3, 8010f82 <_isatty_r+0x1a>
 8010f80:	6023      	str	r3, [r4, #0]
 8010f82:	bd38      	pop	{r3, r4, r5, pc}
 8010f84:	24003470 	.word	0x24003470

08010f88 <_sbrk_r>:
 8010f88:	b538      	push	{r3, r4, r5, lr}
 8010f8a:	4d06      	ldr	r5, [pc, #24]	@ (8010fa4 <_sbrk_r+0x1c>)
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4608      	mov	r0, r1
 8010f92:	602b      	str	r3, [r5, #0]
 8010f94:	f7ef fe46 	bl	8000c24 <_sbrk>
 8010f98:	1c43      	adds	r3, r0, #1
 8010f9a:	d102      	bne.n	8010fa2 <_sbrk_r+0x1a>
 8010f9c:	682b      	ldr	r3, [r5, #0]
 8010f9e:	b103      	cbz	r3, 8010fa2 <_sbrk_r+0x1a>
 8010fa0:	6023      	str	r3, [r4, #0]
 8010fa2:	bd38      	pop	{r3, r4, r5, pc}
 8010fa4:	24003470 	.word	0x24003470

08010fa8 <abort>:
 8010fa8:	b508      	push	{r3, lr}
 8010faa:	2006      	movs	r0, #6
 8010fac:	f000 f82c 	bl	8011008 <raise>
 8010fb0:	2001      	movs	r0, #1
 8010fb2:	f7ef fdbf 	bl	8000b34 <_exit>

08010fb6 <_raise_r>:
 8010fb6:	291f      	cmp	r1, #31
 8010fb8:	b538      	push	{r3, r4, r5, lr}
 8010fba:	4605      	mov	r5, r0
 8010fbc:	460c      	mov	r4, r1
 8010fbe:	d904      	bls.n	8010fca <_raise_r+0x14>
 8010fc0:	2316      	movs	r3, #22
 8010fc2:	6003      	str	r3, [r0, #0]
 8010fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc8:	bd38      	pop	{r3, r4, r5, pc}
 8010fca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010fcc:	b112      	cbz	r2, 8010fd4 <_raise_r+0x1e>
 8010fce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010fd2:	b94b      	cbnz	r3, 8010fe8 <_raise_r+0x32>
 8010fd4:	4628      	mov	r0, r5
 8010fd6:	f000 f831 	bl	801103c <_getpid_r>
 8010fda:	4622      	mov	r2, r4
 8010fdc:	4601      	mov	r1, r0
 8010fde:	4628      	mov	r0, r5
 8010fe0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fe4:	f000 b818 	b.w	8011018 <_kill_r>
 8010fe8:	2b01      	cmp	r3, #1
 8010fea:	d00a      	beq.n	8011002 <_raise_r+0x4c>
 8010fec:	1c59      	adds	r1, r3, #1
 8010fee:	d103      	bne.n	8010ff8 <_raise_r+0x42>
 8010ff0:	2316      	movs	r3, #22
 8010ff2:	6003      	str	r3, [r0, #0]
 8010ff4:	2001      	movs	r0, #1
 8010ff6:	e7e7      	b.n	8010fc8 <_raise_r+0x12>
 8010ff8:	2100      	movs	r1, #0
 8010ffa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ffe:	4620      	mov	r0, r4
 8011000:	4798      	blx	r3
 8011002:	2000      	movs	r0, #0
 8011004:	e7e0      	b.n	8010fc8 <_raise_r+0x12>
	...

08011008 <raise>:
 8011008:	4b02      	ldr	r3, [pc, #8]	@ (8011014 <raise+0xc>)
 801100a:	4601      	mov	r1, r0
 801100c:	6818      	ldr	r0, [r3, #0]
 801100e:	f7ff bfd2 	b.w	8010fb6 <_raise_r>
 8011012:	bf00      	nop
 8011014:	24000040 	.word	0x24000040

08011018 <_kill_r>:
 8011018:	b538      	push	{r3, r4, r5, lr}
 801101a:	4d07      	ldr	r5, [pc, #28]	@ (8011038 <_kill_r+0x20>)
 801101c:	2300      	movs	r3, #0
 801101e:	4604      	mov	r4, r0
 8011020:	4608      	mov	r0, r1
 8011022:	4611      	mov	r1, r2
 8011024:	602b      	str	r3, [r5, #0]
 8011026:	f7ef fd73 	bl	8000b10 <_kill>
 801102a:	1c43      	adds	r3, r0, #1
 801102c:	d102      	bne.n	8011034 <_kill_r+0x1c>
 801102e:	682b      	ldr	r3, [r5, #0]
 8011030:	b103      	cbz	r3, 8011034 <_kill_r+0x1c>
 8011032:	6023      	str	r3, [r4, #0]
 8011034:	bd38      	pop	{r3, r4, r5, pc}
 8011036:	bf00      	nop
 8011038:	24003470 	.word	0x24003470

0801103c <_getpid_r>:
 801103c:	f7ef bd5f 	b.w	8000afe <_getpid>

08011040 <_init>:
 8011040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011042:	bf00      	nop
 8011044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011046:	bc08      	pop	{r3}
 8011048:	469e      	mov	lr, r3
 801104a:	4770      	bx	lr

0801104c <_fini>:
 801104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104e:	bf00      	nop
 8011050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011052:	bc08      	pop	{r3}
 8011054:	469e      	mov	lr, r3
 8011056:	4770      	bx	lr
